{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Desarrollo web en Entorno Cliente","text":"<p> En esta web (en desarrollo) est\u00e1n los apuntes del m\u00f3dulo profesional de Desarrollo Web en Entorno Cliente. El material intelectual pertenece al profesor Jos\u00e9 Enrique Atienzar. Los materiales originales est\u00e1n accesibles en ingl\u00e9s en https://jeatzr.github.io/dwec-bi/.</p> <p>El temario se estructura de la siguiente forma:</p> <ol> <li>Introducci\u00f3n a JavaScript y las herramientas de FrontEnd</li> <li>Fundamentos de JavaScript </li> <li>Arrays, Objectos...,  y Clases</li> <li>Gestionando el DOM</li> <li>Gesti\u00f3n de Eventos y Formularios</li> <li>AJAX</li> <li>Almacenamiento en el lado del cliente</li> </ol>"},{"location":"T01/","title":"UNIDAD 1 - Introducci\u00f3n a las Herramientas de Frontend","text":""},{"location":"T01/#1-diferencia-entre-internet-y-la-web","title":"1. Diferencia entre Internet y la Web","text":""},{"location":"T01/#el-internet-la-www","title":"\u00bfEl Internet === La WWW?","text":""},{"location":"T01/#el-internet","title":"El Internet:","text":"<ul> <li>Definici\u00f3n: El Internet es una red global de computadoras y otros dispositivos interconectados. Es la infraestructura que permite diversos tipos de comunicaci\u00f3n digital e intercambio de datos.</li> <li>Historia: El desarrollo del Internet comenz\u00f3 a fines de la d\u00e9cada de 1960 con la creaci\u00f3n de ARPANET, un proyecto financiado por el Departamento de Defensa de EE.UU. A lo largo de las d\u00e9cadas siguientes, evolucion\u00f3 hasta convertirse en una red global con la creaci\u00f3n de los protocolos TCP/IP en la d\u00e9cada de 1980. Posteriormente se crearon protocolos en las diferentes capas de la arquitectura</li> <li>Componentes: El Internet consta de hardware (servidores, enrutadores, cables) y ciertos est\u00e1ndares y protocolos (TCP/IP, Ethernet).</li> <li>Funciones: Soporta una amplia gama de servicios como correo electr\u00f3nico, transferencia de archivos, mensajer\u00eda instant\u00e1nea y, por supuesto, la World Wide Web.</li> <li>Analog\u00eda: Piensa en el Internet como la red f\u00edsica de caminos y carreteras.</li> </ul> <p>Para m\u00e1s informaci\u00f3n, recordad los apuntes de SISI del a\u00f1o pasao. Echadle un ojo a la parte de redes (tercer trimestre, y sobretodo al curso de ccna de Cisco que hicist\u00e9is).</p>"},{"location":"T01/#la-world-wide-web-www","title":"La World Wide Web (WWW):","text":"<ul> <li>Definici\u00f3n: La World Wide Web es una colecci\u00f3n de informaci\u00f3n, accesible a trav\u00e9s del Internet, que est\u00e1 formateada e interconectada utilizando hipertexto y hipermedia. Es un servicio que opera sobre el Internet.</li> <li>Historia: La World Wide Web (WWW), o comunmente conocida como \"la Web\" fue inventada por Tim Berners-Lee en 1989 mientras trabajaba en CERN. Desarroll\u00f3 el primer navegador web y servidor web, y el primer sitio web se public\u00f3 en 1991. La web creci\u00f3 r\u00e1pidamente en popularidad a lo largo de la d\u00e9cada de 1990, convirti\u00e9ndose en una parte importante de la vida cotidiana.</li> <li>Componentes: La WWW consta de p\u00e1ginas web, sitios web y navegadores web. Las p\u00e1ginas web son documentos escritos en HTML y se accede a trav\u00e9s de URLs.</li> <li> <p>Funciones: Permite a los usuarios acceder y navegar por las p\u00e1ginas web a trav\u00e9s de navegadores web (como Chrome, Firefox, Safari). Estas p\u00e1ginas pueden contener texto, im\u00e1genes, videos y enlaces a otras p\u00e1ginas.</p> </li> <li> <p>Analog\u00eda: Piensa en la web como un sistema espec\u00edfico de caminos y puntos de referencia (sitios web y p\u00e1ginas web) que existen en las carreteras y autopistas f\u00edsicas (el Internet).</p> </li> </ul>"},{"location":"T01/#resumen","title":"Resumen:","text":"<ul> <li>Internet: La red global subyacente que conecta millones de computadoras.</li> <li>La Web: Un subconjunto del Internet, compuesto por p\u00e1ginas y sitios web, accesibles a trav\u00e9s de navegadores web.</li> </ul> <p>La web depende del Internet para funcionar, pero el Internet tambi\u00e9n soporta muchos otros servicios adem\u00e1s de la Web.</p>"},{"location":"T01/#2-arquitectura-web","title":"2. Arquitectura Web","text":"<p>La arquitectura m\u00e1s com\u00fan es cliente/servidor.</p> <ul> <li>Un cliente es un consumidor de servicios. El navegador web en nuestro dispositivo act\u00faa como cliente.</li> <li>Un servidor es uno o m\u00e1s procesos alojados en m\u00e1quinas que proporcionan los servicios consumidos por el cliente. El servicio m\u00e1s utilizado en la WWW es HTTP.</li> </ul> <p></p>"},{"location":"T01/#3-desarrollo-frontend-y-backend","title":"3. Desarrollo Frontend y Backend","text":"<ul> <li>Backend: La parte de la aplicaci\u00f3n web que se ejecuta en el servidor.</li> <li>Frontend: La parte de la aplicaci\u00f3n web que se ejecuta en el cliente.</li> </ul>"},{"location":"T01/#31-desarrollo-backend","title":"3.1 Desarrollo Backend","text":"<p>Es el desarrollo llevado a cabo en el lado del servidor. Es responsable de la l\u00f3gica de negocio y la persistencia de datos (almacenamiento en la base de datos).</p> <p>Lenguajes de backend:</p> <ul> <li>Java</li> <li>Python</li> <li>Node.js</li> <li>Ruby</li> <li>PHP</li> <li>ASP.NET</li> </ul> <p></p>"},{"location":"T01/#32-desarrollo-frontend","title":"3.2 Desarrollo Frontend","text":"<p>Es la parte desarrollada para ejecutarse en el cliente (navegador web). El navegador web solo sabe interpretar tres lenguajes:</p> <ul> <li>HTML: Para la estructura y el contenido de la p\u00e1gina.</li> <li>CSS: Define la apariencia de la p\u00e1gina web.</li> <li>JavaScript: Lenguaje que define el comportamiento din\u00e1mico.</li> </ul> <p></p> <p>Actualmente, est\u00e1 ganando mucha prominencia debido al peso creciente de las aplicaciones web en el lado del cliente -&gt; Aplicaciones de una sola p\u00e1gina (o comoo se conocen por sus siglas en ingl\u00e9s SPAs -Single Page Aplications).</p> <p>Una aplicaci\u00f3n de una sola p\u00e1gina (SPA) es una aplicaci\u00f3n web o sitio web que interact\u00faa con el usuario al reescribir din\u00e1micamente la p\u00e1gina web actual con nuevos datos del servidor web, en lugar del m\u00e9todo predeterminado de un navegador web que carga p\u00e1ginas completamente nuevas. El objetivo es transiciones m\u00e1s r\u00e1pidas que hagan que el sitio web se sienta m\u00e1s como una aplicaci\u00f3n nativa. (Fuente: Wikipedia)</p> <p>Podemos escribir la l\u00f3gica de nuestra p\u00e1gina en Vanilla JS. Pero la complejidad de los proyectos ha hecho necesario que aparezcan varios marcos y bibliotecas de JavaScript:</p> <ul> <li>Angular</li> <li>React</li> <li>Vue</li> <li>Svelte</li> <li>Astro</li> <li>Muchos m\u00e1s y muchos m\u00e1s por venir.</li> </ul> <p></p>"},{"location":"T01/#4-lenguaje-javascript","title":"4. Lenguaje JavaScript","text":"<p>JS es un lenguaje interpretado definido como:</p> <ul> <li> <p>Orientado a objetos: JavaScript utiliza objetos para organizar y estructurar el c\u00f3digo, asociando propiedades y m\u00e9todos con datos.</p> </li> <li> <p>Imperativo: JavaScript ejecuta las instrucciones de forma secuencial para realizar tareas, enfoc\u00e1ndose en c\u00f3mo lograr resultados paso a paso.</p> </li> <li> <p>Basado en prototipos: En lugar de clases, JavaScript utiliza prototipos como plantillas para crear objetos, permitiendo que los objetos hereden propiedades y m\u00e9todos directamente de otros objetos.</p> </li> <li> <p>D\u00e9bilmente tipado: JavaScript permite tipos de variables flexibles, donde las variables pueden cambiar de tipo durante la ejecuci\u00f3n sin declaraciones expl\u00edcitas. Mucho cuidado con esto!! El nombre de la variable tendr\u00e1 que ser suficientemente explicativo como para saber qu\u00e9 hace.</p> </li> <li> <p>Tipado din\u00e1mico: Los tipos se determinan en tiempo de ejecuci\u00f3n en JavaScript, permitiendo que las variables contengan diferentes tipos de valores a medida que el programa se ejecuta, lo que mejora la flexibilidad pero requiere un manejo cuidadoso para evitar comportamientos inesperados. (Lo de antes, vamos)</p> </li> </ul> <p>Se utiliza principalmente en el lado del cliente, implementado como parte del navegador web para mejorar la interfaz web y proporcionar un comportamiento din\u00e1mico.</p> <p>Tambi\u00e9n se puede usar en el lado del servidor con node.js para crear el backend y muchas otras aplicaciones.</p> <p>RECORDATORIO</p> <ul> <li>Lenguajes compilados: Un lenguaje compilado es un lenguaje de programaci\u00f3n donde el c\u00f3digo fuente se traduce completamente a c\u00f3digo m\u00e1quina antes de la ejecuci\u00f3n, lo que generalmente resulta en un rendimiento m\u00e1s r\u00e1pido pero requiere una compilaci\u00f3n espec\u00edfica para diferentes plataformas. Ejemplos incluyen C, C++ y Rust.</li> <li>Lenguajes interpretados: Un lenguaje interpretado es un lenguaje de programaci\u00f3n donde el c\u00f3digo se ejecuta l\u00ednea por l\u00ednea mediante un int\u00e9rprete, traduciendo cada instrucci\u00f3n a c\u00f3digo m\u00e1quina una a una durante el tiempo de ejecuci\u00f3n. Este enfoque mejora la portabilidad entre diferentes sistemas, pero generalmente resulta en un rendimiento m\u00e1s lento en comparaci\u00f3n con los lenguajes compilados. Ejemplos incluyen Python, JavaScript y Ruby.</li> </ul>"},{"location":"T01/#41-versiones-de-js","title":"4.1 Versiones de JS","text":"<p>JS es un dialecto de ECMAScript y est\u00e1 definido por ese est\u00e1ndar.</p> <p>Historia:</p> <ul> <li>Fue creado por Brendan Eich para Netscape en 1995, inicialmente llamado LiveScript antes de ser renombrado a JavaScript.</li> <li>En 1997, ECMA cre\u00f3 el primer est\u00e1ndar ECMAScript.</li> <li>ECMAScript 5, ES5, lanzado en 2009, introdujo muchas mejoras y se mantuvo como un est\u00e1ndar durante muchos a\u00f1os.</li> <li>ECMAScript 6, tambi\u00e9n conocido como ES6, lanzado en 2015, introdujo mejoras importantes como el uso de clases y m\u00f3dulos. Es la versi\u00f3n m\u00e1s ampliamente soportada por todos los navegadores actuales.</li> <li>Desde ES6, se ha lanzado una nueva versi\u00f3n cada a\u00f1o. Por ejemplo, la versi\u00f3n para 2023 es ECMAScript 14. Podemos consultar la historia de versiones de ECMAScript en Wikipedia o el sitio oficial de ECMA para verificar las versiones m\u00e1s recientes de ECMAScript.</li> </ul> <p></p> <p>Fuente de la imagen: Gabriel Lebec @ Course Report</p>"},{"location":"T01/#42-typescript","title":"4.2 TypeScript","text":"<p>TypeScript es un superconjunto de JavaScript con tipado est\u00e1tico que se compila a JavaScript plano. Es desarrollado y mantenido por Microsoft. TypeScript agrega tipos est\u00e1ticos opcionales, clases e interfaces a JavaScript, proporcionando una experiencia de desarrollo robusta para construir aplicaciones a gran escala.</p> <p></p>"},{"location":"T01/#5-herramientas-para-el-desarrollo-web-frontend","title":"5. Herramientas para el desarrollo web frontend","text":""},{"location":"T01/#51-editores-de-texto","title":"5.1 Editores de texto","text":"<p>La herramienta m\u00e1s importante para programar ser\u00e1 un buen editor de texto.</p> <p>Podemos encontrar varias opciones en el mercado, desde el antiguo y confiable (pero simple) Notepad++ hasta el muy poderoso VS Code.</p> <ul> <li>Notepad++</li> <li>Sublime Text</li> <li>Atom</li> <li>VS Code</li> </ul> <p></p> <p>Usaremos el m\u00e1s extendido hoy en d\u00eda: VSCode. Este potente y \u00fatil editor de Microsoft tiene muchas caracter\u00edsticas deseables, como:</p> <ul> <li>Resaltado de sintaxis</li> <li>Multiplataforma: Para Windows, macOS y Linux</li> <li>Soporte para depuraci\u00f3n</li> <li>Control de Git integrado y integraci\u00f3n con GitHub</li> <li>Integraci\u00f3n con GitHub Copilot</li> <li>\"Snippets\" o fragmentos de c\u00f3digo reutilizables</li> <li>Una multitud de extensiones instalables</li> </ul> <p>Editores de c\u00f3digo en l\u00ednea. Tienen la ventaja de no tener que instalar y configurar herramientas en tu computadora. Son muy \u00fatiles como un sandbox (entorno controlado).</p> <ul> <li>Stackblitz</li> <li>Code Sandbox</li> <li>Code Pen</li> </ul>"},{"location":"T01/#52-navegadores-web","title":"5.2 Navegadores web","text":"<p>Los desarrolladores dependen de los navegadores no solo para ver p\u00e1ginas web, sino tambi\u00e9n para herramientas y capacidades esenciales que ayudan en el desarrollo y la depuraci\u00f3n:</p> <ul> <li>Herramientas de Desarrollo: Los navegadores modernos vienen equipados con herramientas de desarrollo (como las Herramientas de Desarrollador de Chrome, Herramientas de Desarrollador de Firefox y el Inspector Web de Safari) que proporcionan caracter\u00edsticas como:<ul> <li>Inspecci\u00f3n del DOM</li> <li>Inspecci\u00f3n de CSS</li> <li>Consola de JavaScript</li> </ul> </li> </ul> <p></p>"},{"location":"T01/#53-herramientas-de-control-de-versiones","title":"5.3 Herramientas de control de versiones","text":"<p>Las herramientas de control de versiones son sistemas de software que ayudan a gestionar los cambios en archivos, documentos o cualquier colecci\u00f3n de informaci\u00f3n a lo largo del tiempo. Son esenciales para rastrear modificaciones realizadas por individuos o equipos, facilitar la colaboraci\u00f3n y asegurar la integridad y trazabilidad del historial del proyecto. Las herramientas que utilizaremos son:</p> <ul> <li>Git: Git es un sistema de control de versiones distribuido dise\u00f1ado para velocidad y eficiencia. Permite que varios desarrolladores trabajen en el mismo proyecto simult\u00e1neamente y ofrece capacidades de ramificaci\u00f3n y fusi\u00f3n. Esta es una herramienta que necesitamos instalar en nuestra computadora: Git</li> </ul> <p></p> <ul> <li> <p>GitHub: GitHub funciona principalmente como una plataforma de alojamiento para repositorios de Git, permitiendo sincronizar nuestro proyecto local de Git con GitHub. Pero podemos ver todos los diferentes prop\u00f3sitos de esta herramienta:</p> <ol> <li> <p>Control de versiones: GitHub aloja repositorios de Git, permitiendo a los desarrolladores gestionar y rastrear cambios en su base de c\u00f3digo a lo largo del tiempo.</p> </li> <li> <p>Colaboraci\u00f3n: Facilita el trabajo en equipo al permitir que varios desarrolladores trabajen en el mismo proyecto simult\u00e1neamente, gestionen ramas y fusionen cambios.</p> </li> <li> <p>Alojamiento de c\u00f3digo: Proporciona una plataforma para que los desarrolladores alojen y compartan sus repositorios de c\u00f3digo fuente, haci\u00e9ndolos accesibles para su visualizaci\u00f3n, clonaci\u00f3n y contribuci\u00f3n.</p> </li> <li> <p>Seguimiento de problemas: Incluye un sistema de seguimiento de problemas para gestionar y resolver errores, tareas y solicitudes de caracter\u00edsticas relacionadas con proyectos.</p> </li> <li> <p>Gesti\u00f3n de proyectos: Ofrece herramientas como tableros de proyectos y hitos para organizar tareas, rastrear el progreso y priorizar elementos de trabajo entre equipos.</p> </li> <li> <p>Integraci\u00f3n CI/CD: Se integra con herramientas de CI/CD para automatizar los procesos de construcci\u00f3n, prueba y despliegue, asegurando que los cambios de c\u00f3digo sean probados y desplegados de manera eficiente.</p> </li> <li> <p>Comunidad y c\u00f3digo abierto: Fomenta una comunidad en torno al desarrollo de software de c\u00f3digo abierto, permitiendo a los usuarios descubrir, contribuir y colaborar en proyectos a nivel global.</p> </li> <li> <p>Documentaci\u00f3n: Proporciona herramientas para crear y mantener documentaci\u00f3n del proyecto, wikis y archivos README para explicar los objetivos del proyecto, instrucciones de uso y directrices de contribuci\u00f3n.</p> </li> </ol> </li> </ul> <p>DOCUMENTAR, DOCUMENTAR, DOCUMENTAR!!!</p> <ul> <li>No olvides documentar tu proyecto con un archivo README.md escrito en Markdown. Markdown es un lenguaje de marcado ligero que se usa com\u00fanmente para formatear texto en la web. Al escribir archivos README en plataformas como GitHub, Markdown proporciona una forma simple y legible de estructurar y dar estilo al texto sin necesidad de escribir HTML directamente.</li> <li>Aprende algo sobre el lenguaje Markdown </li> <li>Echa un vistazo a este ejemplo -&gt; README.md</li> <li>Las notas actuales que est\u00e1s leyendo tambi\u00e9n est\u00e1n escritas en Markdown y luego compiladas por <code>mkdocs</code> para generar una documentaci\u00f3n bonita. -&gt; README.md</li> <li>Ejemplo de sintaxis Markdown: </li> </ul> <pre><code># Nombre del Proyecto\n\nDescripci\u00f3n de tu proyecto.\n\n## Instalaci\u00f3n\n\nInstrucciones sobre c\u00f3mo instalar y ejecutar tu proyecto.\n\n## Uso\n\nEjemplos e instrucciones sobre c\u00f3mo usar tu proyecto\n\n.\n\n### Ejemplo de C\u00f3digo\n\n```javascript\nconsole.log('\u00a1Hola, Mundo!');\n</code></pre>"},{"location":"T01/#54-gestores-de-paquetes","title":"5.4 Gestores de Paquetes","text":"<p>Los gestores de paquetes nos ayudan a instalar diversas utilidades, caracter\u00edsticas y frameworks. Facilitan el proceso de agregar, actualizar y gestionar paquetes de software, asegurando que tengamos las dependencias y herramientas necesarias para desarrollar y ejecutar nuestras aplicaciones de manera eficiente. Ejemplos populares son pip para Python y npm para JavaScript. En nuestro caso, para JavaScript, las dos opciones principales son:</p> <ul> <li> <p>npm (Node Package Manager) es el gestor de paquetes predeterminado para Node.js. Ayuda a los desarrolladores a instalar, compartir y gestionar bibliotecas y dependencias de JavaScript para sus proyectos. Tambi\u00e9n proporciona un registro donde los desarrolladores pueden publicar sus propios paquetes.</p> </li> <li> <p>Yarn es un gestor de paquetes alternativo para JavaScript que se enfoca en la velocidad, seguridad y fiabilidad. Desarrollado por Facebook, Yarn utiliza un archivo de bloqueo para garantizar instalaciones consistentes en diferentes entornos y optimiza el proceso de instalaci\u00f3n y actualizaci\u00f3n de dependencias.</p> </li> </ul> <p></p>"},{"location":"T01/#55-linters-transpiladores-y-bundlers","title":"5.5 Linters, Transpiladores y Bundlers","text":"<p>Linters son herramientas que analizan tu c\u00f3digo para encontrar y corregir errores de programaci\u00f3n, fallos, errores de estilo y otros patrones problem\u00e1ticos. Ayudan a hacer cumplir los est\u00e1ndares de codificaci\u00f3n y mejorar la calidad del c\u00f3digo. Ejemplos incluyen:</p> <ul> <li>ESLint: Un linter popular para JavaScript y TypeScript que ayuda a identificar y corregir problemas en tu c\u00f3digo.</li> <li>JSHint: Otro linter de JavaScript que detecta errores y problemas potenciales en tu c\u00f3digo.</li> </ul> <p></p> <p>Transpiladores son herramientas que convierten c\u00f3digo escrito en un lenguaje o versi\u00f3n de programaci\u00f3n a otro. A menudo se utilizan para traducir JavaScript moderno (ES6+) a versiones m\u00e1s antiguas que sean compatibles con todos los navegadores. Ejemplos incluyen:</p> <ul> <li>Babel: Un transpilador de JavaScript ampliamente utilizado que convierte c\u00f3digo ES6+ en ES5, haci\u00e9ndolo compatible con navegadores m\u00e1s antiguos.</li> <li>TypeScript Compiler (tsc): Convierte c\u00f3digo TypeScript en JavaScript, permitiendo a los desarrolladores usar las caracter\u00edsticas de verificaci\u00f3n de tipos de TypeScript mientras despliegan JavaScript.</li> <li>Sass: Un lenguaje de preprocesador de scripts que se interpreta o compila en CSS, facilitando la escritura y mantenimiento de estilos.</li> </ul> <p></p> <p>Bundlers son herramientas que combinan varios archivos y m\u00f3dulos en un solo archivo (o unos pocos archivos) para una distribuci\u00f3n y despliegue m\u00e1s sencillos. Manejan las dependencias, optimizan el c\u00f3digo y, a menudo, incluyen caracter\u00edsticas como la divisi\u00f3n de c\u00f3digo y la minificaci\u00f3n. Ejemplos incluyen:</p> <ul> <li>Webpack: Un potente bundler de m\u00f3dulos para aplicaciones de JavaScript que procesa y combina varios activos como JavaScript, CSS e im\u00e1genes.</li> <li>Parcel: Un bundler de aplicaciones web r\u00e1pido y sin configuraci\u00f3n que funciona directamente sin necesidad de configuraci\u00f3n.</li> <li>Rollup: Un bundler de m\u00f3dulos para JavaScript que compila peque\u00f1os fragmentos de c\u00f3digo en algo m\u00e1s grande y complejo, a menudo utilizado para construir bibliotecas.</li> </ul> <p></p> <p>Estas herramientas son esenciales en el desarrollo web moderno, ayudando a mantener la calidad del c\u00f3digo, garantizar la compatibilidad en diferentes entornos y optimizar el resultado final para un mejor rendimiento.</p>"},{"location":"T01/#56-bibliotecas-y-frameworks","title":"5.6 Bibliotecas y Frameworks","text":"<p>Bibliotecas y frameworks ampl\u00edan las capacidades y simplifican el uso de JavaScript (JS) o CSS. Proporcionan c\u00f3digo preescrito para realizar tareas comunes, ayudando a los desarrolladores a construir aplicaciones de manera m\u00e1s eficiente y con menos errores.</p> <ul> <li>Bootstrap: Un framework de CSS que simplifica la creaci\u00f3n de elementos de interfaz web.</li> <li>jQuery: Una biblioteca de JavaScript que facilita el uso de JS y mejora la compatibilidad. Un poco anticuada y innecesaria, pero a\u00fan se utiliza en sitios web heredados.</li> </ul>"},{"location":"T01/#frameworks","title":"Frameworks","text":"<ul> <li>Angular: Un framework de JS creado por Google que facilita la creaci\u00f3n de Aplicaciones de P\u00e1gina \u00danica (SPA) y sigue el patr\u00f3n MVC (Modelo-Vista-Controlador). Es ampliamente utilizado y tiene una gran comunidad.</li> <li>Vue.js: Un framework de JS de c\u00f3digo abierto tambi\u00e9n dise\u00f1ado para crear SPAs.</li> <li>React: Una biblioteca de JS de c\u00f3digo abierto creada por Facebook. Se utiliza principalmente para definir la capa de Vista, aunque puede funcionar con extensiones para definir m\u00e1s partes de la arquitectura de la aplicaci\u00f3n. Tambi\u00e9n se utiliza para crear SPAs.</li> </ul> <p>Algunos otros memes :) Meme de la guerra de frameworks - Meme de jQuery</p>  Ejercicio Pr\u00e1ctico 1.1 <p>Consulta Estado del Arte de Javascript y comenta. (Est\u00e1 en ingl\u00e9s, pero por suerte o desgracia, en inform\u00e1tica todo se escribe en ingl\u00e9s)</p> <p>Investiga diferentes frameworks y selecciona uno que utilizar\u00edas para construir una Aplicaci\u00f3n de P\u00e1gina \u00danica (SPA). Explica las razones que te convencieron.</p>"},{"location":"T01/#6-incluir-codigo-javascript","title":"6. Incluir C\u00f3digo JavaScript","text":"<p>Tenemos varias formas de incluir c\u00f3digo JavaScript en nuestra p\u00e1gina web:</p> <ol> <li> <p>JavaScript Interno</p> <p>Puedes incluir JavaScript dentro de la secci\u00f3n <code>&lt;head&gt;</code> o <code>&lt;body&gt;</code> de tu archivo HTML usando la etiqueta <code>&lt;script&gt;</code>. Si deseas asegurarte de que el c\u00f3digo se ejecute una vez que se haya analizado todo el documento, se recomienda incluir esta etiqueta al final de <code>&lt;body&gt;</code>.</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"es\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\n    &lt;title&gt;Ejemplo de JavaScript Interno&lt;/title&gt;\n\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;h1&gt;Ejemplo de JavaScript Interno&lt;/h1&gt;\n    &lt;script&gt;\n        alert(\"\u00a1Hola, Mundo!\");       \n    &lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> </li> <li> <p>JavaScript Externo</p> <p>Puedes incluir JavaScript desde un archivo externo usando la etiqueta <code>&lt;script&gt;</code> con el atributo <code>src</code>. Al igual que con el JavaScript interno, la posici\u00f3n de la etiqueta <code>&lt;script&gt;</code> dentro del documento HTML es importante.</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"es\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\n    &lt;title&gt;Ejemplo de JavaScript Externo&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;h1&gt;Ejemplo de JavaScript Externo&lt;/h1&gt;\n    &lt;script src=\"script.js\"&gt;&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>script.js: <pre><code>alert(\"\u00a1Hola, Mundo!\");\nconsole.log(\"\u00a1Hola Mundo!!!\")\n</code></pre></p> </li> <li> <p>Atributos Defer y Async     Puedes usar los atributos <code>defer</code> o <code>async</code> en la etiqueta <code>&lt;script&gt;</code> para controlar el comportamiento de carga de tu JavaScript.</p> <ul> <li><code>defer</code>: El script se ejecutar\u00e1 despu\u00e9s de que el HTML se haya analizado completamente. Esto nos a\u00f1ade dos ventajas: por una parte, la carga de la p\u00e1gina no se queda 'parada' proque haya que cargar un script 'gordo' (que los hay, de hecho es lo m\u00e1s com\u00fan); y dos, cuando el script se ejecuta es seguro que toda la p\u00e1gina (con los objetos correspondientes a las etiquetas) est\u00e1 cargada y son accesibles al script. El uso de <code>defer</code> nos da m\u00e1s control sobre la ejecuci\u00f3n de los scripts porque <code>defer</code> mantiene el orden de ejecuci\u00f3n si tienes m\u00faltiples scripts.</li> <li><code>async</code>: El script se ejecutar\u00e1 de manera as\u00edncrona tan pronto como est\u00e9 disponible. Se ejecuta a su \"bola\", y si hay varios scripts marcados con <code>async</code>, se van a ejecutar todos en hilos (procesos) independientes al proceso de carga de la p\u00e1gina principal.</li> </ul> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"es\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\n    &lt;title&gt;Ejemplo de Defer y Async&lt;/title&gt;\n    &lt;script src=\"defer-script.js\" defer&gt;&lt;/script&gt;\n    &lt;script src=\"async-script.js\" async&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;h1&gt;Ejemplo de Defer y Async&lt;/h1&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>defer-script.js</p> <pre><code>console.log(\"Script Defer Cargado\");\n</code></pre> <p>async-script.js</p> <pre><code>console.log(\"Script Async Cargado\");\n</code></pre> <p>La alternativa sin usar estos atributos, es poner los scripts justo antes de la etiqueta de cierre del  <code>&lt;/body&gt;</code>.</p> <pre><code>&lt;body&gt;\n     ...todo el contenido est\u00e1 arriba del script...\n\n     &lt;script src=\"./miscript.js\"&gt;&lt;/script&gt;\n&lt;/body&gt;\n</code></pre> <p>Colocar tus etiquetas de script justo antes de la etiqueta de cierre <code>&lt;/body&gt;</code> asegura que el script se ejecute despu\u00e9s de que se haya analizado el HTML. Sin embargo, esto no garantiza inherentemente el orden de ejecuci\u00f3n si tienes m\u00faltiples scripts y comportamiento as\u00edncrono. </p> <p>Aun as\u00ed, en nuestro caso, cualquiera de las dos opciones es v\u00e1lida para preservar la ejecuci\u00f3n del script una vez que el documento HTML est\u00e9 totalmente analizado.</p> </li> <li> <p>Manejadores de Eventos en Atributos HTML</p> <p>Puedes incluir JavaScript directamente dentro de los atributos HTML, como <code>onclick</code>, <code>onload</code>, etc. No es una buena pr\u00e1ctica, solo en algunos casos espec\u00edficos.</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"es\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\n    &lt;title&gt;Ejemplo de Manejadores de Eventos&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;h1&gt;Ejemplo de Manejadores de Eventos&lt;/h1&gt;\n    &lt;button onclick=\"alert('\u00a1Hola, Mundo!')\"&gt;Haz Clic Aqu\u00ed&lt;/button&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> </li> </ol>"},{"location":"T01/#7-bootstrap","title":"7. Bootstrap","text":""},{"location":"T01/#que-es-bootstrap","title":"\u00bfQu\u00e9 es Bootstrap?","text":"<p>Bootstrap es un popular framework de c\u00f3digo abierto para el desarrollo de sitios web responsivos y orientados a m\u00f3viles. Proporciona una colecci\u00f3n de componentes de CSS y JavaScript que te ayudan a dise\u00f1ar y construir interfaces de usuario de manera r\u00e1pida y eficiente. Bootstrap est\u00e1 dise\u00f1ado para simplificar el proceso de creaci\u00f3n de dise\u00f1os consistentes y visualmente atractivos en diferentes dispositivos y tama\u00f1os de pantalla.</p>"},{"location":"T01/#caracteristicas-clave","title":"Caracter\u00edsticas Clave:","text":"<ul> <li>Sistema de Cuadr\u00edcula Responsiva: Ajusta autom\u00e1ticamente el dise\u00f1o seg\u00fan el tama\u00f1o de la pantalla, asegurando que tu sitio web se vea bien en todos los dispositivos.</li> <li>Componentes Pre-estilizados: Incluye una amplia gama de componentes listos para usar, como botones, formularios, barras de navegaci\u00f3n y modales.</li> <li>Personalizable: Permite la personalizaci\u00f3n de componentes y estilos utilizando variables y temas.</li> <li>Plugins de JavaScript: Viene con plugins de JavaScript integrados para funcionalidad adicional, como carruseles, tooltips y modales.</li> </ul>"},{"location":"T01/#como-usar-bootstrap","title":"C\u00f3mo Usar Bootstrap:","text":"<ol> <li>Formas de Incluir Bootstrap en Tu Proyecto:<ul> <li>Descargar Bootstrap: Puedes descargar los archivos compilados de Bootstrap manualmente y agregarlos a tu archivo HTML.</li> <li>A trav\u00e9s de CDN: Puedes agregar los enlaces de CDN a los archivos CSS y de scripts en el archivo HTML sin descargarlos.</li> <li>Instalar dependencias: Puedes instalar las dependencias en el proyecto con <code>npm i bootstrap@5.3.3</code>. En este caso, el gestor de paquetes de Node mantiene el control de los archivos.</li> <li>Usar Snippet de Bootstrap: Puedes usar, por ejemplo, el snippet <code>bs5-$</code> en el editor VSCode. La plantilla Bs5 escribir\u00e1 todos los enlaces de CDN por ti.</li> </ul> </li> </ol> <p>Obt\u00e9n m\u00e1s informaci\u00f3n en: getbootstrap.com.</p> <ol> <li> <p>Usar Componentes de Bootstrap:</p> <ul> <li>Sistema de Cuadr\u00edcula: Crea dise\u00f1os responsivos utilizando el sistema de cuadr\u00edcula de Bootstrap. Por ejemplo:  <pre><code>&lt;div class=\"container\"&gt;\n    &lt;div class=\"row\"&gt;\n        &lt;div class=\"col-md-6\"&gt;Columna 1&lt;/div&gt;\n        &lt;div class=\"col-md-6\"&gt;Columna 2&lt;/div&gt;\n    &lt;/div&gt;\n&lt;/div&gt;\n</code></pre></li> <li>Componentes: Utiliza componentes pre-estilizados como botones, formularios y barras de navegaci\u00f3n:  <pre><code>&lt;button type=\"button\" class=\"btn btn-primary\"&gt;Bot\u00f3n Primario&lt;/button&gt;\n</code></pre></li> </ul> </li> <li> <p>Personalizar Bootstrap:</p> <ul> <li>Sobrescribir Predeterminados: Personaliza los estilos de Bootstrap agregando tus propias reglas CSS despu\u00e9s del enlace CSS de Bootstrap en tu HTML.</li> <li>Usar las Herramientas de Personalizaci\u00f3n de Bootstrap: Modifica las variables de Bootstrap y recompila el CSS si est\u00e1s utilizando una herramienta de construcci\u00f3n.</li> </ul> </li> <li> <p>Usar Snippets de B5 en Visual Studio Code:</p> <ul> <li>Instalar la Extensi\u00f3n Bootstrap 5 Quick Snippets: Para agilizar tu proceso de desarrollo, instala la extensi\u00f3n Bootstrap 5 Quick Snippets para Visual Studio Code. Esta extensi\u00f3n proporciona fragmentos de c\u00f3digo para Bootstrap 5, permiti\u00e9ndote insertar r\u00e1pidamente componentes y clases de Bootstrap en tu c\u00f3digo.</li> <li>Usar Snippets: Una vez instalada, puedes usar los snippets para insertar c\u00f3digo de Bootstrap. Por ejemplo:</li> <li>Escribe <code>bs5-$</code> y presiona <code>Tab</code> para crear la plantilla completa del documento HTML.</li> <li>Escribe <code>bs5-navbar-default</code> y presiona <code>Tab</code> para insertar un snippet de barra de navegaci\u00f3n de Bootstrap.</li> <li>Escribe <code>bs5-button-default</code> y presiona <code>Tab</code> para insertar un snippet de bot\u00f3n predeterminado de Bootstrap.</li> </ul> </li> </ol>"},{"location":"T01/#recursos","title":"Recursos:","text":"<ul> <li>Documentaci\u00f3n Oficial: Documentaci\u00f3n de Bootstrap</li> <li>Ejemplos y Plantillas: Explora varios ejemplos y plantillas de Bootstrap para comenzar r\u00e1pidamente.</li> <li>Snippets de B4 para VSCode: Extensi\u00f3n B5 Quick Snippets</li> </ul>"},{"location":"T02/","title":"UNIDAD 2 - Fundamentos de JavaScript","text":""},{"location":"T02/#1-sintaxis-general-de-javascript","title":"1. Sintaxis General de JavaScript","text":""},{"location":"T02/#sintaxis-de-ecmascript","title":"Sintaxis de ECMAScript","text":"<p>JavaScript, tambi\u00e9n conocido como ECMAScript, tiene una sintaxis similar a lenguajes como C++ y Java.</p>"},{"location":"T02/#comentarios-de-una-sola-linea","title":"Comentarios de una sola l\u00ednea","text":"<p>Usa <code>//</code> para escribir comentarios en una sola l\u00ednea.</p> <pre><code>// Esto es un comentario de una sola l\u00ednea\n</code></pre>"},{"location":"T02/#comentarios-de-varias-lineas","title":"Comentarios de varias l\u00edneas","text":"<p>Usa <code>/* ... */</code> para escribir comentarios que abarquen varias l\u00edneas. <pre><code>/* Esto es \nun comentario\nmultil\u00ednea\n*/\n</code></pre></p>"},{"location":"T02/#puntos-y-comas","title":"Puntos y comas","text":"<p>El punto y coma (<code>;</code>) al final de una l\u00ednea es opcional, pero se recomienda para evitar posibles problemas durante la ejecuci\u00f3n del c\u00f3digo.</p> <pre><code>let x = 5;  // Se recomienda el punto y coma\n</code></pre>"},{"location":"T02/#palabras-reservadas","title":"Palabras reservadas","text":"<p>No utilices palabras clave reservadas para nombres de variables, ya que tienen un significado especial en el lenguaje. <pre><code>// Incorrecto\nlet for = 10;  // 'for' es una palabra reservada\n\n// Correcto\nlet count = 10;\n</code></pre></p> <p>Lista de palabras reservadas: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Lexical_grammar#reserved_words</p>"},{"location":"T02/#tipado-debil","title":"Tipado d\u00e9bil","text":"<p>JavaScript es un lenguaje de tipado d\u00e9bil, lo que significa que no necesitas declarar expl\u00edcitamente los tipos de datos. <pre><code>let variable = 10;   // No es necesario declarar el tipo, es un n\u00famero\nvariable = \"texto\";   // Ahora es una cadena\n</code></pre></p> <p>Gram\u00e1tica l\u00e9xica: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Lexical_grammar</p>"},{"location":"T02/#2-mensajes-en-consola-y-alertas-en-el-navegador","title":"2. Mensajes en consola y alertas en el navegador","text":""},{"location":"T02/#21-consola-de-depuracion","title":"2.1 Consola de depuraci\u00f3n","text":"<p>Podemos ver la consola en el navegador seleccionando la opci\u00f3n \"Inspeccionar\". Ya dependiendo del navegador habr\u00e1 uno u otros atajos de teclado. En Chrome se abre <code>Ctrl</code>+<code>mayus</code>+<code>i</code>, o con <code>click derecho</code>+<code>inspeccionar</code>, o con <code>F10</code>. Si tienes un navegador distinto, te toca investigar. Podemos interactuar con el objeto de consola del sistema invocando sus m\u00e9todos.</p> <pre><code>console.log('\u00a1Hola Mundo!');           // mensaje general\nconsole.info('Este es un mensaje informativo'); // mensaje informativo\nconsole.warn('\u00a1Ten cuidado!');            // mensaje de advertencia\nconsole.error('Error fatal');           // mensaje de error\n</code></pre>"},{"location":"T02/#declaracion-debugger","title":"Declaraci\u00f3n <code>debugger</code>","text":"<p>La declaraci\u00f3n <code>debugger</code> se puede utilizar para pausar la ejecuci\u00f3n de un script con fines de depuraci\u00f3n.</p> <p>Usando la declaraci\u00f3n <code>debugger</code>, puedes pausar la ejecuci\u00f3n del c\u00f3digo en un punto espec\u00edfico para inspeccionar el estado actual de las variables y la pila de llamadas.</p> <p><pre><code>function add(a, b) {\n    debugger;  // La ejecuci\u00f3n se detendr\u00e1 aqu\u00ed \n                //si las herramientas de desarrollo est\u00e1n abiertas\n    return a + b;\n}\nadd(2, 3);\n</code></pre> Cuando la ejecuci\u00f3n del c\u00f3digo alcanza la declaraci\u00f3n <code>debugger</code>, se pausar\u00e1, permiti\u00e9ndote usar las herramientas de desarrollo del navegador para inspeccionar el estado actual y depurar tu c\u00f3digo de manera efectiva.</p>"},{"location":"T02/#22-alertas-prompt-y-confirmaciones","title":"2.2 Alertas, Prompt y Confirmaciones","text":"<p>Estos m\u00e9todos se utilizan para mostrar alertas en el navegador, solicitar datos y confirmar acciones con un cuadro de di\u00e1logo de OK/Cancelar.</p>"},{"location":"T02/#alert","title":"alert()","text":"<p>El m\u00e9todo <code>alert()</code> muestra un cuadro de alerta con un mensaje especificado y un bot\u00f3n OK.</p> <pre><code>alert(\"\u00a1Este es un mensaje de alerta!\");\n</code></pre>"},{"location":"T02/#prompt","title":"prompt()","text":"<p>El m\u00e9todo <code>prompt()</code> muestra un cuadro de di\u00e1logo con un mensaje solicitando al usuario que ingrese alg\u00fan texto. Devuelve el texto ingresado por el usuario o <code>null</code> si el usuario presion\u00f3 Cancelar.</p> <pre><code>let userInput = prompt(\"Por favor, introduce tu nombre:\");\nconsole.log(\"El usuario ingres\u00f3: \" + userInput);\n</code></pre>"},{"location":"T02/#confirm","title":"confirm()","text":"<p>El m\u00e9todo <code>confirm()</code> muestra un cuadro de di\u00e1logo con un mensaje especificado, junto con un bot\u00f3n OK y un bot\u00f3n Cancelar. Devuelve <code>true</code> si el usuario presion\u00f3 OK, y <code>false</code> si presion\u00f3 Cancelar.</p> <pre><code>let userConfirmed = confirm(\"\u00bfRealmente deseas eliminar este elemento?\");\nif (userConfirmed) {\n    console.log(\"El usuario confirm\u00f3 la acci\u00f3n.\");\n} else {\n    console.log(\"El usuario cancel\u00f3 la acci\u00f3n.\");\n}\n</code></pre>"},{"location":"T02/#mejores-practicas","title":"Mejores Pr\u00e1cticas","text":"<p>Debemos intentar evitar el uso de estos m\u00e9todos siempre que sea posible. Interrumpen la experiencia del usuario y generalmente se consideran una mala pr\u00e1ctica en el desarrollo web moderno. Los utilizaremos por ahora, ya que a\u00fan no conocemos otras formas de comunicaci\u00f3n din\u00e1mica con el usuario.</p>"},{"location":"T02/#3-declaracion-de-variables","title":"3. Declaraci\u00f3n de variables","text":"<p>Podemos declarar variables de tres maneras:</p>"},{"location":"T02/#var","title":"var","text":"<p>La forma tradicional de declarar una variable. No se recomienda hoy en d\u00eda. </p> <p>Las variables declaradas con <code>var</code> dentro de una funci\u00f3n son de \u00e1mbito de funci\u00f3n, lo que significa que son accesibles a lo largo de la funci\u00f3n en la que se declaran, pero no fuera de ella.</p> <p><code>var</code> crear\u00e1 variables de \u00e1mbito global cuando se declaren fuera de una funci\u00f3n o en el \u00e1mbito global.</p> <pre><code>var globalVar = \"Soy accesible desde cualquier lugar en el script\";\nfunction testVar() {\n    var functionVar = \"Soy accesible solo dentro de esta funci\u00f3n\";\n    console.log(globalVar);  // Muestra: Soy accesible desde cualquier lugar en el script\n    console.log(functionVar);  // Muestra: Soy accesible solo dentro de esta funci\u00f3n\n}\nconsole.log(globalVar);  // Muestra: Soy accesible desde cualquier lugar en el script\n// console.log(functionVar);  // Error de referencia no capturado: functionVar no est\u00e1 definida\n</code></pre>"},{"location":"T02/#let","title":"let","text":"<p>Una variable que solo es accesible dentro del bloque, sentencia o expresi\u00f3n donde se declara. <code>let</code> tiene \u00e1mbito de bloque.</p> <pre><code>function testLet() {\n    let blockVar = \"Soy accesible solo dentro de este bloque\";\n    if (true) {\n        let innerBlockVar = \"Soy accesible solo dentro de este bloque interno\";\n        console.log(blockVar);  // Muestra: Soy accesible solo dentro de este bloque\n        console.log(innerBlockVar);  // Muestra: Soy accesible solo dentro de este bloque interno\n    }\n    console.log(blockVar);  // Muestra: Soy accesible solo dentro de este bloque\n    // console.log(innerBlockVar);  // Error de referencia no capturado: innerBlockVar no est\u00e1 definida\n}\n</code></pre>"},{"location":"T02/#const","title":"const","text":"<p>Una constante que solo es accesible dentro del bloque, sentencia o expresi\u00f3n donde se declara. Las constantes no se pueden reasignar despu\u00e9s de su declaraci\u00f3n inicial. <code>const</code> tiene \u00e1mbito de bloque.</p> <pre><code>function testConst() {\n    const constantVar = \"Soy una constante dentro de este bloque\";\n    if (true) {\n        const innerConstantVar = \"Soy una constante dentro de este bloque interno\";\n        console.log(constantVar);  // Muestra: Soy una constante dentro de este bloque\n        console.log(innerConstantVar);  // Muestra: Soy una constante dentro de este bloque interno\n    }\n    console.log(constantVar);  // Muestra: Soy una constante dentro de este bloque\n    // console.log(innerConstantVar);  // Error de referencia no capturado: innerConstantVar no est\u00e1 definida\n    // constantVar = \"Nuevo valor\";  // Error de tipo no capturado: Asignaci\u00f3n a una variable constante.\n}\n</code></pre>"},{"location":"T02/#mejores-practicas_1","title":"Mejores Pr\u00e1cticas","text":"<p>Se recomienda usar <code>let</code> o <code>const</code> dependiendo de si el valor de la variable debe cambiar o no.</p> <ul> <li>Usa <code>let</code> para variables que cambiar\u00e1n.</li> <li>Usa <code>const</code> para variables que no deben cambiar.</li> </ul> <pre><code>let variableMutable = \"Puedo cambiar\";\nvariableMutable = \"He cambiado\";\n\nconst variableInmutable = \"No puedo cambiar\";\n// variableInmutable = \"Intentando cambiar\";  // Error de tipo no capturado: Asignaci\u00f3n a una variable constante.\n</code></pre>"},{"location":"T02/#4-tipos-de-datos-primitivos","title":"4. Tipos de Datos Primitivos","text":"<p>JavaScript tiene varios tipos de datos primitivos:</p> <ul> <li> <p>Number (N\u00famero): Representa tanto n\u00fameros enteros como n\u00fameros de punto flotante.</p> </li> <li> <p>String (Cadena): Representa una secuencia de caracteres (texto).</p> </li> <li> <p>Boolean (Booleano): Representa una entidad l\u00f3gica y puede tener dos valores: <code>true</code> o <code>false</code>.</p> </li> <li> <p>Undefined (Indefinido): Indica que una variable ha sido declarada pero a\u00fan no se le ha asignado un valor.</p> </li> <li> <p>Null (Nulo): Representa la ausencia intencional de cualquier valor de objeto. Es uno de los valores primitivos de JavaScript y se trata como un valor \"falso\" en operaciones booleanas.</p> </li> </ul>"},{"location":"T02/#nota","title":"Nota:","text":"<ul> <li>Undefined: <code>undefined</code> significa que una variable ha sido declarada pero a\u00fan no se le ha asignado un valor.</li> <li>Null: <code>null</code> es un valor asignado. Puede ser asignado a una variable como representaci\u00f3n de la ausencia de valor.</li> </ul> <p>Estos son los bloques de construcci\u00f3n b\u00e1sicos de los datos en JavaScript. Entender y usar estos tipos de datos correctamente es crucial para programar de manera efectiva en JavaScript.</p>"},{"location":"T02/#41-tipo-numero","title":"4.1 Tipo N\u00famero","text":"<p>En JavaScript, el tipo de datos <code>number</code> representa tanto n\u00fameros enteros como n\u00fameros de punto flotante.</p>"},{"location":"T02/#caracteristicas-de-los-numeros","title":"Caracter\u00edsticas de los N\u00fameros","text":"<ul> <li>N\u00fameros Positivos o Negativos:</li> </ul> <pre><code>let numeroPositivo = 4;\nlet numeroNegativo = -30;\n</code></pre> <ul> <li>N\u00fameros con o sin decimales</li> </ul> <pre><code>let entero = 34;\nlet puntoFlotante = 34.4;\nlet cero = 0;\nlet flotanteNegativo = -9.45;\nlet numeroGrande = 150000000;\n</code></pre>"},{"location":"T02/#operaciones-aritmeticas","title":"Operaciones Aritm\u00e9ticas","text":"<p>Puedes realizar varias operaciones aritm\u00e9ticas con n\u00fameros:</p> <ul> <li>Adici\u00f3n <code>+</code></li> <li>Sustracci\u00f3n <code>-</code></li> <li>Multiplicaci\u00f3n <code>*</code></li> <li>Divisi\u00f3n <code>/</code></li> <li>M\u00f3dulo <code>%</code>: Devuelve el resto de una divisi\u00f3n.</li> <li>Exponenciaci\u00f3n <code>**</code>: Eleva el primer operando a la potencia del segundo operando.</li> <li>Incremento <code>++</code>: Aumenta el valor de una variable en 1.</li> <li>Decremento <code>--</code>: Disminuye el valor de una variable en 1.</li> </ul> <pre><code>let suma = 4 + 5;  // 9\nlet resta = 10 - 3;  // 7\nlet producto = 4 * 3;  // 12\nlet cociente = 12 / 4;  // 3\n\nlet potencia = 2 ** 3;  // 8\n\nlet contador = 0;\ncontador++;  // el contador ahora es 1\n\ncontador--;  // el contador ahora es 0\n</code></pre>"},{"location":"T02/#operaciones-de-comparacion","title":"Operaciones de Comparaci\u00f3n","text":"<p>Tambi\u00e9n puedes comparar n\u00fameros utilizando varios operadores de comparaci\u00f3n:</p> <ul> <li>Menor que <code>&lt;</code></li> <li>Mayor que <code>&gt;</code></li> <li>Menor o igual que <code>&lt;=</code></li> <li>Mayor o igual que <code>&gt;=</code></li> <li>Igual a <code>==</code></li> <li>Estrictamente igual a <code>===</code></li> <li>Distinto de <code>!=</code></li> <li>Estrictamente distinto de <code>!==</code></li> </ul> <p><pre><code>let esMenorQue = 5 &lt; 10;  // true\nlet esMayorQue = 10 &gt; 5;  // true\nlet esMenorOIgualQue = 5 &lt;= 5;  // true\nlet esMayorOIgualQue = 10 &gt;= 10;  // true\nlet esIgual = 5 == '5';  // true (coerci\u00f3n de tipos)\nlet esEstrictamenteIgual = 5 === 5;  // true\nlet esEstrictamenteIgualConTiposDiferentes = 5 === '5';  // false (sin coerci\u00f3n de tipos)\nlet esDistinto = 5 != '5';  // false (coerci\u00f3n de tipos)\nlet esEstrictamenteDistinto = 5 !== '5';  // true (sin coerci\u00f3n de tipos)\n</code></pre> La \"coerci\u00f3n de tipos\" fuerza la conversi\u00f3n y comparaci\u00f3n del contenido de los operandos, cuando son de tipos distintos. --&gt; Comparaciones de igualdad y semejanza</p>"},{"location":"T02/#metodos-adicionales-para-numeros-en-el-objeto-math","title":"M\u00e9todos Adicionales para N\u00fameros en el Objeto Math","text":"<p>JavaScript tambi\u00e9n proporciona varios m\u00e9todos incorporados para trabajar con n\u00fameros a trav\u00e9s del Objeto Math.</p>  Ejercicio Pr\u00e1ctico 2a <p>En JavaScript no hay un operador para calcular la divisi\u00f3n entera. \u00bfPuedes implementar una forma de obtener esta operaci\u00f3n utilizando las operaciones enumeradas arriba?</p> <p>Ejemplos:</p> <ul> <li>10 // 3 = 3</li> <li>13 // -3 = -4</li> </ul>"},{"location":"T02/#mas-sobre-el-tipo-numero","title":"M\u00e1s sobre el tipo n\u00famero","text":"<ul> <li><code>typeof</code>: Tipo de la variable</li> <li><code>NaN</code>: Not-a-Number (No es un n\u00famero)</li> <li><code>isNaN()</code>: Comprueba si el valor es NaN</li> <li><code>.toString()</code>: Convierte un n\u00famero a cadena</li> <li><code>.toFixed()</code>: Formatea un n\u00famero a un n\u00famero fijo de decimales</li> </ul> <pre><code>// Tipo de la variable\nlet tipoDeNumero = typeof 123;  // 'number'\nlet tipoDeCadena = typeof '123';  // 'string'\n\n// NaN (No es un n\u00famero)\nlet noEsUnNumero = NaN;\nlet chequeoNaN1 = isNaN(123);  // false\nlet chequeoNaN2 = isNaN(NaN);  // true\nlet chequeoNaN3 = isNaN('Hola');  // true\n\n// Convertir n\u00famero a cadena\nlet numeroACadena = (123).toString();  // '123'\n\n// Formatear n\u00famero a decimales fijos\nlet decimalFijo = (123.456).toFixed(2);  // '123.46'\n</code></pre>"},{"location":"T02/#42-tipo-cadena","title":"4.2 Tipo Cadena","text":"<p>En JavaScript, el tipo de datos <code>string</code> se utiliza para representar datos textuales.</p>"},{"location":"T02/#caracteristicas-de-las-cadenas","title":"Caracter\u00edsticas de las Cadenas","text":"<ul> <li>Cadenas: Una secuencia de caracteres encerrada entre comillas.</li> <li>Comillas dobles: <code>\"Hola mundo\"</code></li> <li>Comillas simples: <code>'Hola mundo'</code></li> </ul>"},{"location":"T02/#operaciones-con-cadenas","title":"Operaciones con Cadenas","text":"<ul> <li>Concatenaci\u00f3n: Combinar m\u00faltiples cadenas en una sola.<ul> <li>Ejemplo: <code>cadena = 'Hola' + ' mundo'</code> da como resultado <code>'Hola mundo'</code></li> </ul> </li> <li>Operaciones de Comparaci\u00f3n: Comparar cadenas.<ul> <li>Igual a (<code>==</code>)</li> <li>Estrictamente igual a (<code>===</code>)</li> <li>Distinto de (<code>!=</code>)</li> </ul> </li> <li>Otros M\u00e9todos \u00datiles: Se pueden encontrar en el Objeto String</li> </ul> <pre><code>// Caracter\u00edsticas de las cadenas\nlet cadena1 = \"Hola mundo\";\nlet cadena2 = 'Hola mundo';\n\n// Concatenaci\u00f3n\nlet saludo = 'Hola' + ' mundo';  // 'Hola mundo'\n\n// Operaciones de Comparaci\u00f3n\nlet esIgual = 'Hola' == 'Hola';  // true\nlet esEstrictamenteIgual = 'Hola' === 'Hola';  // true\nlet esEstrictamenteIgual2 = '123' === 132;  // false\nlet esDistinto = 'Hola' != 'Mundo';  // true\n\n// Otros m\u00e9todos \u00fatiles\nlet longitudDeCadena = saludo.length;  // 10\nlet enMayusculas = saludo.toUpperCase();  // 'HOLA MUNDO'\nlet enMinusculas = saludo.toLowerCase();  // 'hola mundo'\nlet incluyePalabra = saludo.includes('mundo');  // true\nlet dividirCadena = saludo.split(' ');  // ['Hola', 'mundo']\nlet subCadena = saludo.substring(1, 4);  // 'ola'  substring(inicio, fin+1)\nlet caracterEn = saludo.charAt(1);  // 'o'\nlet indiceDelCaracter = saludo.indexOf('m');  // 5\nlet cadenaReemplazada = saludo.replace('mundo', 'todos');  // 'Hola todos'\nlet cadenaRecortada = '   Hola mundo   '.trim();  // 'Hola mundo'\n</code></pre>"},{"location":"T02/#literales-de-plantilla","title":"Literales de Plantilla","text":"<p>Los literales de plantilla, tambi\u00e9n conocidos como cadenas de plantilla, son una caracter\u00edstica de JavaScript que permite la interpolaci\u00f3n de expresiones y la creaci\u00f3n de cadenas en varias l\u00edneas. Se encierran entre comillas invertidas (<code>`</code>) en lugar de comillas simples o dobles.</p> <pre><code>let texto = `\u00a1Hola, mundo!`;\n</code></pre>"},{"location":"T02/#caracteristicas-de-los-literales-de-plantilla","title":"Caracter\u00edsticas de los Literales de Plantilla","text":"<ol> <li>Interpolaci\u00f3n de Cadenas: Insertar expresiones dentro de una cadena usando la sintaxis <code>${expresi\u00f3n}</code>.</li> </ol> <pre><code>let nombre = \"Juan\";\nlet apellido = \"P\u00e9rez\";\nlet edad = 30;\nlet presentacion = `Mi nombre es ${nombre} ${apellido} y tengo ${edad} a\u00f1os.`;\n\nlet resultado = `2 + 2 es ${2 + 2}`;  // \"2 + 2 es 4\"\n</code></pre> <ol> <li>Cadenas Multil\u00ednea: Crear cadenas que ocupan varias l\u00edneas.</li> </ol> <pre><code>let direccion = `Calle Falsa 123\nCiudad Springfield\n62704`;\n</code></pre>  Ejercicio Pr\u00e1ctico 2b: Trabajando con Cadenas en JavaScript <p>Sigue estos pasos para completar el ejercicio:</p> <ol> <li>Concatenaci\u00f3n y Literales de Plantilla:             <ul> <li>Crea dos variables de cadena, <code>nombre</code> y <code>apellido</code>.</li> <li>Conc\u00e1t\u00e9nalos usando tanto el operador <code>+</code> como literales de plantilla para formar un nombre completo.</li> </ul> </li> <li>M\u00e9todos de Cadenas:             <ul> <li>Usa los m\u00e9todos <code>.toUpperCase()</code> y <code>.toLowerCase()</code> para cambiar el caso del nombre completo.</li> <li>Extrae una subcadena del nombre completo usando los m\u00e9todos <code>substring()</code> y <code>slice()</code>.</li> </ul> </li> <li>Interpolaci\u00f3n de Cadenas:             <ul> <li>Crea una cadena multil\u00ednea usando literales de plantilla que incluya el nombre completo y una direcci\u00f3n.</li> </ul> </li> <li>Dividiendo y Recortando Cadenas:             <ul> <li>Crea una cadena que incluya una lista de elementos separados por comas.</li> <li>Divide la cadena en un arreglo y recorta los espacios en blanco de cada elemento.</li> </ul> </li> <li>Chequeo y Conversi\u00f3n:             <ul> <li>Crea una variable que incluya un n\u00famero como cadena.</li> <li>Verifica si es un n\u00famero usando <code>isNaN()</code> y convi\u00e9rtelo a n\u00famero.</li> <li>Usa <code>.toString()</code> para convertir un n\u00famero de nuevo a una cadena.</li> <li>Usa <code>.toFixed()</code> para formatear un n\u00famero a dos decimales.</li> </ul> </li> </ol>"},{"location":"T02/#43-tipo-booleano","title":"4.3 Tipo Booleano","text":"<ul> <li>Solo acepta dos valores: <code>true</code> o <code>false</code></li> <li>Es \u00fatil para verificar el estado de la aplicaci\u00f3n</li> <li> <p>Se recomienda que su nombre defina el estado positivo</p> <ul> <li>Ejemplo: <code>userIsLogged</code>, <code>itemFound</code>, <code>errorFound</code> </li> </ul> </li> <li> <p><code>Boolean(value);</code> devuelve el valor booleano de una condici\u00f3n o variable.</p> </li> </ul>"},{"location":"T02/#boolean","title":"Boolean()","text":"<p><code>Boolean(value);</code> devuelve el valor booleano de una condici\u00f3n o variable.</p>"},{"location":"T02/#verdadero-vs-falso","title":"Verdadero vs Falso","text":"Verdadero Falso 1 0, -0 <code>\"Cualquiera\"</code> <code>\"\"</code> 3.14 NaN <code>100 &gt; 5</code> null <code>1 &lt; 100</code> undefined <code>'1' == 1</code> <code>'1' === 1</code> <pre><code>// Ejemplo 1: Usando Boolean() para obtener el valor booleano\nconsole.log(Boolean(1));           // true\nconsole.log(Boolean(0));           // false\nconsole.log(Boolean(\"Cualquiera\"));  // true\nconsole.log(Boolean(\"\"));          // false\n\n// Ejemplo 2: Usando expresiones\nconsole.log(100 &gt; 5);              // true\nconsole.log(1 &lt; 100);              // true\nconsole.log('1' == 1);             // true\nconsole.log('1' === 1);            // false\n\n// Ejemplo 3: Verificaci\u00f3n de undefined y null\nlet a;\nconsole.log(Boolean(a));           // false\n\nlet b = null;\nconsole.log(Boolean(b));           // false\n\n// Ejemplo 4: Verificaci\u00f3n de NaN\nlet c = NaN;\nconsole.log(Boolean(c));           // false\nconsole.log(isNaN(c));             // true\n\n// Ejemplo 5: Combinando m\u00faltiples verificaciones\nlet value = \"Hola\";\nif (value &amp;&amp; typeof value === \"string\") {\n    console.log(\"El valor es una cadena no vac\u00eda\"); // Esto se imprimir\u00e1\n}\n\nlet number = 0;\nif (!number) {\n    console.log(\"El n\u00famero es cero o falso\"); // Esto se imprimir\u00e1\n}\n</code></pre>"},{"location":"T02/#44-tipos-undefined-y-null","title":"4.4 Tipos Undefined y Null","text":"<p>En JavaScript, <code>undefined</code> y <code>null</code> son dos tipos distintos que representan la ausencia de valor o no existencia. A menudo se confunden entre s\u00ed pero tienen significados y casos de uso diferentes.</p>"},{"location":"T02/#undefined","title":"Undefined","text":"<ul> <li>Tipo: <code>undefined</code></li> <li>Descripci\u00f3n: Una variable que ha sido declarada pero a\u00fan no se le ha asignado un valor tiene el valor <code>undefined</code>.</li> <li>Ejemplo:     <pre><code>let a;\nconsole.log(a); // Salida: undefined\n</code></pre></li> </ul>"},{"location":"T02/#null","title":"Null","text":"<ul> <li>Tipo: <code>object</code></li> <li>Descripci\u00f3n: <code>null</code> es un valor de asignaci\u00f3n que se puede utilizar para representar la ausencia de valor o de objeto. Se establece expl\u00edcitamente por el programador para indicar \"sin valor\".</li> <li>Ejemplo:     <pre><code>let b = null;\nconsole.log(b); // Salida: null\n</code></pre></li> </ul>"},{"location":"T02/#diferencias-clave","title":"Diferencias Clave","text":"<ul> <li> <p>Tipo:</p> <ul> <li><code>undefined</code>: El tipo de <code>undefined</code> es <code>undefined</code>.</li> <li><code>null</code>: El tipo de <code>null</code> es <code>object</code> (esto es un error hist\u00f3rico en JavaScript, pero permanece para compatibilidad con versiones anteriores).</li> </ul> </li> <li> <p>Valor por Defecto:</p> <ul> <li><code>undefined</code> es el valor por defecto para variables no inicializadas.</li> <li><code>null</code> es una asignaci\u00f3n expl\u00edcita para indicar un valor vac\u00edo o inexistente.</li> </ul> </li> <li> <p>Uso:</p> <ul> <li>Usa <code>undefined</code> para verificar si una variable ha sido declarada pero a\u00fan no se le ha asignado un valor.</li> <li>Usa <code>null</code> para significar intencionalmente que una variable deber\u00eda estar vac\u00eda.</li> </ul> </li> </ul>"},{"location":"T02/#ejemplos","title":"Ejemplos","text":"<pre><code>// Ejemplo de Undefined\nlet x;\nconsole.log(x); // Salida: undefined\n\n// Ejemplo de Null\nlet y = null;\nconsole.log(y); // Salida: null\n\n// Verificaci\u00f3n de tipos\nconsole.log(typeof x); // Salida: undefined\nconsole.log(typeof y); // Salida: object\n</code></pre>"},{"location":"T02/#puedes-resolver-el-mayor-enigma-de-js","title":"\u00bfPuedes resolver el mayor enigma de JS?","text":""},{"location":"T02/#5-sentencias-de-control","title":"5. Sentencias de Control","text":""},{"location":"T02/#51-sentencias-condicionales","title":"5.1 Sentencias Condicionales","text":""},{"location":"T02/#ifelse","title":"if...else","text":"<p>Las sentencias condicionales permiten la ejecuci\u00f3n de bloques de c\u00f3digo espec\u00edficos basados en ciertas condiciones. Las sentencias condicionales m\u00e1s comunes son <code>if</code>, <code>else if</code> y <code>else</code>.</p> <p>Ejemplos de uso:</p> <pre><code>let number = 10;\n\nif (number &gt; 0) {\n    console.log(\"El n\u00famero es positivo.\");\n} else if (number &lt; 0) {\n    console.log(\"El n\u00famero es negativo.\");\n} else {\n    console.log(\"El n\u00famero es cero.\");\n}\n</code></pre>"},{"location":"T02/#switch","title":"switch","text":"<p>Una sentencia <code>switch</code> eval\u00faa una variable o expresi\u00f3n y compara su valor con uno de varios casos posibles. Cada caso corresponde a un bloque de c\u00f3digo espec\u00edfico que se ejecuta cuando se encuentra una coincidencia. Si no se encuentra ninguna coincidencia, se puede ejecutar un caso <code>default</code> opcional.</p> <p>Ejemplos de uso:</p>"},{"location":"T02/#javascript","title":"JavaScript","text":"<pre><code>let fruit = 'apple';\n\nswitch (fruit) {\n    case 'manzana':\n        console.log(\"Esto es una manzana.\");\n        break;\n    case 'platano':\n        console.log(\"Esto es un pl\u00e1tano.\");\n        break;\n    case 'naranja':\n        console.log(\"Esto es una naranja.\");\n        break;\n    case 'zanahoria':\n        console.log(\"Cuidao que se lo come Manolo.\");\n        break;\n    default:\n        console.log(\"Fruta desconocida.\");\n}\n</code></pre>"},{"location":"T02/#operador-condicional-ternario","title":"Operador Condicional (ternario)","text":"<p>El operador condicional ternario es una forma concisa de realizar evaluaciones condicionales. Toma tres operandos: una condici\u00f3n, un resultado para verdadero y un resultado para falso. La sintaxis es:</p> <p><code>condici\u00f3n ? expresi\u00f3n_si_verdadera : expresi\u00f3n_si_falsa</code></p> <p>Ejemplos de uso:</p> <pre><code>let age = 18;\nlet canVote = (age &gt;= 18) ? \"S\u00ed, puedes votar.\" : \"No, no puedes votar.\";\nconsole.log(canVote);\n</code></pre>"},{"location":"T02/#52-bucles-o-iteraciones","title":"5.2 Bucles o Iteraciones","text":""},{"location":"T02/#for-bucle-tradicional-con-contador","title":"for (bucle tradicional con contador)","text":"<p>El bucle <code>for</code> es un bucle tradicional que itera con un contador. Se usa para repetir un bloque de c\u00f3digo un n\u00famero determinado de veces.</p> <p>Ejemplos de uso:</p> <pre><code>for (let i = 0; i &lt; 5; i++) {\n    console.log(i);\n}\n\n// Contando hacia atr\u00e1s en pasos de 5 unidades\nfor (let i = 50; i &gt;= 0; i -= 5) {\n    console.log(i);\n}\n</code></pre>"},{"location":"T02/#forin-itera-sobre-propiedades-de-un-objeto","title":"for..in (itera sobre propiedades de un objeto)","text":"<p>El bucle <code>for..in</code> itera sobre las propiedades enumerables de un objeto. Se usa para recorrer las propiedades del objeto.</p> <p>Ejemplos de uso:</p> <pre><code>let person = {name: 'John', age: 30, city: 'New York'};\nfor (let key in person) {\n    console.log(key + ': ' + person[key]);\n}\n</code></pre>"},{"location":"T02/#forof-es6-itera-sobre-una-coleccion-de-objetos","title":"for..of (ES6) (itera sobre una colecci\u00f3n de objetos)","text":"<p>El bucle <code>for..of</code>, introducido en ES6, itera sobre objetos iterables como arrays, cadenas y otras colecciones.</p> <p>Ejemplos de uso:</p> <pre><code>let fruits = ['apple', 'banana', 'orange'];\nfor (let fruit of fruits) {\n    console.log(fruit);\n}\n</code></pre>"},{"location":"T02/#foreach-metodo-para-iterar-sobre-una-coleccion-de-objetos","title":"forEach (m\u00e9todo para iterar sobre una colecci\u00f3n de objetos)","text":"<p>Sin embargo, en JavaScript, la forma m\u00e1s com\u00fan de iterar sobre arrays de objetos es utilizando el m\u00e9todo <code>forEach</code>. Este m\u00e9todo ejecuta una funci\u00f3n proporcionada una vez para cada elemento del array, lo que lo hace m\u00e1s conveniente y legible para estas tareas.</p> <pre><code>const users = [  //sabemos lo que es name y age\n    { name: 'John', age: 15 },\n    { name: 'Jane', age: 25 },\n    { name: 'Jim', age: 35 },\n    { name: 'Manolo', age: 2 },\n];\n\nusers.forEach(user =&gt; {\n    console.log(`${user.name} tiene ${user.age} a\u00f1os.`);  //fijaos que estamos usando literales\n    if (user.age &gt;= 18) {  //le estamos pasando una funci\u00f3n, y dentro podemos poner el codigo que nos d\u00e9 la gana\n        console.log(`El usuario ${user.name} es mayor de edad, y puede salir al recreo`); \n    } else {\n        console.log(`El usuario ${user.name} es menor de edad, y necesita que le firmen su padres`); \n\n    }\n});\n</code></pre>"},{"location":"T02/#while-bucle-while-tradicional","title":"while (bucle while tradicional)","text":"<p>El bucle <code>while</code> repite un bloque de c\u00f3digo mientras una condici\u00f3n especificada sea verdadera.</p> <pre><code>let i = 0;\nwhile (i &gt; 0.5) {  //cuidado con la expresi\u00f3n que ponemos aqui, no vayamos a crear un bucle infinito\n    console.log(i);\n    i = Math.rand();\n}\nconsole.log(`Se encontr\u00f3 un n\u00famero aleatorio mayor que 0.5: ${i}`);\n</code></pre>"},{"location":"T02/#6-objetos-nativos-de-javascript","title":"6. Objetos Nativos de JavaScript","text":"<p>JavaScript proporciona varios objetos integrados que permiten a los desarrolladores trabajar con diferentes tipos de datos, realizar tareas comunes, manipular el DOM y manejar errores. Estos objetos son parte del lenguaje JavaScript y est\u00e1n disponibles globalmente.</p> <p></p> <p>Los objetos nativos de JavaScript se pueden categorizar en dos tipos seg\u00fan su contexto de uso y origen:</p>"},{"location":"T02/#objetos-independientes-del-navegador-tambien-disponibles-en-nodejs","title":"Objetos Independientes del Navegador (Tambi\u00e9n disponibles en Node.js)","text":"<p>Estos objetos son parte de la especificaci\u00f3n del lenguaje JavaScript y se pueden usar tanto en el navegador como en entornos del lado del servidor (como Node.js). Generalmente comienzan con una letra may\u00fascula (y son los marcados en rojo en la figura anterior):</p> <ul> <li>Math: Proporciona constantes y funciones matem\u00e1ticas.</li> <li>Number: Representa valores num\u00e9ricos y proporciona m\u00e9todos para operaciones num\u00e9ricas.</li> <li>Date: Representa fechas y horas.</li> <li>Array: Representa una colecci\u00f3n tipo lista de elementos.</li> </ul> <p>Estos objetos est\u00e1n implementados como parte del propio lenguaje JavaScript y no dependen de la presencia de un entorno de navegador.</p>"},{"location":"T02/#objetos-dependientes-del-navegador-entorno-del-lado-del-cliente","title":"Objetos Dependientes del Navegador (Entorno del Lado del Cliente)","text":"<p>Estos objetos son espec\u00edficos del entorno del navegador y no est\u00e1n disponibles en JavaScript del lado del servidor (Node.js). Generalmente comienzan con una letra min\u00fascula:</p> <ul> <li>window: Representa la ventana global del navegador y act\u00faa como el objeto global en JavaScript del lado del cliente.</li> <li>document: Representa el documento HTML cargado en la ventana del navegador.</li> <li>navigator: Proporciona informaci\u00f3n sobre el navegador y el sistema operativo del cliente.</li> <li>localStorage / sessionStorage: Proporciona mecanismos de almacenamiento dentro del navegador para persistir datos.</li> </ul> <p>Estos objetos interact\u00faan directamente con el Modelo de Objetos del Documento (DOM) del navegador y son esenciales para la programaci\u00f3n del lado del cliente y el desarrollo de aplicaciones web.</p>"},{"location":"T02/#contextos-de-uso","title":"Contextos de Uso","text":"<ul> <li>Node.js: Los objetos independientes del navegador (por ejemplo, Math, Number, Date) se pueden usar en aplicaciones Node.js sin dependencia de un entorno de navegador.</li> <li>Navegador: Los objetos dependientes del navegador (por ejemplo, window, document, navigator) son espec\u00edficos del entorno del lado del cliente y requieren un navegador web para su ejecuci\u00f3n.</li> </ul> <p>Vamos a explicar los m\u00e1s \u00fatiles para nosotros en el alcance de este curso.</p>"},{"location":"T02/#61-objeto-date","title":"6.1 Objeto Date","text":"<ul> <li>El objeto Date en JavaScript se utiliza para trabajar con fechas y horas.</li> <li>Permite crear y manipular fechas, obtener y establecer varios componentes de la fecha (como a\u00f1o, mes, d\u00eda, hora, minuto, segundo) y realizar operaciones como formato y aritm\u00e9tica.</li> <li>Internamente, se almacena el n\u00famero de milisegundos desde las 00:00:00 UTC del 1 de enero de 1970.</li> </ul> <p>Constructor:</p> <pre><code>let currentDate = new Date();               // Fecha y hora actuales\nlet specificDate = new Date(1626176282855); // Ejemplo con n\u00famero de milisegundos\nlet customDate = new Date(2023, 5, 12, 14, 30, 0, 0); // 12 de junio de 2023, 14:30:00\n</code></pre>"},{"location":"T02/#getfullyear-getmonth-getdate-getday-gethours-getminutes-getseconds-getmilliseconds-recupera-varios-componentes-de-la-fecha","title":"getFullYear(), getMonth(), getDate(), getDay(), getHours(), getMinutes(), getSeconds(), getMilliseconds(): Recupera varios componentes de la fecha.","text":"<pre><code>let now = new Date();\nlet year = now.getFullYear();\nlet month = now.getMonth(); // \u00cdndice 0 (Enero es 0)\nlet day = now.getDate();\nlet hours = now.getHours();\nlet minutes = now.getMinutes();\nlet seconds = now.getSeconds();\n</code></pre>"},{"location":"T02/#setfullyear-setmonth-setdate-sethours-setminutes-setseconds-setmilliseconds-establece-varios-componentes-de-la-fecha","title":"setFullYear(), setMonth(), setDate(), setHours(), setMinutes(), setSeconds(), setMilliseconds(): Establece varios componentes de la fecha.","text":"<pre><code>day = new Date(2000, 0, 1); // 1 de enero de 2000\nbirthday.setFullYear(2001); // Cambiar el a\u00f1o a 2001\n</code></pre>"},{"location":"T02/#todatestring-toisostring-tolocaledatestring-tolocaletimestring-convierte-objetos-de-fecha-en-diferentes-representaciones-de-cadena","title":"toDateString(), toISOString(), toLocaleDateString(), toLocaleTimeString(): Convierte objetos de fecha en diferentes representaciones de cadena.","text":"<pre><code>let today = new Date();\nlet dateString = today.toDateString(); // \"Tue Jul 13 2024\"\nlet isoString = today.toISOString(); // \"2024-07-13T12:30:00.000Z\"\nlet localeDateString = today.toLocaleDateString(); // Depende del local\n</code></pre>"},{"location":"T02/#trabajando-con-fechas","title":"Trabajando con fechas","text":"<p>Aqu\u00ed tienes un ejemplo que muestra c\u00f3mo crear un objeto <code>Date</code>, acceder a sus componentes y formatear su salida:</p> <pre><code>let now = new Date();\n\nlet year = now.getFullYear();\nlet month = now.getMonth(); // \u00cdndice 0 (Julio es 6)\nlet day = now.getDate();\nlet hours = now.getHours();\nlet minutes = now.getMinutes();\nlet seconds = now.getSeconds();\n\nconsole.log(`Fecha y hora actuales: ${day}/${month + 1}/${year} ${hours}:${minutes}:${seconds}`);\n</code></pre> <p>Aqu\u00ed est\u00e1 el ejemplo en JavaScript comparando dos fechas:</p> <pre><code>// Crear dos fechas\nlet date1 = new Date('2023-07-13');\nlet date2 = new Date('2023-07-14');\n\n// Comparar las fechas\nif (date1 &lt; date2) {\n    console.log(`${date1.toDateString()} es antes que ${date2.toDateString()}`);\n} else if (date1 &gt; date2) {\n    console.log(`${date1.toDateString()} es despu\u00e9s de ${date2.toDateString()}`);\n} else {\n    console.log(`${date1.toDateString()} y ${date2.toDateString()} son iguales`);\n}\n</code></pre>"},{"location":"T02/#62-objeto-math","title":"6.2 Objeto Math","text":"<p>El objeto Math en JavaScript proporciona constantes y funciones matem\u00e1ticas, permiti\u00e9ndote realizar tareas matem\u00e1ticas sin crear expl\u00edcitamente una instancia del objeto Math. Incluye m\u00e9todos para redondeo, trigonometr\u00eda, logaritmos, exponenciaci\u00f3n, algunas constantes como el n\u00famero PI, y m\u00e1s.</p> <ul> <li><code>Math.abs()</code>: Valor absoluto</li> <li><code>Math.ceil()</code>: Redondeo hacia arriba</li> <li><code>Math.floor()</code>: Redondeo hacia abajo</li> <li><code>Math.round()</code>: Redondeo al entero m\u00e1s cercano</li> <li><code>Math.max()</code>: Valor m\u00e1ximo</li> <li><code>Math.min()</code>: Valor m\u00ednimo</li> <li><code>Math.random()</code>: N\u00famero aleatorio entre 0 y 1</li> <li><code>Math.sqrt()</code>: Ra\u00edz cuadrada</li> <li><code>Math.PI</code>: N\u00famero PI</li> </ul> <pre><code>let absoluteValue = Math.abs(-5);  // 5\nlet roundedUp = Math.ceil(4.2);  // 5\nlet roundedDown = Math.floor(4.8);  // 4\nlet rounded = Math.round(4.5);  // 5\nlet roundedDownExample = Math.round(4.4);  // 4\nlet max = Math.max(1, 2, 3);  // 3\nlet min = Math.min(1, 2, 3);  // 1\nlet random = Math.random();  // ej., 0.543\nlet squareRoot = Math.sqrt(16);  // 4\n\n// Adem\u00e1s, el objeto Math contiene algunas constantes \u00fatiles como PI o el n\u00famero E\nlet piNumber = Math.PI;  // 3.1415......\n</code></pre>"},{"location":"T02/#64-objeto-string","title":"6.4 Objeto String","text":"<p>El objeto <code>String</code> es un envoltorio alrededor del tipo de dato primitivo string de JavaScript. Proporciona varios m\u00e9todos y propiedades para trabajar con cadenas de texto de manera efectiva.</p>"},{"location":"T02/#creacion-de-objetos-string","title":"Creaci\u00f3n de Objetos String","text":"<p>En JavaScript, puedes crear una cadena primitiva directamente o usar el constructor del objeto <code>String</code> para crear un objeto <code>String</code>:</p> <pre><code>// Cadena primitiva\nlet mensaje = '\u00a1Hola, Mundo!';\n\n// Usando el constructor del objeto String\nlet otroMensaje = new String('\u00a1Hola, Mundo!');\n</code></pre>"},{"location":"T02/#metodos-y-propiedades-utiles","title":"M\u00e9todos y propiedades \u00fatiles","text":"<ul> <li><code>length</code>: Devuelve la longitud de la cadena.</li> <li><code>charAt(index)</code>: Devuelve el car\u00e1cter en el \u00edndice especificado.</li> <li><code>concat(str1, str2, ...)</code>: Concatena una o m\u00e1s cadenas al final de la cadena que llama al m\u00e9todo y devuelve una nueva cadena.</li> <li><code>toUpperCase()</code>: Convierte todos los caracteres a may\u00fasculas.</li> <li><code>toLowerCase()</code>: Convierte todos los caracteres a min\u00fasculas.</li> <li><code>indexOf(searchValue, startIndex)</code>: Devuelve el \u00edndice de la primera aparici\u00f3n de <code>searchValue</code> en la cadena, comenzando la b\u00fasqueda en <code>startIndex</code>.</li> <li><code>substring(startIndex, endIndex)</code>: Devuelve una nueva subcadena desde <code>startIndex</code> hasta <code>endIndex</code> (excluyendo <code>endIndex</code>).</li> <li><code>slice(startIndex, endIndex)</code>: Extrae una secci\u00f3n de la cadena y la devuelve como una nueva cadena.</li> <li><code>split(separator)</code>: Divide la cadena en un array de subcadenas basadas en un <code>separator</code> especificado.</li> </ul> <p>Ejemplos de uso:</p> <p>Estos m\u00e9todos ya han sido utilizados en el Tipo de Dato String Primitivo.</p>"},{"location":"T02/#65-objetos-de-interaccion-con-el-navegador","title":"6.5 Objetos de Interacci\u00f3n con el Navegador","text":"<p>Adem\u00e1s de los objetos presentados anteriormente, hay otros tipos de objetos que permiten la manipulaci\u00f3n de caracter\u00edsticas espec\u00edficas del navegador:</p> <ul> <li>navigator: Proporciona informaci\u00f3n sobre el navegador y el sistema operativo del cliente.</li> <li>screen: Representa las propiedades de la pantalla del usuario.</li> <li>window: Representa la ventana global del navegador y act\u00faa como el objeto global en JavaScript del lado del cliente.</li> <li>document: Representa el documento HTML cargado en la ventana del navegador.</li> <li>history: Proporciona el historial de sesiones del navegador (p\u00e1ginas visitadas en la pesta\u00f1a/ventana actual).</li> </ul>"},{"location":"T02/#navigator","title":"navigator","text":"<p>Para identificar las caracter\u00edsticas de la plataforma en la que se ejecuta una aplicaci\u00f3n web, puedes usar propiedades y m\u00e9todos proporcionados por el objeto <code>navigator</code> en JavaScript:</p> <ol> <li> <p>Tipo de Navegador y Versi\u00f3n:</p> <ul> <li>Usa <code>navigator.userAgent</code> para obtener la cadena del User-Agent, que incluye informaci\u00f3n sobre el tipo de navegador y la versi\u00f3n.</li> </ul> </li> <li> <p>Sistema Operativo:</p> <ul> <li>Usa <code>navigator.platform</code> para recuperar la plataforma en la que se est\u00e1 ejecutando el navegador (por ejemplo, \"Win32\", \"Linux x86_64\", \"MacIntel\").</li> </ul> </li> <li> <p>Geolocalizaci\u00f3n:</p> <ul> <li>Utiliza la API de Geolocalizaci\u00f3n para solicitar y obtener la ubicaci\u00f3n geogr\u00e1fica actual del dispositivo, siempre que el usuario conceda permiso.</li> </ul> </li> </ol> <p>Ejemplo de c\u00f3digo JavaScript: <pre><code>// User Agent\nlet infoNavegador = navigator.userAgent;\nconsole.log(`User-Agent: ${infoNavegador}`);\n\n// Informaci\u00f3n de la Plataforma\nlet infoPlataforma = navigator.platform;\nconsole.log(`Plataforma: ${infoPlataforma}`);\n\n// Geolocalizaci\u00f3n\nif ('geolocation' in navigator) {\n    navigator.geolocation.getCurrentPosition(position =&gt; {\n      console.log('Latitud:', position.coords.latitude);\n      console.log('Longitud:', position.coords.longitude);\n    }, error =&gt; {\n        console.error('Error al obtener la geolocalizaci\u00f3n:', error);\n    });\n} else {\n    console.error('La geolocalizaci\u00f3n no es soportada por este navegador.');\n}\n</code></pre></p>"},{"location":"T02/#screen","title":"screen","text":"<p>El objeto <code>screen</code> en JavaScript representa la pantalla del usuario y proporciona propiedades de solo lectura para recuperar informaci\u00f3n sobre sus caracter\u00edsticas.</p>"},{"location":"T02/#propiedades-del-objeto-screen","title":"Propiedades del Objeto <code>screen</code>","text":"<ul> <li><code>screen.width</code>: Devuelve el ancho de la pantalla del usuario en p\u00edxeles.</li> <li><code>screen.height</code>: Devuelve la altura de la pantalla del usuario en p\u00edxeles.</li> <li><code>screen.availWidth</code>: Devuelve el ancho disponible de la pantalla del usuario (excluyendo las barras de tareas del sistema operativo, etc.) en p\u00edxeles.</li> <li><code>screen.availHeight</code>: Devuelve la altura disponible de la pantalla del usuario (excluyendo las barras de tareas del sistema operativo, etc.) en p\u00edxeles.</li> <li><code>screen.colorDepth</code>: Devuelve la profundidad de color de la paleta para mostrar im\u00e1genes en la pantalla del usuario.</li> <li><code>screen.pixelDepth</code>: Devuelve la profundidad de bits del b\u00fafer de p\u00edxeles de la pantalla del usuario.</li> </ul> <p>Estas propiedades permiten que las aplicaciones web adapten su contenido o comportamiento en funci\u00f3n de las dimensiones y capacidades de la pantalla del usuario, mejorando la experiencia del usuario.</p> <p>Aqu\u00ed hay un ejemplo simple que demuestra c\u00f3mo acceder y usar algunas de estas propiedades en JavaScript:</p> <pre><code>console.log(`Ancho de la pantalla: ${screen.width}px`);\nconsole.log(`Altura de la pantalla: ${screen.height}px`);\nconsole.log(`Ancho disponible de la pantalla: ${screen.availWidth}px`);\nconsole.log(`Altura disponible de la pantalla: ${screen.availHeight}px`);\nconsole.log(`Profundidad de color: ${screen.colorDepth} bits`);\nconsole.log(`Profundidad de p\u00edxeles: ${screen.pixelDepth} bits`);\n</code></pre>"},{"location":"T02/#window","title":"window","text":"<p>El objeto <code>window</code> se considera uno de los objetos m\u00e1s importantes en JavaScript por varias razones:</p> <ul> <li> <p>Gesti\u00f3n de Ventanas: Permite gestionar ventanas del navegador y proporciona m\u00e9todos para manipular e interactuar con ellas.</p> </li> <li> <p>Objeto Impl\u00edcito: El objeto <code>window</code> es impl\u00edcito, lo que significa que no necesitas referenciarlo expl\u00edcitamente para acceder a objetos y propiedades anidados dentro de su jerarqu\u00eda. Por ejemplo, <code>window.document</code> se refiere directamente al objeto <code>document</code> sin necesidad de mencionar expl\u00edcitamente <code>window</code>.</p> </li> </ul>"},{"location":"T02/#document","title":"document","text":"<p>El objeto <code>document</code> en JavaScript representa la p\u00e1gina web actual cargada en la ventana del navegador. Proporciona acceso al DOM (Modelo de Objetos del Documento) de la p\u00e1gina, permitiendo a los desarrolladores manipular su contenido, estructura y estilos de manera din\u00e1mica.</p>"},{"location":"T02/#caracteristicas-clave-del-objeto-document","title":"Caracter\u00edsticas Clave del Objeto <code>document</code>:","text":"<ul> <li> <p>Manipulaci\u00f3n del DOM: Los desarrolladores pueden acceder y modificar elementos dentro de la p\u00e1gina web usando m\u00e9todos como <code>getElementById</code>, <code>querySelector</code> y propiedades como <code>textContent</code>, <code>innerHTML</code>.</p> </li> <li> <p>Manejo de Eventos: Permite adjuntar escuchadores de eventos a elementos y responder a interacciones del usuario u otros eventos en la p\u00e1gina.</p> </li> <li> <p>Actualizaciones Din\u00e1micas: Permite a los scripts actualizar din\u00e1micamente el contenido de la p\u00e1gina en funci\u00f3n de la entrada del usuario, respuestas del servidor u otras condiciones.</p> </li> </ul>"},{"location":"T02/#ejemplo-de-manipulacion-del-dom","title":"Ejemplo de Manipulaci\u00f3n del DOM:","text":"<pre><code>// Accediendo a un elemento por su ID y cambiando su contenido\nconst elementoEncabezado = document.getElementById('header');\nelementoEncabezado.textContent = '\u00a1Bienvenidos a nuestro sitio web!';\n</code></pre>"},{"location":"T02/#history","title":"history","text":"<p>En JavaScript, el objeto <code>history</code> proporciona m\u00e9todos y propiedades para navegar por el historial de navegaci\u00f3n del usuario. Permite almacenar referencias a las p\u00e1ginas web visitadas y facilita la navegaci\u00f3n entre ellas usando una estructura tipo lista.</p>"},{"location":"T02/#caracteristicas-clave-del-objeto-history","title":"Caracter\u00edsticas Clave del Objeto <code>history</code>:","text":"<ul> <li> <p><code>history.length</code>: Devuelve el n\u00famero de entradas en la pila del historial de navegaci\u00f3n.</p> </li> <li> <p><code>history.back()</code>: Regresa una p\u00e1gina en el historial de sesi\u00f3n. Equivalente a hacer clic en el bot\u00f3n de retroceso del navegador.</p> </li> <li> <p><code>history.forward()</code>: Avanza una p\u00e1gina en el historial de sesi\u00f3n. Equivalente a hacer clic en el bot\u00f3n de avance del navegador.</p> </li> <li> <p><code>history.go(n)</code>: Carga una p\u00e1gina espec\u00edfica del historial de sesi\u00f3n, donde <code>n</code> puede ser un n\u00famero entero positivo o negativo. Los valores negativos mueven hacia atr\u00e1s, y los valores positivos avanzan.</p> </li> </ul>"},{"location":"T02/#ejemplo-de-uso","title":"Ejemplo de Uso:","text":"<pre><code>// Navegando hacia atr\u00e1s y hacia adelante en el historial\nfunction irAtras() {\n    window.history.back();\n}\n\nfunction irAdelante() {\n    window.history.forward();\n}\n\n// Accediendo a la longitud de la pila del historial\nlet longitudHistorial = window.history.length;\nconsole.log(`N\u00famero de p\u00e1ginas en el historial: ${longitudHistorial}`);\n</code></pre>"},{"location":"T02/#7-funciones","title":"7. Funciones","text":"<p>Una funci\u00f3n en programaci\u00f3n es un bloque reutilizable de c\u00f3digo que realiza una tarea espec\u00edfica. Puede recibir entradas, procesarlas y devolver una salida. Las funciones son bloques fundamentales en la programaci\u00f3n, permitiendo un c\u00f3digo modular, legible y mantenible.</p>"},{"location":"T02/#caracteristicas-clave-de-las-funciones","title":"Caracter\u00edsticas Clave de las Funciones:","text":"<ol> <li>Modularidad: Las funciones permiten dividir el c\u00f3digo en piezas m\u00e1s peque\u00f1as y</li> </ol> <p>manejables, cada una realizando una tarea espec\u00edfica. 2. Reusabilidad: Una vez definida, una funci\u00f3n puede ser llamada m\u00faltiples veces dentro de un programa, reduciendo la redundancia. 3. Abstracci\u00f3n: Las funciones permiten encapsular operaciones complejas, ocultando los detalles y exponiendo solo las interfaces necesarias. 4. Mantenibilidad: Las funciones facilitan la actualizaci\u00f3n y gesti\u00f3n del c\u00f3digo. Los cambios realizados dentro de una funci\u00f3n no afectan otras partes del c\u00f3digo que dependen de ella.</p>"},{"location":"T02/#estructura-basica-de-una-funcion","title":"Estructura B\u00e1sica de una Funci\u00f3n:","text":"<ol> <li>Declaraci\u00f3n de Funci\u00f3n: Define la funci\u00f3n y especifica su nombre, par\u00e1metros y cuerpo.</li> <li>Llamada a Funci\u00f3n: Ejecuta la funci\u00f3n haciendo referencia a su nombre y pasando los argumentos necesarios. Opcionalmente, podemos guardar el valor que devuelve la funci\u00f3n.</li> </ol>"},{"location":"T02/#ejemplo-en-javascript","title":"Ejemplo en JavaScript:","text":"<p>Nota que en JavaScript no declaramos el tipo de los par\u00e1metros ni el valor de retorno.</p> <pre><code>// Declaraci\u00f3n de Funci\u00f3n\nfunction saludar(nombre) {\n    return `\u00a1Hola, ${nombre}!`;\n}\n\n// Llamada a la Funci\u00f3n\nlet mensaje = saludar('Alice');\nconsole.log(mensaje); // Salida: \u00a1Hola, Alice!\n</code></pre>"},{"location":"T02/#71-funciones-globales-en-javascript","title":"7.1 Funciones Globales en JavaScript","text":"<p>Las funciones globales en JavaScript son funciones integradas que son parte del objeto global y pueden ser llamadas desde cualquier parte de tu c\u00f3digo. Est\u00e1n disponibles tanto en el entorno del navegador como en Node.js. Aqu\u00ed hay algunas de las funciones globales m\u00e1s com\u00fanmente utilizadas:</p> <ol> <li> <p><code>parseInt(string, radix)</code></p> <ul> <li>Analiza una cadena y devuelve un entero en la base especificada.</li> <li>Ejemplo:  <pre><code>let num = parseInt(\"10\", 10); // 10\n</code></pre></li> </ul> </li> <li> <p><code>parseFloat(string)</code></p> <ul> <li>Analiza una cadena y devuelve un n\u00famero de punto flotante.</li> <li>Ejemplo:  <pre><code>let num = parseFloat(\"10.5\"); // 10.5\n</code></pre></li> </ul> </li> <li> <p><code>isNaN(value)</code></p> <ul> <li>Determina si un valor es NaN (No es un N\u00famero).</li> <li>Ejemplo:  <pre><code>let resultado = isNaN(\"hola\"); // true\n</code></pre></li> </ul> </li> <li> <p><code>isFinite(value)</code></p> <ul> <li>Determina si un valor es un n\u00famero finito.</li> <li>Ejemplo:  <pre><code>let resultado = isFinite(10); // true\nlet resultado2 = isFinite(Infinity); // false\n</code></pre></li> </ul> </li> <li> <p><code>eval(string)</code></p> <ul> <li>Eval\u00faa c\u00f3digo JavaScript representado como una cadena.</li> <li>Ejemplo:  <pre><code>let resultado = eval(\"2 + 2\"); // 4\n</code></pre></li> </ul> </li> <li> <p><code>encodeURI(uri)</code></p> <ul> <li>Codifica un Identificador de Recurso Uniforme (URI) escapando ciertos caracteres.</li> <li>Ejemplo:  <pre><code>let uri = \"https://www.example.com?name=John Doe\";\nlet uriCodificado = encodeURI(uri); // \"https://www.example.com?name=John%20Doe\"\n</code></pre></li> </ul> </li> <li> <p><code>encodeURIComponent(uriComponent)</code></p> <ul> <li>Codifica un componente URI escapando ciertos caracteres.</li> <li>Ejemplo:  <pre><code>let componenteURI = \"John Doe &amp; Co\";\nlet componenteURICodificado = encodeURIComponent(componenteURI); // \"John%20Doe%20%26%20Co\"\n</code></pre></li> </ul> </li> <li> <p><code>decodeURI(encodedURI)</code></p> <ul> <li>Decodifica un Identificador de Recurso Uniforme (URI) creado con <code>encodeURI</code>.</li> <li>Ejemplo:  <pre><code>let uriCodificado = \"https://www.example.com?name=John%20Doe\";\nlet uriDecodificado = decodeURI(uriCodificado); // \"https://www.example.com?name=John Doe\"\n</code></pre></li> </ul> </li> <li> <p><code>decodeURIComponent(encodedURIComponent)</code></p> <ul> <li>Decodifica un componente URI creado con <code>encodeURIComponent</code>.</li> <li>Ejemplo:  <pre><code>let componenteURICodificado = \"John%20Doe%20%26%20Co\";\nlet componenteURIDecodificado = decodeURIComponent(componenteURICodificado); // \"John Doe &amp; Co\"\n</code></pre></li> </ul> </li> <li> <p><code>setTimeout(function, delay)</code></p> <ul> <li>Llama a una funci\u00f3n o eval\u00faa una expresi\u00f3n despu\u00e9s de un n\u00famero espec\u00edfico de milisegundos.</li> <li>Ejemplo:   <pre><code>setTimeout(function() {\n    console.log(\"Hola despu\u00e9s de 2 segundos\");\n}, 2000);\n</code></pre></li> </ul> </li> <li> <p><code>setInterval(function, delay)</code></p> <ul> <li>Llama repetidamente a una funci\u00f3n o eval\u00faa una expresi\u00f3n a intervalos especificados (en milisegundos).</li> <li>Ejemplo:   <pre><code>setInterval(function() {\n    console.log(\"Hola cada 2 segundos\");\n}, 2000);\n</code></pre></li> </ul> </li> <li> <p><code>clearTimeout(timeoutID)</code></p> <ul> <li>Limpia un temporizador establecido con <code>setTimeout</code>.</li> <li>Ejemplo:   <pre><code>let timeoutID = setTimeout(function() {\n    console.log(\"Esto no se ejecutar\u00e1\");\n}, 2000);\nclearTimeout(timeoutID);\n</code></pre></li> </ul> </li> <li> <p><code>clearInterval(intervalID)</code></p> <ul> <li>Limpia un temporizador establecido con <code>setInterval</code>.</li> <li>Ejemplo:   <pre><code>let intervalID = setInterval(function() {\n    console.log(\"Esto no se ejecutar\u00e1 repetidamente\");\n}, 2000);\nclearInterval(intervalID);\n</code></pre></li> </ul> <p>### 7.2 Declaraci\u00f3n de Funciones del Usuario</p> </li> </ol> <p>En JavaScript, puedes crear funciones personalizadas para encapsular y reutilizar c\u00f3digo. Existen varias formas de declarar funciones:</p>"},{"location":"T02/#declaracion-clasica-de-funcion","title":"Declaraci\u00f3n Cl\u00e1sica de Funci\u00f3n","text":"<p>La forma cl\u00e1sica de definir una funci\u00f3n en JavaScript es utilizando la palabra clave <code>function</code>. Esta forma permite crear funciones nombradas o an\u00f3nimas.</p> <pre><code>// Funci\u00f3n nombrada\nfunction add(a, b) {\n    return a + b;\n}\n\n// Llamada a la funci\u00f3n\nlet result = add(2, 3);\nconsole.log(result); // Salida: 5\n</code></pre>"},{"location":"T02/#funcion-por-expresion-y-funcion-lambda","title":"Funci\u00f3n por Expresi\u00f3n y Funci\u00f3n Lambda","text":"<p>Puedes asignar una funci\u00f3n a una variable mediante una expresi\u00f3n. Esto incluye las funciones an\u00f3nimas y las funciones lambda.</p> <pre><code>// 1. Funci\u00f3n por expresi\u00f3n\nconst multiply = function multiplication(a, b) {\n    return a * b;\n};\n\n// Llamada a la funci\u00f3n\nlet result = multiply(5, 3);\nconsole.log(result); // Salida: 15\n\n// 2. Funci\u00f3n Lambda o an\u00f3nima por expresi\u00f3n\nconst divide = function (a, b) {\n    return a / b;\n};\n\n// Llamada a la funci\u00f3n\nlet resultDiv = divide(15, 3);\nconsole.log(resultDiv); // Salida: 5\n</code></pre>"},{"location":"T02/#funciones-arrow-lambda","title":"Funciones Arrow (Lambda)Instrucciones:Ejemplo de Uso:Pistas:","text":"<p>Las funciones arrow proporcionan una sintaxis m\u00e1s concisa para escribir funciones en JavaScript. Son an\u00f3nimas y a menudo se utilizan en lugar de las expresiones de funci\u00f3n.</p> <pre><code>// Funci\u00f3n tradicional\nconst f1 = function (a) {\n  return a + 100;\n}\n\n// Desglose de la Funci\u00f3n Arrow\n\n// 1. Elimina la palabra clave \"function\" y coloca la flecha entre el argumento y la llave de apertura.\nconst f2 = (a) =&gt; {\n  return a + 100;\n}\n\n// 2. Elimina las llaves del cuerpo y la palabra clave \"return\" \u2014 el retorno es impl\u00edcito.\nconst f3 = (a) =&gt; a + 100;\n\n// 3. Omite los par\u00e9ntesis alrededor del argumento si hay un solo argumento\nconst f4 = a =&gt; a + 100;\n</code></pre>  Ejercicio Pr\u00e1ctico: Calcular D\u00edas Entre Dos Fechas <p>Escribe una funci\u00f3n en JavaScript que calcule el n\u00famero de d\u00edas entre dos fechas dadas.</p> <ol> <li>Crea una funci\u00f3n <code>calculateDaysBetweenDates(date1, date2)</code> que tome dos cadenas de fecha como entrada.</li> <li>Convierte las cadenas de fecha en objetos <code>Date</code>.</li> <li>Calcula la diferencia en milisegundos entre las dos fechas.</li> <li>Convierte la diferencia en milisegundos a d\u00edas.</li> <li>Devuelve el n\u00famero de d\u00edas entre las dos fechas.</li> </ol> <pre><code>let date1 = \"2024-07-01\";\nlet date2 = \"2024-07-13\";\nlet daysBetween = calculateDaysBetweenDates(date1, date2);\nconsole.log(`Hay ${daysBetween} d\u00edas entre ${date1} y ${date2}.`); // Salida: Hay 12 d\u00edas entre 2024-07-01 y 2024-07-13.</code></pre> <ul> <li>Utiliza <code>new Date(dateString)</code> para crear objetos <code>Date</code> a partir de las cadenas de fecha.</li> <li>Resta la fecha anterior de la fecha posterior para obtener la diferencia en milisegundos.</li> <li>Hay <code>1000 * 60 * 60 * 24</code> milisegundos en un d\u00eda.</li> </ul>"},{"location":"T02/#73-funciones-callback","title":"7.3 Funciones Callback","text":"<p>A un alto nivel, un callback es cuando una funci\u00f3n B se pasa como par\u00e1metro a otra funci\u00f3n A. Esto permite que la funci\u00f3n A invoque (o \"llame de vuelta\") a la funci\u00f3n B en un momento posterior, generalmente en respuesta a alg\u00fan evento o condici\u00f3n.</p>"},{"location":"T02/#puntos-clave","title":"Puntos Clave:","text":"<ul> <li>Flexibilidad: Los callbacks proporcionan una forma de especificar el comportamiento personalizado que debe ejecutarse cuando se completa una acci\u00f3n o ocurre un evento.</li> <li>Operaciones As\u00edncronas: Se utilizan com\u00fanmente en la programaci\u00f3n as\u00edncrona para manejar operaciones que tardan en completarse, como la obtenci\u00f3n de datos desde un servidor.</li> <li>Definici\u00f3n Externa: Las funciones callback se definen fuera de la funci\u00f3n que las utiliza, permitiendo un c\u00f3digo modular y reutilizable.</li> </ul>"},{"location":"T02/#ejemplo-conceptual","title":"Ejemplo Conceptual:","text":"<pre><code>// Funci\u00f3n A toma la funci\u00f3n B como par\u00e1metro de callback\nfunction A(callback) {\n    // L\u00f3gica de la funci\u00f3n A\n    console.log(\"Dentro de la funci\u00f3n A\");\n\n    // Invoca la funci\u00f3n callback B\n    callback();\n}\n\n// Funci\u00f3n B (funci\u00f3n callback)\nfunction B() {\n    console.log(\"Funci\u00f3n callback B ejecutada\");\n}\n\n// Llama a la funci\u00f3n A y pasa la funci\u00f3n B como callback\nA(B);\n</code></pre>"},{"location":"T02/#funciones-callback-ad-hoc","title":"Funciones Callback Ad-hoc","text":"<p>En JavaScript, las funciones callback ad-hoc son funciones que se definen en l\u00ednea en el momento en que se pasan como argumentos a otra funci\u00f3n. El m\u00e9todo <code>forEach</code> es un buen ejemplo de c\u00f3mo se utilizan frecuentemente callbacks ad-hoc para iterar sobre arrays.</p>"},{"location":"T02/#ejemplo-usando-foreach","title":"Ejemplo Usando <code>forEach</code>:","text":"<pre><code>// Array de n\u00fameros\nconst numbers = [1, 2, 3, 4, 5];\n\n// Usando forEach con una funci\u00f3n callback ad-hoc\nnumbers.forEach(function(item) {\n    console.log(item); // Muestra cada n\u00famero\n});\n\n// Usando forEach con una funci\u00f3n callback ad-hoc de tipo arrow\nnumbers.forEach(item =&gt; {\n    console.log(item * 2); // Muestra cada n\u00famero multiplicado por 2\n});\n</code></pre>"},{"location":"T03/","title":"UNIDAD 3 - Arrays, Objectos... y Clases","text":""},{"location":"T03/#1-arrays","title":"1. Arrays","text":"<p>Un Array es un conjunto ordenado de valores relacionados. Cada uno de estos valores se llama un elemento, y cada elemento tiene un \u00edndice que indica su posici\u00f3n num\u00e9rica en el Array. Debes declarar un Array antes de poder usarlo.</p>"},{"location":"T03/#puntos-clave","title":"Puntos Clave:","text":"<ul> <li>Elementos: Los valores individuales en un array.</li> <li>\u00cdndices: Posiciones num\u00e9ricas de los elementos, comenzando desde 0.</li> <li>Declaraci\u00f3n: Los arrays deben ser declarados antes de su uso.</li> </ul>"},{"location":"T03/#11-declaracion-de-un-array","title":"1.1 Declaraci\u00f3n de un Array","text":"<p>En JavaScript, hay dos formas principales de crear arrays:</p> <ol> <li>Usando el constructor <code>Array</code>.</li> <li>Usando la notaci\u00f3n literal de arrays para definir el array y sus elementos.</li> </ol>"},{"location":"T03/#1-usando-el-constructor-array","title":"1. Usando el Constructor <code>Array</code>","text":"<pre><code>const a1 = new Array(); // Nuevo array vac\u00edo\nconsole.log(a1.length); // Salida: 0\n\nconst a2 = new Array(4); // Nuevo array con 4 elementos\nconsole.log(a2.length); // Salida: 4\n\n// Nuevo array con 3 elementos definidos\nconst artist = new Array('Michael Jackson', 'Taylor Swift', 'David Bowie');\nconsole.log(artist.length); // Salida: 3\n\n// Rellenar a1 con valores aleatorios\nfor (let i = 0; i &lt; 10; i++) {\n  a1[i] = Math.random();\n}\n\nconsole.log(a1.length); // Salida: 10\nconsole.log(a2.length); // Salida: 4\nconsole.log(artist.length); // Salida: 3\nconsole.log(a1);\nconsole.log(a2);\nconsole.log(artist);\n</code></pre>"},{"location":"T03/#2-usando-la-notacion-literal-de-arrays","title":"2. Usando la Notaci\u00f3n Literal de Arrays","text":"<pre><code>const artist2 = ['Michael Jackson', 'Taylor Swift', 'David Bowie'];\n\nconsole.log(artist2.length); // Salida: 3\nconsole.log(artist2); // Salida: [\"Michael Jackson\", \"Taylor Swift\", \"David Bowie\"]\nconsole.log(artist2[0]); // Salida: Michael Jackson\n</code></pre>"},{"location":"T03/#12-acceso-a-los-elementos-del-array","title":"1.2 Acceso a los Elementos del Array","text":"<p>Puedes acceder a los elementos en un array utilizando su \u00edndice. Los \u00edndices de los arrays comienzan en 0, as\u00ed que el primer elemento est\u00e1 en el \u00edndice 0, el segundo elemento en el \u00edndice 1, y as\u00ed sucesivamente.</p>"},{"location":"T03/#ejemplo-de-acceso-a-los-elementos","title":"Ejemplo de Acceso a los Elementos:","text":"<pre><code>// Declarar un array\nconst colors = [\"Red\", \"Green\", \"Blue\", \"Yellow\"];\n\n// Acceder a los elementos por \u00edndice\nconsole.log(colors[0]); // Salida: Red\nconsole.log(colors[1]); // Salida: Green\nconsole.log(colors[2]); // Salida: Blue\nconsole.log(colors[3]); // Salida: Yellow\n\n// Acceder al \u00faltimo elemento usando la propiedad length\nconsole.log(colors[colors.length - 1]); // Salida: Yellow\n\n// Modificar un elemento por \u00edndice\ncolors[1] = \"Purple\";\nconsole.log(colors); // Salida: [\"Red\", \"Purple\", \"Blue\", \"Yellow\"]\n\n// Recorrer el array para acceder a cada elemento\ncolors.forEach(function(color, index) {\n    console.log(index + \": \" + color);\n});\n// Salida:\n// 0: Red\n// 1: Purple\n// 2: Blue\n// 3: Yellow\n</code></pre>"},{"location":"T03/#13-formas-de-iterar-sobre-un-array","title":"1.3 Formas de Iterar sobre un Array","text":"<p>En JavaScript, hay varias formas de iterar sobre un array. Aqu\u00ed est\u00e1n algunos de los m\u00e9todos m\u00e1s comunes:</p> <ol> <li>Bucle <code>for</code> Tradicional</li> <li>Bucle <code>for...of</code></li> <li>Bucle <code>for...in</code></li> <li>M\u00e9todo <code>forEach</code></li> </ol>"},{"location":"T03/#1-bucle-for-tradicional","title":"1. Bucle <code>for</code> Tradicional","text":"<p>El bucle <code>for</code> tradicional es la forma m\u00e1s b\u00e1sica y flexible de iterar sobre un array.</p> <pre><code>const fruits = [\"Apple\", \"Banana\", \"Cherry\", \"Date\"];\n\nfor (let i = 0; i &lt; fruits.length; i++) {\n    console.log(fruits[i]);\n}\n// Salida:\n// Apple\n// Banana\n// Cherry\n// Date\n</code></pre>"},{"location":"T03/#2-bucle-forof","title":"2. Bucle <code>for...of</code>","text":"<p>El bucle <code>for...of</code> se utiliza para iterar sobre los valores de un array.</p> <pre><code>for (const fruit of fruits) {\n    console.log(fruit);\n}\n// Salida:\n// Apple\n// Banana\n// Cherry\n// Date\n</code></pre>"},{"location":"T03/#3-bucle-forin","title":"3. Bucle <code>for...in</code>","text":"<p>El bucle <code>for...in</code> se utiliza para iterar sobre las propiedades enumerables de un objeto, pero tambi\u00e9n se puede usar para iterar sobre los \u00edndices de un array (no recomendado para arrays).</p> <pre><code>for (const index in fruits) {\n    console.log(fruits[index]);\n}\n// Salida:\n// Apple\n// Banana\n// Cherry\n// Date\n</code></pre>"},{"location":"T03/#4-metodo-foreach","title":"4. M\u00e9todo <code>forEach</code>","text":"<p>El m\u00e9todo <code>forEach</code> ejecuta una funci\u00f3n de callback proporcionada una vez para cada elemento del array.</p> <pre><code>fruits.forEach((fruit, index) =&gt; {\n    console.log(index + \": \" + fruit);\n});\n// Salida:\n// 0: Apple\n// 1: Banana\n// 2: Cherry\n// 3: Date\n</code></pre> <p></p>"},{"location":"T03/#14-propiedades-de-los-arrays","title":"1.4 Propiedades de los Arrays","text":"<p>Los arrays en JavaScript vienen con varias propiedades integradas que proporcionan informaci\u00f3n y funcionalidades \u00fatiles. Aqu\u00ed est\u00e1n dos de las propiedades m\u00e1s importantes:</p>"},{"location":"T03/#1-length","title":"1. <code>length</code>","text":"<p>La propiedad <code>length</code> de un array devuelve el n\u00famero de elementos en el array.</p> <pre><code>const fruits = [\"Apple\", \"Banana\", \"Cherry\"];\nconsole.log(fruits.length); // Salida: 3\n</code></pre>"},{"location":"T03/#2-prototype","title":"2. <code>prototype</code>","text":"<p>La propiedad <code>prototype</code> permite agregar nuevas propiedades y m\u00e9todos a todos los objetos array.</p> <pre><code>Array.prototype.first = function() {\n    return this[0];\n};\n\nconsole.log(fruits.first()); // Salida: Apple\n</code></pre>"},{"location":"T03/#15-metodos-importantes-de-los-arrays","title":"1.5 M\u00e9todos Importantes de los Arrays","text":"<p>Los arrays en JavaScript vienen con una variedad de m\u00e9todos integrados que proporcionan funcionalidades poderosas para manipular e interactuar con los elementos del array. Aqu\u00ed est\u00e1n algunos de los m\u00e9todos m\u00e1s importantes:</p> <ol> <li><code>push</code></li> <li><code>pop</code></li> <li><code>shift</code></li> <li><code>unshift</code></li> <li><code>concat</code></li> <li><code>slice</code></li> <li><code>splice</code></li> <li><code>indexOf</code></li> <li><code>includes</code></li> <li><code>forEach</code></li> <li><code>map</code></li> <li><code>filter</code></li> <li><code>reduce</code></li> <li><code>sort</code></li> </ol>"},{"location":"T03/#1-push","title":"1. <code>push</code>","text":"<p>Agrega uno o m\u00e1s elementos al final de un array y devuelve la nueva longitud del array.</p> <pre><code>const fruits = [\"Apple\", \"Banana\"];\nfruits.push(\"Cherry\");\nconsole.log(fruits); // Salida: [\"Apple\", \"Banana\", \"Cherry\"]\n</code></pre>"},{"location":"T03/#2-pop","title":"2. <code>pop</code>","text":"<p>Elimina el \u00faltimo elemento de un array y devuelve ese elemento.</p> <pre><code>const lastFruit = fruits.pop();\nconsole.log(lastFruit); // Salida: Cherry\nconsole.log(fruits); // Salida: [\"Apple\", \"Banana\"]\n</code></pre>"},{"location":"T03/#3-shift","title":"3. <code>shift</code>","text":"<p>Elimina el primer elemento de un array y devuelve ese elemento.</p> <pre><code>const firstFruit = fruits.shift();\nconsole.log(firstFruit); // Salida: Apple\nconsole.log(fruits); // Salida: [\"Banana\"]\n</code></pre>"},{"location":"T03/#4-unshift","title":"4. <code>unshift</code>","text":"<p>Agrega uno o m\u00e1s elementos al principio de un array y devuelve la nueva longitud del array.</p> <pre><code>fruits.unshift(\"Apple\");\nconsole.log(fruits); // Salida: [\"Apple\", \"Banana\"]\n</code></pre>"},{"location":"T03/#5-concat","title":"5. <code>concat</code>","text":"<p>Combina dos o m\u00e1s arrays y devuelve un nuevo array.</p> <pre><code>const moreFruits = [\"Cherry\", \"Date\"];\nconst allFruits = fruits.concat(moreFruits);\nconsole.log(allFruits); // Salida: [\"Apple\", \"Banana\", \"Cherry\", \"Date\"]\n</code></pre>"},{"location":"T03/#6-slice","title":"6. <code>slice</code>","text":"<p>Devuelve una copia superficial de una porci\u00f3n de un array en un nuevo array objeto.</p> <p><pre><code>const someFruits = allFruits.slice(1, 3);\nconsole.log(someFruits); // Salida: [\"Banana\", \"Cherry\"]\n</code></pre> El \u00faltimo \u00edndice no est\u00e1 incluido. En el ejemplo tomamos del \u00edndice 1 al \u00edndice 3 (no incluido).</p>"},{"location":"T03/#7-splice","title":"7. <code>splice</code>","text":"<p>Cambia el contenido de un array eliminando o reemplazando elementos existentes y/o agregando nuevos elementos.</p> <pre><code>allFruits.splice(2, 1, \"Blueberry\");\nconsole.log(allFruits); // Salida: [\"Apple\", \"Banana\", \"Blueberry\", \"Date\"]\n</code></pre>"},{"location":"T03/#8-indexof","title":"8. <code>indexOf</code>","text":"<p>Devuelve el primer \u00edndice en el que se puede encontrar un elemento dado en el array, o -1 si no est\u00e1 presente.</p> <pre><code>const index = allFruits.indexOf(\"Banana\");\nconsole.log(index); // Salida: 1\n</code></pre>"},{"location":"T03/#9-includes","title":"9. <code>includes</code>","text":"<p>Determina si un array incluye un cierto elemento, devol</p> <p>viendo verdadero o falso.</p> <pre><code>const hasBanana = allFruits.includes(\"Banana\");\nconsole.log(hasBanana); // Salida: true\n</code></pre>"},{"location":"T03/#10-foreach","title":"10. <code>forEach</code>","text":"<p>Ejecuta una funci\u00f3n proporcionada una vez para cada elemento del array.</p> <pre><code>allFruits.forEach(function(fruit, index) {\n    console.log(index + \": \" + fruit);\n});\n// Salida:\n// 0: Apple\n// 1: Banana\n// 2: Blueberry\n// 3: Date\n</code></pre>"},{"location":"T03/#11-map","title":"11. <code>map</code>","text":"<p>Crea un nuevo array con los resultados de llamar a una funci\u00f3n proporcionada en cada elemento del array.</p> <pre><code>const upperCaseFruits = allFruits.map(function(fruit) {\n    return fruit.toUpperCase();\n});\nconsole.log(upperCaseFruits); // Salida: [\"APPLE\", \"BANANA\", \"BLUEBERRY\", \"DATE\"]\n</code></pre>"},{"location":"T03/#12-filter","title":"12. <code>filter</code>","text":"<p>Crea un nuevo array con todos los elementos que pasan la prueba implementada por la funci\u00f3n proporcionada.</p> <pre><code>const longNamedFruits = allFruits.filter(function(fruit) {\n    return fruit.length &gt; 5;\n});\nconsole.log(longNamedFruits); // Salida: [\"Blueberry\"]\n</code></pre>"},{"location":"T03/#13-reduce","title":"13. <code>reduce</code>","text":"<p>Ejecuta una funci\u00f3n reductora en cada elemento del array, resultando en un solo valor de salida.</p> <pre><code>const totalLength = allFruits.reduce(function(accumulator, fruit) {\n    return accumulator + fruit.length;\n}, 0);\nconsole.log(totalLength); // Salida: 26\n</code></pre>"},{"location":"T03/#14-sort","title":"14. <code>sort</code>","text":"<p>Se utiliza para ordenar los elementos de un array en su lugar y devuelve el array ordenado. Cuando no se proporciona una funci\u00f3n de comparaci\u00f3n, <code>sort()</code> convierte cada elemento en una cadena y los ordena lexicogr\u00e1ficamente (orden de diccionario).</p> <ul> <li> <p>Ordenar sin una Funci\u00f3n de Comparaci\u00f3n       <pre><code>const fruits = ['banana', 'apple', 'orange'];\nfruits.sort();\nconsole.log(fruits); // [\"apple\", \"banana\", \"orange\"]\n</code></pre></p> </li> <li> <p>Ordenar con una Funci\u00f3n de Comparaci\u00f3n       <pre><code>const numbers = [4, 2, 5, 1, 3];\nnumbers.sort((a, b) =&gt; a - b);\nconsole.log(numbers); // [1, 2, 3, 4, 5]\n</code></pre></p> </li> </ul> <p>Fuente: MDN Web Docs</p>"},{"location":"T03/#boom","title":"\u00a1Boom!","text":"Ejercicio Pr\u00e1ctico: Manipulaci\u00f3n de Arrays con `map` <p>Crea una p\u00e1gina web que calcule el cuadrado de cada n\u00famero en un array y muestre los resultados.</p>"},{"location":"T03/#2-objetos","title":"2. Objetos","text":"<p>JavaScript est\u00e1 dise\u00f1ado con un paradigma simple basado en objetos. Un objeto es una colecci\u00f3n de propiedades, donde una propiedad es una asociaci\u00f3n entre un nombre (o clave) y un valor.</p> <p>El valor de una propiedad puede ser una funci\u00f3n, en cuyo caso la propiedad se conoce como un m\u00e9todo.</p> <p>Adem\u00e1s de los objetos predefinidos en el navegador, puedes definir tus propios objetos.</p> <p>Fuente: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Working_with_objects</p>"},{"location":"T03/#puntos-clave_1","title":"Puntos Clave:","text":"<ul> <li>Propiedades: Asociaciones entre un nombre (clave) y un valor.</li> <li>M\u00e9todos: Funciones que son propiedades de los objetos.</li> <li>Objetos Personalizados: Objetos definidos por el usuario adem\u00e1s de los objetos definidos por el navegador.</li> </ul>"},{"location":"T03/#21-declarando-objetos","title":"2.1 Declarando Objetos","text":"<p>En JavaScript, hay dos formas principales de crear objetos:</p> <ol> <li>Usando el constructor <code>Object</code> y luego a\u00f1adiendo propiedades.</li> <li>Usando la notaci\u00f3n de literal de objeto para definir el objeto y sus propiedades directamente.</li> </ol>"},{"location":"T03/#1-usando-el-constructor-object","title":"1. Usando el Constructor <code>Object</code>","text":"<p>Puedes crear un objeto vac\u00edo usando el constructor <code>Object</code> y luego a\u00f1adir propiedades a \u00e9l.</p> <pre><code>// Crear un objeto vac\u00edo usando el constructor Object\nconst myCar = new Object();\n\n// A\u00f1adir propiedades al objeto\nmyCar.make = \"Ford\";\nmyCar.model = \"Mustang\";\nmyCar.year = 1969;\n\n// Acceder a las propiedades\nconsole.log(`Make: ${myCar.make} Model: ${myCar.model}`);\n</code></pre>"},{"location":"T03/#2-usando-la-notacion-de-literal-de-objeto","title":"2. Usando la Notaci\u00f3n de Literal de Objeto","text":"<p>Puedes definir el objeto y sus propiedades directamente usando la notaci\u00f3n de literal de objeto, que es m\u00e1s concisa y f\u00e1cil de leer.</p> <pre><code>// Crear un objeto con notaci\u00f3n literal\nconst myCar2 = {\n  make: 'Seat',\n  model: '600',\n  year: '1965'\n}\n\n// Acceder a las propiedades\nconsole.log(`Make: ${myCar2.make} Model: ${myCar2.model}`);\n</code></pre>"},{"location":"T03/#crear-un-objeto-con-metodos","title":"Crear un Objeto con M\u00e9todos:","text":"<pre><code>// Definir un objeto usando notaci\u00f3n literal de objeto\nconst person = {\n    firstName: \"John\",\n    lastName: \"Doe\",\n    age: 30,\n    // este es un m\u00e9todo:\n    greet: function() {\n        console.log(\"Hello, \" + this.firstName + \" \" + this.lastName);\n    }\n};\n\n// Acceder a las propiedades y llamar al m\u00e9todo\nconsole.log(person.firstName); // Salida: John\n// Llamar al m\u00e9todo\nperson.greet(); // Salida: Hello, John Doe\n</code></pre>"},{"location":"T03/#22-funciones-constructoras-e-instancias-de-objetos","title":"2.2 Funciones Constructoras e Instancias de Objetos","text":"<p>En JavaScript, puedes crear una funci\u00f3n constructora para definir la estructura y el comportamiento de los objetos. Luego, puedes crear instancias del objeto usando la palabra clave <code>new</code>.</p> <pre><code>// Definir una funci\u00f3n constructora\nfunction Person(firstName, lastName, age) {\n    this.firstName = firstName;\n    this.lastName = lastName;\n    this.age = age;\n    this.greet = function() {\n        console.log(\"Hello, \" + this.firstName + \" \" + this.lastName);\n    };\n}\n\n// Crear instancias del objeto Person\nconst person1 = new Person(\"John\", \"Doe\", 30);\nconst person2 = new Person(\"Jane\", \"Smith\", 25);\n\n// Acceder a las propiedades y llamar a los m\u00e9todos\nconsole.log(person1.firstName); // Salida: John\nperson1.greet(); // Salida: Hello, John Doe\n\nconsole.log(person2.firstName); // Salida: Jane\nperson2.greet(); // Salida: Hello, Jane Smith\n</code></pre>"},{"location":"T03/#3-clases-en-javascript","title":"3. Clases en JavaScript","text":"<p>Desde ES6 (ECMAScript 2015), JavaScript admite la sintaxis de clases, permitiendo un estilo de programaci\u00f3n orientado a objetos m\u00e1s tradicional. Aqu\u00ed est\u00e1n algunas caracter\u00edsticas clave de las clases ES6:</p>"},{"location":"T03/#declaracion-de-clase-con-constructor","title":"Declaraci\u00f3n de Clase con Constructor","text":"<p>Las clases en JavaScript pueden tener un m\u00e9todo <code>constructor</code>, que es un m\u00e9todo especial para inicializar instancias de la clase con ciertas propiedades.</p> <pre><code>class Car {\n  constructor(brand, model) {\n    this.brand = brand;\n    this.model = model;\n    this.mileage = 0;\n  }\n}\n</code></pre>"},{"location":"T03/#metodos-setter-y-getter","title":"M\u00e9todos Setter y Getter","text":"<p>Las clases ES6 tambi\u00e9n admiten m\u00e9todos setter y getter usando las palabras clave <code>set</code> y <code>get</code>, respectivamente, permitiendo el acceso controlado a las propiedades del objeto.</p> <pre><code>class Car {\n  constructor(brand, model) {\n    this._brand = brand;\n    this._model = model;\n    this._mileage = 0;\n  }\n\n  // M\u00e9todo regular\n  drive(distance) {\n    this._mileage += distance;\n    console.log(`Driving ${distance} miles in ${this._brand} ${this._model}.`);\n  }\n\n  // M\u00e9todo getter\n  get mileage() {\n    return this._mileage;\n  }\n\n  // M\u00e9todo setter\n  set mileage(value) {\n    if (value &gt;= 0) {\n      this._mileage = value;\n    } else {\n      console.error(\"Mileage cannot be negative.\");\n    }\n  }\n}\n\n// Crear una instancia de Car\nconst myCar = new Car(\"Toyota\", \"Corolla\");\n\n// Llamar al m\u00e9todo regular para conducir\nmyCar.drive(50);\nmyCar.drive(30);\n\n// Acceder al kilometraje usando el m\u00e9todo getter\nconsole.log(`Total mileage: ${myCar.mileage} miles.`);\n</code></pre>"},{"location":"T03/#4-arreglos-de-objetos","title":"4. Arreglos de Objetos","text":"<p>En JavaScript, los arreglos pueden contener una colecci\u00f3n de objetos. Cada objeto dentro del arreglo puede tener sus propias propiedades y m\u00e9todos, lo que permite una organizaci\u00f3n y manipulaci\u00f3n estructurada de los datos.</p> <pre><code>// Definir un arreglo de objetos (arreglo de coches)\nlet cars = [\n  { brand: \"Toyota\", model: \"Corolla\", year: 2020 },\n  { brand: \"Honda\", model: \"Civic\", year: 2019 },\n  { brand: \"Ford\", model: \"Mustang\", year: 2021 }\n];\n\n// Acceder a los objetos en el arreglo\nconsole.log(cars[0]); // Salida: { brand: \"Toyota\", model: \"Corolla\", year: 2020 }\n\n// A\u00f1adir un nuevo objeto al arreglo\ncars.push({ brand: \"Tesla\", model: \"Model S\", year: 2022 });\n\n// Modificar un objeto en el arreglo\ncars[1].year = 2020;\n\n// Eliminar un objeto del arreglo\ncars.splice(2, 1); // Elimina el objeto en el \u00edndice 2\n\n// Iterar sobre el arreglo de objetos\ncars.forEach(function(car) {\n  console.log(`${car.brand} ${car.model} (${car.year})`);\n});\n</code></pre>"},{"location":"T03/#5-notacion-json","title":"5. Notaci\u00f3n JSON","text":"<p>JSON (JavaScript Object Notation) es un formato ligero de intercambio de datos que es f\u00e1cil de leer y escribir para los humanos, y f\u00e1cil de analizar y generar para las m\u00e1quinas. Se utiliza ampliamente como formato para intercambiar datos entre un servidor y una aplicaci\u00f3n web, y es un formato de datos est\u00e1ndar con muchos lenguajes de programaci\u00f3n.</p>"},{"location":"T03/#sintaxis","title":"Sintaxis","text":"<ul> <li>Datos en pares nombre/valor: Los datos JSON se representan como pares clave-valor.</li> <li>Datos separados por comas: Los datos JSON se separan por comas.</li> <li>Llaves que contienen objetos: Los datos JSON est\u00e1n encerrados en llaves <code>{}</code> para denotar objetos.</li> <li>Corchetes que contienen arreglos: Los arreglos JSON est\u00e1n encerrados en corchetes <code>[]</code>.</li> </ul> <pre><code>{\n  \"firstName\": \"John\",\n  \"lastName\": \"Doe\",\n  \"age\": 30,\n  \"isStudent\": false,\n  \"address\": {\n    \"streetAddress\": \"123 Main Street\",\n    \"city\": \"Anytown\",\n    \"state\": \"CA\",\n    \"postalCode\": \"12345\"\n  },\n  \"phoneNumbers\": [\n    { \"type\": \"home\", \"number\": \"555-1234\" },\n    { \"type\": \"work\", \"number\": \"555-5678\" }\n  ]\n}\n</code></pre>"},{"location":"T03/#puntos-clave_2","title":"Puntos Clave","text":"<ul> <li>Tipos de Datos: JSON admite cadenas, n\u00fameros, objetos, arreglos, booleanos y valores nulos.</li> <li>Formato Universal: JSON es independiente del lenguaje de programaci\u00f3n, lo que lo hace adecuado para el intercambio de datos.</li> <li>Parseo y Serializaci\u00f3n: JSON puede ser convertido en objetos JavaScript usando <code>JSON.parse()</code> y convertido de nuevo a JSON usando <code>JSON.stringify()</code>.</li> </ul>"},{"location":"T03/#uso","title":"Uso","text":"<ul> <li>APIs Web: Muchas APIs web utilizan JSON para enviar datos entre servidores y navegadores web.</li> <li>Archivos de Configuraci\u00f3n: JSON se utiliza en archivos de configuraci\u00f3n debido a su formato legible.</li> <li>Almacenamiento de Datos: JSON se utiliza para almacenar e intercambiar datos estructurados en bases de datos y aplicaciones.</li> </ul>"},{"location":"T03/#ejemplo-de-parseo-y-serializacion-de-json","title":"Ejemplo de Parseo y Serializaci\u00f3n de JSON","text":"<pre><code>// Objeto con m\u00faltiples atributos, incluyendo un arreglo de objetos\nlet user = {\n  name: \"John Doe\",\n  age: 35,\n  address: {\n    street: \"Main Street\",\n    city: \"New York\",\n    country: \"USA\"\n  },\n  orderHistory: [\n    { id: 1, product: \"Smartphone\n\n\", quantity: 1 },\n    { id: 2, product: \"Tablet\", quantity: 2 },\n    { id: 3, product: \"Laptop\", quantity: 1 }\n  ]\n};\n\n// Convertir a JSON usando JSON.stringify()\nlet jsonUser = JSON.stringify(user);\n\nconsole.log(\"Objeto convertido a JSON:\");\nconsole.log(jsonUser);\n\n// Convertir de vuelta a objeto usando JSON.parse()\nlet parsedObject = JSON.parse(jsonUser);\n\nconsole.log(\"\\nJSON convertido de vuelta a objeto:\");\nconsole.log(parsedObject);\n</code></pre> <p>Esta gu\u00eda completa proporciona una visi\u00f3n detallada de c\u00f3mo trabajar con objetos, arreglos de objetos y JSON en JavaScript, equip\u00e1ndote con el conocimiento necesario para manejar diversas estructuras de datos y formatos de intercambio en tus proyectos.</p>"},{"location":"T04/","title":"UNIDAD 4 - Manipulaci\u00f3n del DOM","text":""},{"location":"T04/#1-modelo-de-objetos-del-documento-dom","title":"1. Modelo de Objetos del Documento (DOM)","text":"<p>El DOM (Modelo de Objetos del Documento) es un est\u00e1ndar del W3C que define c\u00f3mo acceder a documentos como HTML y XML. Es una interfaz de programaci\u00f3n de aplicaciones (API) de la plataforma W3C que permite a los scripts acceder y actualizar din\u00e1micamente el contenido, la estructura y el estilo de un documento.</p> <p>Es decir, si analizamos el documento html de la p\u00e1gina web, nos vamos a encontrar una serie de etiquetas  unas dentro de otras. DOM permite manejar esas etiquetas como objetos de la p\u00e1gina, y de esta forma gestionarla din\u00e1micamente.</p> <ul> <li>Est\u00e1ndar: El DOM es un est\u00e1ndar mantenido por el World Wide Web Consortium (W3C) que proporciona una representaci\u00f3n estructurada de un documento.</li> <li>API: Sirve como una interfaz para la programaci\u00f3n, permitiendo a los desarrolladores manipular la estructura, el estilo y el contenido del documento a trav\u00e9s de lenguajes de scripting como JavaScript.</li> <li>Actualizaciones Din\u00e1micas: Con el DOM, los scripts pueden modificar din\u00e1micamente el contenido, la estructura y el estilo del documento, permitiendo aplicaciones web interactivas y reactivas.</li> </ul> <p>Aqu\u00ed tienes un ejemplo simple de c\u00f3mo podr\u00edas usar el DOM para cambiar din\u00e1micamente el contenido de un elemento HTML:</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"es\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\n    &lt;title&gt;Ejemplo de DOM&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;h1 id=\"title\"&gt;\u00a1Hola, Mundo!&lt;/h1&gt;\n    &lt;button onclick=\"changeTitle()\"&gt;Cambiar T\u00edtulo&lt;/button&gt;\n\n    &lt;script&gt;\n        function changeTitle() {\n            // Accede al elemento DOM con el id 'title'\n            const titleElement = document.getElementById('title');\n            // Cambia el contenido del elemento\n            titleElement.textContent = '\u00a1Hola, DOM!';\n        }\n    &lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"T04/#11-historia-del-dom","title":"1.1 Historia del DOM","text":"<ul> <li> <p>Web Temprana (1990s): La web comenz\u00f3 con p\u00e1ginas HTML est\u00e1ticas simples. No hab\u00eda una manera est\u00e1ndar de manipular el contenido o la estructura de estas p\u00e1ginas de manera din\u00e1mica.</p> </li> <li> <p>Guerras Netscape e IE: Netscape Navigator e Internet Explorer (IE) fueron los dos navegadores dominantes. Cada uno desarroll\u00f3 sus propios m\u00e9todos para manipular documentos HTML, lo que llev\u00f3 a problemas de compatibilidad.</p> </li> <li> <p>Introducci\u00f3n de JavaScript (1995): Brendan Eich cre\u00f3 JavaScript para Netscape, permitiendo interacciones din\u00e1micas b\u00e1sicas. Sin embargo, el enfoque de Netscape era diferente del de IE. Netscape Navigator 2.0 fue el primer navegador en implementar el denominado DOM Nivel 0.</p> </li> <li> <p>Participaci\u00f3n del W3C (1998): El World Wide Web Consortium (W3C) intervino para estandarizar c\u00f3mo se deber\u00edan acceder y manipular los documentos, resultando en la creaci\u00f3n del Modelo de Objetos del Documento (DOM) Nivel 1.</p> </li> <li> <p>DOM Nivel 1 (1998): Se lanz\u00f3 la primera versi\u00f3n del DOM, proporcionando una manera estandarizada de manipular la estructura y el contenido del documento a trav\u00e9s de diferentes navegadores.</p> </li> <li> <p>DOM Nivel 2 (2000): Introdujo caracter\u00edsticas m\u00e1s avanzadas como soporte para CSS, eventos y manipulaci\u00f3n de documentos XML.</p> </li> <li> <p>DOM Nivel 3 (2004): Expansi\u00f3n adicional de la API para incluir m\u00e1s caracter\u00edsticas para la manipulaci\u00f3n y navegaci\u00f3n de documentos.</p> </li> <li> <p>HTML5 y la Web Moderna (2010s): HTML5 trajo actualizaciones significativas al DOM, haci\u00e9ndolo m\u00e1s robusto y permitiendo aplicaciones web m\u00e1s complejas. Los navegadores modernos han adoptado e implementado estos est\u00e1ndares de manera consistente.</p> </li> </ul> <p>El desarrollo y la estandarizaci\u00f3n del DOM han sido cruciales para crear la web din\u00e1mica e interactiva que conocemos hoy, proporcionando una manera consistente para que los scripts interact\u00faen y modifiquen documentos web a trav\u00e9s de diferentes navegadores.</p> <p>--&gt; Est\u00e1ndar DOM Nivel 3 por el W3C</p>"},{"location":"T04/#2-estructura-del-arbol-dom","title":"2. Estructura del \u00c1rbol DOM","text":"<p>Un \u00e1rbol DOM es una estructura de \u00e1rbol cuyos nodos representan el contenido de un documento HTML o XML. Cada documento HTML o XML tiene una representaci\u00f3n en \u00e1rbol DOM. Por ejemplo, considera el siguiente documento:</p> <pre><code>&lt;html lang=\"es\"&gt;\n  &lt;head&gt;\n    &lt;title&gt;Mi T\u00edtulo&lt;/title&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n    &lt;a href=\"http://alink.com\"&gt;Mi Enlace&lt;/a&gt;\n    &lt;h1&gt;Mi Encabezado&lt;/h1&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>Tiene un \u00e1rbol DOM que se ve as\u00ed:</p> <p></p> <p>Aunque el \u00e1rbol anterior es similar al \u00e1rbol DOM del documento, no es id\u00e9ntico, ya que el \u00e1rbol DOM real conserva el espacio en blanco.</p> <p>Cuando un navegador web analiza un documento HTML, construye un \u00e1rbol DOM y luego lo usa para mostrar el documento.</p> <p>FUENTE: mdn web docs_</p>"},{"location":"T04/#reglas-de-estructura-del-arbol","title":"Reglas de Estructura del \u00c1rbol:","text":"<p>Para organizar la estructura del \u00e1rbol, hay una serie de reglas:</p> <ul> <li>En el \u00e1rbol de nodos, el nodo superior (documento) se llama ra\u00edz.</li> <li>Cada nodo, excepto el nodo ra\u00edz, tiene un padre.</li> <li>Un nodo puede tener cualquier n\u00famero de hijos.</li> <li>Una hoja es un nodo con sin hijos.</li> <li>Los nodos que comparten el mismo padre son hermanos.</li> </ul>"},{"location":"T04/#21-la-interfaz-node","title":"2.1 La Interfaz Node","text":"<p>Un Node es una interfaz abstracta que representa un solo nodo en el \u00e1rbol. Estos nodos pueden ser un Documento, un Elemento, un DocumentFragment y m\u00e1s.</p> <ul> <li>Documento: El nodo ra\u00edz del documento HTML.</li> <li>DocumentType: Un nodo que representa el DTD (Definici\u00f3n de Tipo de Documento) de la p\u00e1gina.</li> <li>Elemento: Un nodo que representa un elemento HTML.</li> <li>Attr: Un nodo que representa un atributo de un elemento.</li> <li>Texto: Un nodo que almacena el texto contenido dentro de un nodo Elemento.</li> <li>Comentario: Un nodo que almacena un comentario en el documento HTML.</li> </ul>"},{"location":"T04/#interfaz-node","title":"Interfaz Node","text":"<ul> <li>Para manipular la informaci\u00f3n de los nodos, JavaScript crea un objeto llamado <code>Node</code>.</li> <li>Este objeto define propiedades y m\u00e9todos para procesar documentos.</li> <li>Tambi\u00e9n define un conjunto de constantes que identifican los tipos de nodos. Estos son los valores que la propiedad <code>nodeType</code> puede tener:</li> </ul> Constante Descripci\u00f3n Valor <code>Node.ELEMENT_NODE</code> Representa un nodo de elemento. 1 <code>Node.ATTRIBUTE_NODE</code> Representa un nodo de atributo. 2 <code>Node.TEXT_NODE</code> Representa un nodo de texto. 3 <code>Node.CDATA_SECTION_NODE</code> Representa un nodo de secci\u00f3n CDATA. 4 <code>Node.ENTITY_REFERENCE_NODE</code> Representa un nodo de referencia de entidad. 5 <code>Node.ENTITY_NODE</code> Representa un nodo de entidad. 6 <code>Node.PROCESSING_INSTRUCTION_NODE</code> Representa un nodo de instrucci\u00f3n de procesamiento. 7 <code>Node.COMMENT_NODE</code> Representa un nodo de comentario. 8 <code>Node.DOCUMENT_NODE</code> Representa el nodo del documento. 9 <code>Node.DOCUMENT_TYPE_NODE</code> Representa el nodo de tipo de documento. 10 <code>Node.DOCUMENT_FRAGMENT_NODE</code> Representa un nodo de fragmento de documento. 11 <code>Node.NOTATION_NODE</code> Representa un nodo de notaci\u00f3n. 12"},{"location":"T04/#propiedades-y-metodos-del-nodo","title":"Propiedades y M\u00e9todos del Nodo","text":"Propiedad/M\u00e9todo Descripci\u00f3n <code>nodeName</code> Devuelve el nombre del nodo. <code>nodeType</code> Devuelve un c\u00f3digo entero que representa el tipo de nodo. <code>nodeValue</code> Establece o devuelve el valor del nodo. Para nodos de elementos, esto es <code>null</code>. <code>parentNode</code> Devuelve el nodo padre del nodo especificado. <code>childNodes</code> Devuelve una NodeList de los nodos hijos del nodo especificado. <code>firstChild</code> Devuelve el primer nodo hijo del nodo especificado. <code>lastChild</code> Devuelve el \u00faltimo nodo hijo del nodo especificado. <code>previousSibling</code> Devuelve el nodo hermano anterior del nodo especificado. <code>nextSibling</code> Devuelve el nodo hermano siguiente del nodo especificado. <code>textContent</code> Establece o devuelve el contenido de texto del nodo y sus descendientes. <code>appendChild(node)</code> Agrega un nuevo nodo hijo al final de la lista de hijos de un nodo padre especificado. <code>removeChild(node)</code> Elimina un nodo hijo del <p>nodo padre especificado.                                              | | <code>replaceChild(newNode, oldNode)</code>   | Reemplaza un nodo hijo por otro en el nodo padre especificado.                                | | <code>cloneNode(deep)</code>                  | Clona el nodo actual. Si <code>deep</code> es <code>true</code>, tambi\u00e9n clona todos los nodos descendientes.      |</p> <p>Estos m\u00e9todos y propiedades proporcionan una variedad de maneras para manipular los nodos dentro del \u00e1rbol DOM, permitiendo una amplia gama de operaciones en la estructura del documento.</p>"}]}