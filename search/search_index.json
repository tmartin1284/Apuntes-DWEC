{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Desarrollo web en Entorno Cliente","text":"<p> En esta web (en desarrollo) est\u00e1n los apuntes del m\u00f3dulo profesional de Desarrollo Web en Entorno Cliente. El material intelectual pertenece al profesor Jos\u00e9 Enrique Atienzar. Los materiales originales est\u00e1n accesibles en ingl\u00e9s en https://jeatzr.github.io/dwec-bi/.</p> <p>El temario se estructura de la siguiente forma:</p> <p>Primer trimestre</p> <ol> <li>Introducci\u00f3n a JavaScript y las herramientas de FrontEnd</li> <li>Fundamentos de JavaScript </li> <li>Arrays, Objectos..., y Clases</li> <li>Gestionando el DOM</li> <li>Gesti\u00f3n de Eventos y Formularios</li> <li>AJAX</li> <li>Almacenamiento en el lado del cliente</li> </ol> <p>Segundo trimestre</p> <ol> <li>NodeJS</li> <li>React</li> <li>Typescript</li> </ol>"},{"location":"T01/","title":"UNIDAD 1 - Introducci\u00f3n a las Herramientas de Frontend","text":""},{"location":"T01/#1-diferencia-entre-internet-y-la-web","title":"1. Diferencia entre Internet y la Web","text":""},{"location":"T01/#el-internet-la-www","title":"\u00bfEl Internet === La WWW?","text":""},{"location":"T01/#el-internet","title":"El Internet:","text":"<ul> <li>Definici\u00f3n: El Internet es una red global de computadoras y otros dispositivos interconectados. Es la infraestructura que permite diversos tipos de comunicaci\u00f3n digital e intercambio de datos.</li> <li>Historia: El desarrollo del Internet comenz\u00f3 a fines de la d\u00e9cada de 1960 con la creaci\u00f3n de ARPANET, un proyecto financiado por el Departamento de Defensa de EE.UU. A lo largo de las d\u00e9cadas siguientes, evolucion\u00f3 hasta convertirse en una red global con la creaci\u00f3n de los protocolos TCP/IP en la d\u00e9cada de 1980. Posteriormente se crearon protocolos en las diferentes capas de la arquitectura</li> <li>Componentes: El Internet consta de hardware (servidores, enrutadores, cables) y ciertos est\u00e1ndares y protocolos (TCP/IP, Ethernet).</li> <li>Funciones: Soporta una amplia gama de servicios como correo electr\u00f3nico, transferencia de archivos, mensajer\u00eda instant\u00e1nea y, por supuesto, la World Wide Web.</li> <li>Analog\u00eda: Piensa en el Internet como la red f\u00edsica de caminos y carreteras.</li> </ul> <p>Para m\u00e1s informaci\u00f3n, recordad los apuntes de SISI del a\u00f1o pasao. Echadle un ojo a la parte de redes (tercer trimestre, y sobretodo al curso de ccna de Cisco que hicist\u00e9is).</p>"},{"location":"T01/#la-world-wide-web-www","title":"La World Wide Web (WWW):","text":"<ul> <li>Definici\u00f3n: La World Wide Web es una colecci\u00f3n de informaci\u00f3n, accesible a trav\u00e9s del Internet, que est\u00e1 formateada e interconectada utilizando hipertexto y hipermedia. Es un servicio que opera sobre el Internet.</li> <li>Historia: La World Wide Web (WWW), o comunmente conocida como \"la Web\" fue inventada por Tim Berners-Lee en 1989 mientras trabajaba en CERN. Desarroll\u00f3 el primer navegador web y servidor web, y el primer sitio web se public\u00f3 en 1991. La web creci\u00f3 r\u00e1pidamente en popularidad a lo largo de la d\u00e9cada de 1990, convirti\u00e9ndose en una parte importante de la vida cotidiana.</li> <li>Componentes: La WWW consta de p\u00e1ginas web, sitios web y navegadores web. Las p\u00e1ginas web son documentos escritos en HTML y se accede a trav\u00e9s de URLs.</li> <li> <p>Funciones: Permite a los usuarios acceder y navegar por las p\u00e1ginas web a trav\u00e9s de navegadores web (como Chrome, Firefox, Safari). Estas p\u00e1ginas pueden contener texto, im\u00e1genes, videos y enlaces a otras p\u00e1ginas.</p> </li> <li> <p>Analog\u00eda: Piensa en la web como un sistema espec\u00edfico de caminos y puntos de referencia (sitios web y p\u00e1ginas web) que existen en las carreteras y autopistas f\u00edsicas (el Internet).</p> </li> </ul>"},{"location":"T01/#resumen","title":"Resumen:","text":"<ul> <li>Internet: La red global subyacente que conecta millones de computadoras.</li> <li>La Web: Un subconjunto del Internet, compuesto por p\u00e1ginas y sitios web, accesibles a trav\u00e9s de navegadores web.</li> </ul> <p>La web depende del Internet para funcionar, pero el Internet tambi\u00e9n soporta muchos otros servicios adem\u00e1s de la Web.</p>"},{"location":"T01/#2-arquitectura-web","title":"2. Arquitectura Web","text":"<p>La arquitectura m\u00e1s com\u00fan es cliente/servidor.</p> <ul> <li>Un cliente es un consumidor de servicios. El navegador web en nuestro dispositivo act\u00faa como cliente.</li> <li>Un servidor es uno o m\u00e1s procesos alojados en m\u00e1quinas que proporcionan los servicios consumidos por el cliente. El servicio m\u00e1s utilizado en la WWW es HTTP.</li> </ul> <p></p>"},{"location":"T01/#3-desarrollo-frontend-y-backend","title":"3. Desarrollo Frontend y Backend","text":"<ul> <li>Backend: La parte de la aplicaci\u00f3n web que se ejecuta en el servidor.</li> <li>Frontend: La parte de la aplicaci\u00f3n web que se ejecuta en el cliente.</li> </ul>"},{"location":"T01/#31-desarrollo-backend","title":"3.1 Desarrollo Backend","text":"<p>Es el desarrollo llevado a cabo en el lado del servidor. Es responsable de la l\u00f3gica de negocio y la persistencia de datos (almacenamiento en la base de datos).</p> <p>Lenguajes de backend:</p> <ul> <li>Java</li> <li>Python</li> <li>Node.js</li> <li>Ruby</li> <li>PHP</li> <li>ASP.NET</li> </ul> <p></p>"},{"location":"T01/#32-desarrollo-frontend","title":"3.2 Desarrollo Frontend","text":"<p>Es la parte desarrollada para ejecutarse en el cliente (navegador web). El navegador web solo sabe interpretar tres lenguajes:</p> <ul> <li>HTML: Para la estructura y el contenido de la p\u00e1gina.</li> <li>CSS: Define la apariencia de la p\u00e1gina web.</li> <li>JavaScript: Lenguaje que define el comportamiento din\u00e1mico.</li> </ul> <p></p> <p>Actualmente, est\u00e1 ganando mucha prominencia debido al peso creciente de las aplicaciones web en el lado del cliente -&gt; Aplicaciones de una sola p\u00e1gina (o comoo se conocen por sus siglas en ingl\u00e9s SPAs -Single Page Aplications).</p> <p>Una aplicaci\u00f3n de una sola p\u00e1gina (SPA) es una aplicaci\u00f3n web o sitio web que interact\u00faa con el usuario al reescribir din\u00e1micamente la p\u00e1gina web actual con nuevos datos del servidor web, en lugar del m\u00e9todo predeterminado de un navegador web que carga p\u00e1ginas completamente nuevas. El objetivo es transiciones m\u00e1s r\u00e1pidas que hagan que el sitio web se sienta m\u00e1s como una aplicaci\u00f3n nativa. (Fuente: Wikipedia)</p> <p>Podemos escribir la l\u00f3gica de nuestra p\u00e1gina en Vanilla JS. Pero la complejidad de los proyectos ha hecho necesario que aparezcan varios marcos y bibliotecas de JavaScript:</p> <ul> <li>Angular</li> <li>React</li> <li>Vue</li> <li>Svelte</li> <li>Astro</li> <li>Muchos m\u00e1s y muchos m\u00e1s por venir.</li> </ul> <p></p>"},{"location":"T01/#4-lenguaje-javascript","title":"4. Lenguaje JavaScript","text":"<p>JS es un lenguaje interpretado definido como:</p> <ul> <li> <p>Orientado a objetos: JavaScript utiliza objetos para organizar y estructurar el c\u00f3digo, asociando propiedades y m\u00e9todos con datos.</p> </li> <li> <p>Imperativo: JavaScript ejecuta las instrucciones de forma secuencial para realizar tareas, enfoc\u00e1ndose en c\u00f3mo lograr resultados paso a paso.</p> </li> <li> <p>Basado en prototipos: En lugar de clases, JavaScript utiliza prototipos como plantillas para crear objetos, permitiendo que los objetos hereden propiedades y m\u00e9todos directamente de otros objetos.</p> </li> <li> <p>D\u00e9bilmente tipado: JavaScript permite tipos de variables flexibles, donde las variables pueden cambiar de tipo durante la ejecuci\u00f3n sin declaraciones expl\u00edcitas. Mucho cuidado con esto!! El nombre de la variable tendr\u00e1 que ser suficientemente explicativo como para saber qu\u00e9 hace.</p> </li> <li> <p>Tipado din\u00e1mico: Los tipos se determinan en tiempo de ejecuci\u00f3n en JavaScript, permitiendo que las variables contengan diferentes tipos de valores a medida que el programa se ejecuta, lo que mejora la flexibilidad pero requiere un manejo cuidadoso para evitar comportamientos inesperados. (Lo de antes, vamos)</p> </li> </ul> <p>Se utiliza principalmente en el lado del cliente, implementado como parte del navegador web para mejorar la interfaz web y proporcionar un comportamiento din\u00e1mico.</p> <p>Tambi\u00e9n se puede usar en el lado del servidor con node.js para crear el backend y muchas otras aplicaciones.</p> <p>RECORDATORIO</p> <ul> <li>Lenguajes compilados: Un lenguaje compilado es un lenguaje de programaci\u00f3n donde el c\u00f3digo fuente se traduce completamente a c\u00f3digo m\u00e1quina antes de la ejecuci\u00f3n, lo que generalmente resulta en un rendimiento m\u00e1s r\u00e1pido pero requiere una compilaci\u00f3n espec\u00edfica para diferentes plataformas. Ejemplos incluyen C, C++ y Rust.</li> <li>Lenguajes interpretados: Un lenguaje interpretado es un lenguaje de programaci\u00f3n donde el c\u00f3digo se ejecuta l\u00ednea por l\u00ednea mediante un int\u00e9rprete, traduciendo cada instrucci\u00f3n a c\u00f3digo m\u00e1quina una a una durante el tiempo de ejecuci\u00f3n. Este enfoque mejora la portabilidad entre diferentes sistemas, pero generalmente resulta en un rendimiento m\u00e1s lento en comparaci\u00f3n con los lenguajes compilados. Ejemplos incluyen Python, JavaScript y Ruby.</li> </ul>"},{"location":"T01/#41-versiones-de-js","title":"4.1 Versiones de JS","text":"<p>JS es un dialecto de ECMAScript y est\u00e1 definido por ese est\u00e1ndar.</p> <p>Historia:</p> <ul> <li>Fue creado por Brendan Eich para Netscape en 1995, inicialmente llamado LiveScript antes de ser renombrado a JavaScript.</li> <li>En 1997, ECMA cre\u00f3 el primer est\u00e1ndar ECMAScript.</li> <li>ECMAScript 5, ES5, lanzado en 2009, introdujo muchas mejoras y se mantuvo como un est\u00e1ndar durante muchos a\u00f1os.</li> <li>ECMAScript 6, tambi\u00e9n conocido como ES6, lanzado en 2015, introdujo mejoras importantes como el uso de clases y m\u00f3dulos. Es la versi\u00f3n m\u00e1s ampliamente soportada por todos los navegadores actuales.</li> <li>Desde ES6, se ha lanzado una nueva versi\u00f3n cada a\u00f1o. Por ejemplo, la versi\u00f3n para 2023 es ECMAScript 14. Podemos consultar la historia de versiones de ECMAScript en Wikipedia o el sitio oficial de ECMA para verificar las versiones m\u00e1s recientes de ECMAScript.</li> </ul> <p></p> <p>Fuente de la imagen: Gabriel Lebec @ Course Report</p>"},{"location":"T01/#42-typescript","title":"4.2 TypeScript","text":"<p>TypeScript es un superconjunto de JavaScript con tipado est\u00e1tico que se compila a JavaScript plano. Es desarrollado y mantenido por Microsoft. TypeScript agrega tipos est\u00e1ticos opcionales, clases e interfaces a JavaScript, proporcionando una experiencia de desarrollo robusta para construir aplicaciones a gran escala.</p> <p></p>"},{"location":"T01/#5-herramientas-para-el-desarrollo-web-frontend","title":"5. Herramientas para el desarrollo web frontend","text":""},{"location":"T01/#51-editores-de-texto","title":"5.1 Editores de texto","text":"<p>La herramienta m\u00e1s importante para programar ser\u00e1 un buen editor de texto.</p> <p>Podemos encontrar varias opciones en el mercado, desde el antiguo y confiable (pero simple) Notepad++ hasta el muy poderoso VS Code.</p> <ul> <li>Notepad++</li> <li>Sublime Text</li> <li>Atom</li> <li>VS Code</li> </ul> <p></p> <p>Usaremos el m\u00e1s extendido hoy en d\u00eda: VSCode. Este potente y \u00fatil editor de Microsoft tiene muchas caracter\u00edsticas deseables, como:</p> <ul> <li>Resaltado de sintaxis</li> <li>Multiplataforma: Para Windows, macOS y Linux</li> <li>Soporte para depuraci\u00f3n</li> <li>Control de Git integrado y integraci\u00f3n con GitHub</li> <li>Integraci\u00f3n con GitHub Copilot</li> <li>\"Snippets\" o fragmentos de c\u00f3digo reutilizables</li> <li>Una multitud de extensiones instalables</li> </ul> <p>Editores de c\u00f3digo en l\u00ednea. Tienen la ventaja de no tener que instalar y configurar herramientas en tu computadora. Son muy \u00fatiles como un sandbox (entorno controlado).</p> <ul> <li>Stackblitz</li> <li>Code Sandbox</li> <li>Code Pen</li> </ul>"},{"location":"T01/#52-navegadores-web","title":"5.2 Navegadores web","text":"<p>Los desarrolladores dependen de los navegadores no solo para ver p\u00e1ginas web, sino tambi\u00e9n para herramientas y capacidades esenciales que ayudan en el desarrollo y la depuraci\u00f3n:</p> <ul> <li>Herramientas de Desarrollo: Los navegadores modernos vienen equipados con herramientas de desarrollo (como las Herramientas de Desarrollador de Chrome, Herramientas de Desarrollador de Firefox y el Inspector Web de Safari) que proporcionan caracter\u00edsticas como:<ul> <li>Inspecci\u00f3n del DOM</li> <li>Inspecci\u00f3n de CSS</li> <li>Consola de JavaScript</li> </ul> </li> </ul> <p></p>"},{"location":"T01/#53-herramientas-de-control-de-versiones","title":"5.3 Herramientas de control de versiones","text":"<p>Las herramientas de control de versiones son sistemas de software que ayudan a gestionar los cambios en archivos, documentos o cualquier colecci\u00f3n de informaci\u00f3n a lo largo del tiempo. Son esenciales para rastrear modificaciones realizadas por individuos o equipos, facilitar la colaboraci\u00f3n y asegurar la integridad y trazabilidad del historial del proyecto. Las herramientas que utilizaremos son:</p> <ul> <li>Git: Git es un sistema de control de versiones distribuido dise\u00f1ado para velocidad y eficiencia. Permite que varios desarrolladores trabajen en el mismo proyecto simult\u00e1neamente y ofrece capacidades de ramificaci\u00f3n y fusi\u00f3n. Esta es una herramienta que necesitamos instalar en nuestra computadora: Git</li> </ul> <p></p> <ul> <li> <p>GitHub: GitHub funciona principalmente como una plataforma de alojamiento para repositorios de Git, permitiendo sincronizar nuestro proyecto local de Git con GitHub. Pero podemos ver todos los diferentes prop\u00f3sitos de esta herramienta:</p> <ol> <li> <p>Control de versiones: GitHub aloja repositorios de Git, permitiendo a los desarrolladores gestionar y rastrear cambios en su base de c\u00f3digo a lo largo del tiempo.</p> </li> <li> <p>Colaboraci\u00f3n: Facilita el trabajo en equipo al permitir que varios desarrolladores trabajen en el mismo proyecto simult\u00e1neamente, gestionen ramas y fusionen cambios.</p> </li> <li> <p>Alojamiento de c\u00f3digo: Proporciona una plataforma para que los desarrolladores alojen y compartan sus repositorios de c\u00f3digo fuente, haci\u00e9ndolos accesibles para su visualizaci\u00f3n, clonaci\u00f3n y contribuci\u00f3n.</p> </li> <li> <p>Seguimiento de problemas: Incluye un sistema de seguimiento de problemas para gestionar y resolver errores, tareas y solicitudes de caracter\u00edsticas relacionadas con proyectos.</p> </li> <li> <p>Gesti\u00f3n de proyectos: Ofrece herramientas como tableros de proyectos y hitos para organizar tareas, rastrear el progreso y priorizar elementos de trabajo entre equipos.</p> </li> <li> <p>Integraci\u00f3n CI/CD: Se integra con herramientas de CI/CD para automatizar los procesos de construcci\u00f3n, prueba y despliegue, asegurando que los cambios de c\u00f3digo sean probados y desplegados de manera eficiente.</p> </li> <li> <p>Comunidad y c\u00f3digo abierto: Fomenta una comunidad en torno al desarrollo de software de c\u00f3digo abierto, permitiendo a los usuarios descubrir, contribuir y colaborar en proyectos a nivel global.</p> </li> <li> <p>Documentaci\u00f3n: Proporciona herramientas para crear y mantener documentaci\u00f3n del proyecto, wikis y archivos README para explicar los objetivos del proyecto, instrucciones de uso y directrices de contribuci\u00f3n.</p> </li> </ol> </li> </ul> <p>DOCUMENTAR, DOCUMENTAR, DOCUMENTAR!!!</p> <ul> <li>No olvides documentar tu proyecto con un archivo README.md escrito en Markdown. Markdown es un lenguaje de marcado ligero que se usa com\u00fanmente para formatear texto en la web. Al escribir archivos README en plataformas como GitHub, Markdown proporciona una forma simple y legible de estructurar y dar estilo al texto sin necesidad de escribir HTML directamente.</li> <li>Aprende algo sobre el lenguaje Markdown </li> <li>Echa un vistazo a este ejemplo -&gt; README.md</li> <li>Las notas actuales que est\u00e1s leyendo tambi\u00e9n est\u00e1n escritas en Markdown y luego compiladas por <code>mkdocs</code> para generar una documentaci\u00f3n bonita. -&gt; README.md</li> <li>Ejemplo de sintaxis Markdown: </li> </ul> <pre><code># Nombre del Proyecto\n\nDescripci\u00f3n de tu proyecto.\n\n## Instalaci\u00f3n\n\nInstrucciones sobre c\u00f3mo instalar y ejecutar tu proyecto.\n\n## Uso\n\nEjemplos e instrucciones sobre c\u00f3mo usar tu proyecto\n\n.\n\n### Ejemplo de C\u00f3digo\n\n```javascript\nconsole.log('\u00a1Hola, Mundo!');\n</code></pre>"},{"location":"T01/#54-gestores-de-paquetes","title":"5.4 Gestores de Paquetes","text":"<p>Los gestores de paquetes nos ayudan a instalar diversas utilidades, caracter\u00edsticas y frameworks. Facilitan el proceso de agregar, actualizar y gestionar paquetes de software, asegurando que tengamos las dependencias y herramientas necesarias para desarrollar y ejecutar nuestras aplicaciones de manera eficiente. Ejemplos populares son pip para Python y npm para JavaScript. En nuestro caso, para JavaScript, las dos opciones principales son:</p> <ul> <li> <p>npm (Node Package Manager) es el gestor de paquetes predeterminado para Node.js. Ayuda a los desarrolladores a instalar, compartir y gestionar bibliotecas y dependencias de JavaScript para sus proyectos. Tambi\u00e9n proporciona un registro donde los desarrolladores pueden publicar sus propios paquetes.</p> </li> <li> <p>Yarn es un gestor de paquetes alternativo para JavaScript que se enfoca en la velocidad, seguridad y fiabilidad. Desarrollado por Facebook, Yarn utiliza un archivo de bloqueo para garantizar instalaciones consistentes en diferentes entornos y optimiza el proceso de instalaci\u00f3n y actualizaci\u00f3n de dependencias.</p> </li> </ul> <p></p>"},{"location":"T01/#55-linters-transpiladores-y-bundlers","title":"5.5 Linters, Transpiladores y Bundlers","text":"<p>Linters son herramientas que analizan tu c\u00f3digo para encontrar y corregir errores de programaci\u00f3n, fallos, errores de estilo y otros patrones problem\u00e1ticos. Ayudan a hacer cumplir los est\u00e1ndares de codificaci\u00f3n y mejorar la calidad del c\u00f3digo. Ejemplos incluyen:</p> <ul> <li>ESLint: Un linter popular para JavaScript y TypeScript que ayuda a identificar y corregir problemas en tu c\u00f3digo.</li> <li>JSHint: Otro linter de JavaScript que detecta errores y problemas potenciales en tu c\u00f3digo.</li> </ul> <p></p> <p>Transpiladores son herramientas que convierten c\u00f3digo escrito en un lenguaje o versi\u00f3n de programaci\u00f3n a otro. A menudo se utilizan para traducir JavaScript moderno (ES6+) a versiones m\u00e1s antiguas que sean compatibles con todos los navegadores. Ejemplos incluyen:</p> <ul> <li>Babel: Un transpilador de JavaScript ampliamente utilizado que convierte c\u00f3digo ES6+ en ES5, haci\u00e9ndolo compatible con navegadores m\u00e1s antiguos.</li> <li>TypeScript Compiler (tsc): Convierte c\u00f3digo TypeScript en JavaScript, permitiendo a los desarrolladores usar las caracter\u00edsticas de verificaci\u00f3n de tipos de TypeScript mientras despliegan JavaScript.</li> <li>Sass: Un lenguaje de preprocesador de scripts que se interpreta o compila en CSS, facilitando la escritura y mantenimiento de estilos.</li> </ul> <p></p> <p>Bundlers son herramientas que combinan varios archivos y m\u00f3dulos en un solo archivo (o unos pocos archivos) para una distribuci\u00f3n y despliegue m\u00e1s sencillos. Manejan las dependencias, optimizan el c\u00f3digo y, a menudo, incluyen caracter\u00edsticas como la divisi\u00f3n de c\u00f3digo y la minificaci\u00f3n. Ejemplos incluyen:</p> <ul> <li>Webpack: Un potente bundler de m\u00f3dulos para aplicaciones de JavaScript que procesa y combina varios activos como JavaScript, CSS e im\u00e1genes.</li> <li>Parcel: Un bundler de aplicaciones web r\u00e1pido y sin configuraci\u00f3n que funciona directamente sin necesidad de configuraci\u00f3n.</li> <li>Rollup: Un bundler de m\u00f3dulos para JavaScript que compila peque\u00f1os fragmentos de c\u00f3digo en algo m\u00e1s grande y complejo, a menudo utilizado para construir bibliotecas.</li> </ul> <p></p> <p>Estas herramientas son esenciales en el desarrollo web moderno, ayudando a mantener la calidad del c\u00f3digo, garantizar la compatibilidad en diferentes entornos y optimizar el resultado final para un mejor rendimiento.</p>"},{"location":"T01/#56-bibliotecas-y-frameworks","title":"5.6 Bibliotecas y Frameworks","text":"<p>Bibliotecas y frameworks ampl\u00edan las capacidades y simplifican el uso de JavaScript (JS) o CSS. Proporcionan c\u00f3digo preescrito para realizar tareas comunes, ayudando a los desarrolladores a construir aplicaciones de manera m\u00e1s eficiente y con menos errores.</p> <ul> <li>Bootstrap: Un framework de CSS que simplifica la creaci\u00f3n de elementos de interfaz web.</li> <li>jQuery: Una biblioteca de JavaScript que facilita el uso de JS y mejora la compatibilidad. Un poco anticuada y innecesaria, pero a\u00fan se utiliza en sitios web heredados.</li> </ul>"},{"location":"T01/#frameworks","title":"Frameworks","text":"<ul> <li>Angular: Un framework de JS creado por Google que facilita la creaci\u00f3n de Aplicaciones de P\u00e1gina \u00danica (SPA) y sigue el patr\u00f3n MVC (Modelo-Vista-Controlador). Es ampliamente utilizado y tiene una gran comunidad.</li> <li>Vue.js: Un framework de JS de c\u00f3digo abierto tambi\u00e9n dise\u00f1ado para crear SPAs.</li> <li>React: Una biblioteca de JS de c\u00f3digo abierto creada por Facebook. Se utiliza principalmente para definir la capa de Vista, aunque puede funcionar con extensiones para definir m\u00e1s partes de la arquitectura de la aplicaci\u00f3n. Tambi\u00e9n se utiliza para crear SPAs.</li> </ul> <p>Algunos otros memes :) Meme de la guerra de frameworks - Meme de jQuery</p>  Ejercicio Pr\u00e1ctico 1.1 <p>Consulta Estado del Arte de Javascript y comenta. (Est\u00e1 en ingl\u00e9s, pero por suerte o desgracia, en inform\u00e1tica todo se escribe en ingl\u00e9s)</p> <p>Investiga diferentes frameworks y selecciona uno que utilizar\u00edas para construir una Aplicaci\u00f3n de P\u00e1gina \u00danica (SPA). Explica las razones que te convencieron.</p>"},{"location":"T01/#6-incluir-codigo-javascript","title":"6. Incluir C\u00f3digo JavaScript","text":"<p>Tenemos varias formas de incluir c\u00f3digo JavaScript en nuestra p\u00e1gina web:</p> <ol> <li> <p>JavaScript Interno</p> <p>Puedes incluir JavaScript dentro de la secci\u00f3n <code>&lt;head&gt;</code> o <code>&lt;body&gt;</code> de tu archivo HTML usando la etiqueta <code>&lt;script&gt;</code>. Si deseas asegurarte de que el c\u00f3digo se ejecute una vez que se haya analizado todo el documento, se recomienda incluir esta etiqueta al final de <code>&lt;body&gt;</code>.</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"es\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\n    &lt;title&gt;Ejemplo de JavaScript Interno&lt;/title&gt;\n\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;h1&gt;Ejemplo de JavaScript Interno&lt;/h1&gt;\n    &lt;script&gt;\n        alert(\"\u00a1Hola, Mundo!\");       \n    &lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> </li> <li> <p>JavaScript Externo</p> <p>Puedes incluir JavaScript desde un archivo externo usando la etiqueta <code>&lt;script&gt;</code> con el atributo <code>src</code>. Al igual que con el JavaScript interno, la posici\u00f3n de la etiqueta <code>&lt;script&gt;</code> dentro del documento HTML es importante.</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"es\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\n    &lt;title&gt;Ejemplo de JavaScript Externo&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;h1&gt;Ejemplo de JavaScript Externo&lt;/h1&gt;\n    &lt;script src=\"script.js\"&gt;&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>script.js: <pre><code>alert(\"\u00a1Hola, Mundo!\");\nconsole.log(\"\u00a1Hola Mundo!!!\")\n</code></pre></p> </li> <li> <p>Atributos Defer y Async     Puedes usar los atributos <code>defer</code> o <code>async</code> en la etiqueta <code>&lt;script&gt;</code> para controlar el comportamiento de carga de tu JavaScript.</p> <ul> <li><code>defer</code>: El script se ejecutar\u00e1 despu\u00e9s de que el HTML se haya analizado completamente. Esto nos a\u00f1ade dos ventajas: por una parte, la carga de la p\u00e1gina no se queda 'parada' proque haya que cargar un script 'gordo' (que los hay, de hecho es lo m\u00e1s com\u00fan); y dos, cuando el script se ejecuta es seguro que toda la p\u00e1gina (con los objetos correspondientes a las etiquetas) est\u00e1 cargada y son accesibles al script. El uso de <code>defer</code> nos da m\u00e1s control sobre la ejecuci\u00f3n de los scripts porque <code>defer</code> mantiene el orden de ejecuci\u00f3n si tienes m\u00faltiples scripts.</li> <li><code>async</code>: El script se ejecutar\u00e1 de manera as\u00edncrona tan pronto como est\u00e9 disponible. Se ejecuta a su \"bola\", y si hay varios scripts marcados con <code>async</code>, se van a ejecutar todos en hilos (procesos) independientes al proceso de carga de la p\u00e1gina principal.</li> </ul> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"es\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\n    &lt;title&gt;Ejemplo de Defer y Async&lt;/title&gt;\n    &lt;script src=\"defer-script.js\" defer&gt;&lt;/script&gt;\n    &lt;script src=\"async-script.js\" async&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;h1&gt;Ejemplo de Defer y Async&lt;/h1&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>defer-script.js</p> <pre><code>console.log(\"Script Defer Cargado\");\n</code></pre> <p>async-script.js</p> <pre><code>console.log(\"Script Async Cargado\");\n</code></pre> <p>La alternativa sin usar estos atributos, es poner los scripts justo antes de la etiqueta de cierre del  <code>&lt;/body&gt;</code>.</p> <pre><code>&lt;body&gt;\n     ...todo el contenido est\u00e1 arriba del script...\n\n     &lt;script src=\"./miscript.js\"&gt;&lt;/script&gt;\n&lt;/body&gt;\n</code></pre> <p>Colocar tus etiquetas de script justo antes de la etiqueta de cierre <code>&lt;/body&gt;</code> asegura que el script se ejecute despu\u00e9s de que se haya analizado el HTML. Sin embargo, esto no garantiza inherentemente el orden de ejecuci\u00f3n si tienes m\u00faltiples scripts y comportamiento as\u00edncrono. </p> <p>Aun as\u00ed, en nuestro caso, cualquiera de las dos opciones es v\u00e1lida para preservar la ejecuci\u00f3n del script una vez que el documento HTML est\u00e9 totalmente analizado.</p> </li> <li> <p>Manejadores de Eventos en Atributos HTML</p> <p>Puedes incluir JavaScript directamente dentro de los atributos HTML, como <code>onclick</code>, <code>onload</code>, etc. No es una buena pr\u00e1ctica, solo en algunos casos espec\u00edficos.</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"es\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\n    &lt;title&gt;Ejemplo de Manejadores de Eventos&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;h1&gt;Ejemplo de Manejadores de Eventos&lt;/h1&gt;\n    &lt;button onclick=\"alert('\u00a1Hola, Mundo!')\"&gt;Haz Clic Aqu\u00ed&lt;/button&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> </li> </ol>"},{"location":"T01/#7-bootstrap","title":"7. Bootstrap","text":""},{"location":"T01/#que-es-bootstrap","title":"\u00bfQu\u00e9 es Bootstrap?","text":"<p>Bootstrap es un popular framework de c\u00f3digo abierto para el desarrollo de sitios web responsivos y orientados a m\u00f3viles. Proporciona una colecci\u00f3n de componentes de CSS y JavaScript que te ayudan a dise\u00f1ar y construir interfaces de usuario de manera r\u00e1pida y eficiente. Bootstrap est\u00e1 dise\u00f1ado para simplificar el proceso de creaci\u00f3n de dise\u00f1os consistentes y visualmente atractivos en diferentes dispositivos y tama\u00f1os de pantalla.</p>"},{"location":"T01/#caracteristicas-clave","title":"Caracter\u00edsticas Clave:","text":"<ul> <li>Sistema de Cuadr\u00edcula Responsiva: Ajusta autom\u00e1ticamente el dise\u00f1o seg\u00fan el tama\u00f1o de la pantalla, asegurando que tu sitio web se vea bien en todos los dispositivos.</li> <li>Componentes Pre-estilizados: Incluye una amplia gama de componentes listos para usar, como botones, formularios, barras de navegaci\u00f3n y modales.</li> <li>Personalizable: Permite la personalizaci\u00f3n de componentes y estilos utilizando variables y temas.</li> <li>Plugins de JavaScript: Viene con plugins de JavaScript integrados para funcionalidad adicional, como carruseles, tooltips y modales.</li> </ul>"},{"location":"T01/#como-usar-bootstrap","title":"C\u00f3mo Usar Bootstrap:","text":"<ol> <li>Formas de Incluir Bootstrap en Tu Proyecto:<ul> <li>Descargar Bootstrap: Puedes descargar los archivos compilados de Bootstrap manualmente y agregarlos a tu archivo HTML.</li> <li>A trav\u00e9s de CDN: Puedes agregar los enlaces de CDN a los archivos CSS y de scripts en el archivo HTML sin descargarlos.</li> <li>Instalar dependencias: Puedes instalar las dependencias en el proyecto con <code>npm i bootstrap@5.3.3</code>. En este caso, el gestor de paquetes de Node mantiene el control de los archivos.</li> <li>Usar Snippet de Bootstrap: Puedes usar, por ejemplo, el snippet <code>bs5-$</code> en el editor VSCode. La plantilla Bs5 escribir\u00e1 todos los enlaces de CDN por ti.</li> </ul> </li> </ol> <p>Obt\u00e9n m\u00e1s informaci\u00f3n en: getbootstrap.com.</p> <ol> <li> <p>Usar Componentes de Bootstrap:</p> <ul> <li>Sistema de Cuadr\u00edcula: Crea dise\u00f1os responsivos utilizando el sistema de cuadr\u00edcula de Bootstrap. Por ejemplo:  <pre><code>&lt;div class=\"container\"&gt;\n    &lt;div class=\"row\"&gt;\n        &lt;div class=\"col-md-6\"&gt;Columna 1&lt;/div&gt;\n        &lt;div class=\"col-md-6\"&gt;Columna 2&lt;/div&gt;\n    &lt;/div&gt;\n&lt;/div&gt;\n</code></pre></li> <li>Componentes: Utiliza componentes pre-estilizados como botones, formularios y barras de navegaci\u00f3n:  <pre><code>&lt;button type=\"button\" class=\"btn btn-primary\"&gt;Bot\u00f3n Primario&lt;/button&gt;\n</code></pre></li> </ul> </li> <li> <p>Personalizar Bootstrap:</p> <ul> <li>Sobrescribir Predeterminados: Personaliza los estilos de Bootstrap agregando tus propias reglas CSS despu\u00e9s del enlace CSS de Bootstrap en tu HTML.</li> <li>Usar las Herramientas de Personalizaci\u00f3n de Bootstrap: Modifica las variables de Bootstrap y recompila el CSS si est\u00e1s utilizando una herramienta de construcci\u00f3n.</li> </ul> </li> <li> <p>Usar Snippets de B5 en Visual Studio Code:</p> <ul> <li>Instalar la Extensi\u00f3n Bootstrap 5 Quick Snippets: Para agilizar tu proceso de desarrollo, instala la extensi\u00f3n Bootstrap 5 Quick Snippets para Visual Studio Code. Esta extensi\u00f3n proporciona fragmentos de c\u00f3digo para Bootstrap 5, permiti\u00e9ndote insertar r\u00e1pidamente componentes y clases de Bootstrap en tu c\u00f3digo.</li> <li>Usar Snippets: Una vez instalada, puedes usar los snippets para insertar c\u00f3digo de Bootstrap. Por ejemplo:</li> <li>Escribe <code>bs5-$</code> y presiona <code>Tab</code> para crear la plantilla completa del documento HTML.</li> <li>Escribe <code>bs5-navbar-default</code> y presiona <code>Tab</code> para insertar un snippet de barra de navegaci\u00f3n de Bootstrap.</li> <li>Escribe <code>bs5-button-default</code> y presiona <code>Tab</code> para insertar un snippet de bot\u00f3n predeterminado de Bootstrap.</li> </ul> </li> </ol>"},{"location":"T01/#recursos","title":"Recursos:","text":"<ul> <li>Documentaci\u00f3n Oficial: Documentaci\u00f3n de Bootstrap</li> <li>Ejemplos y Plantillas: Explora varios ejemplos y plantillas de Bootstrap para comenzar r\u00e1pidamente.</li> <li>Snippets de B4 para VSCode: Extensi\u00f3n B5 Quick Snippets</li> </ul>"},{"location":"T02/","title":"UNIDAD 2 - Fundamentos de JavaScript","text":""},{"location":"T02/#1-sintaxis-general-de-javascript","title":"1. Sintaxis General de JavaScript","text":""},{"location":"T02/#sintaxis-de-ecmascript","title":"Sintaxis de ECMAScript","text":"<p>JavaScript, tambi\u00e9n conocido como ECMAScript, tiene una sintaxis similar a lenguajes como C++ y Java.</p>"},{"location":"T02/#comentarios-de-una-sola-linea","title":"Comentarios de una sola l\u00ednea","text":"<p>Usa <code>//</code> para escribir comentarios en una sola l\u00ednea.</p> <pre><code>// Esto es un comentario de una sola l\u00ednea\n</code></pre>"},{"location":"T02/#comentarios-de-varias-lineas","title":"Comentarios de varias l\u00edneas","text":"<p>Usa <code>/* ... */</code> para escribir comentarios que abarquen varias l\u00edneas. <pre><code>/* Esto es \nun comentario\nmultil\u00ednea\n*/\n</code></pre></p>"},{"location":"T02/#puntos-y-comas","title":"Puntos y comas","text":"<p>El punto y coma (<code>;</code>) al final de una l\u00ednea es opcional, pero se recomienda para evitar posibles problemas durante la ejecuci\u00f3n del c\u00f3digo.</p> <pre><code>let x = 5;  // Se recomienda el punto y coma\n</code></pre>"},{"location":"T02/#palabras-reservadas","title":"Palabras reservadas","text":"<p>No utilices palabras clave reservadas para nombres de variables, ya que tienen un significado especial en el lenguaje. <pre><code>// Incorrecto\nlet for = 10;  // 'for' es una palabra reservada\n\n// Correcto\nlet count = 10;\n</code></pre></p> <p>Lista de palabras reservadas: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Lexical_grammar#reserved_words</p>"},{"location":"T02/#tipado-debil","title":"Tipado d\u00e9bil","text":"<p>JavaScript es un lenguaje de tipado d\u00e9bil, lo que significa que no necesitas declarar expl\u00edcitamente los tipos de datos. <pre><code>let variable = 10;   // No es necesario declarar el tipo, es un n\u00famero\nvariable = \"texto\";   // Ahora es una cadena\n</code></pre></p> <p>Gram\u00e1tica l\u00e9xica: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Lexical_grammar</p>"},{"location":"T02/#2-mensajes-en-consola-y-alertas-en-el-navegador","title":"2. Mensajes en consola y alertas en el navegador","text":""},{"location":"T02/#21-consola-de-depuracion","title":"2.1 Consola de depuraci\u00f3n","text":"<p>Podemos ver la consola en el navegador seleccionando la opci\u00f3n \"Inspeccionar\". Ya dependiendo del navegador habr\u00e1 uno u otros atajos de teclado. En Chrome se abre <code>Ctrl</code>+<code>mayus</code>+<code>i</code>, o con <code>click derecho</code>+<code>inspeccionar</code>, o con <code>F10</code>. Si tienes un navegador distinto, te toca investigar. Podemos interactuar con el objeto de consola del sistema invocando sus m\u00e9todos.</p> <pre><code>console.log('\u00a1Hola Mundo!');           // mensaje general\nconsole.info('Este es un mensaje informativo'); // mensaje informativo\nconsole.warn('\u00a1Ten cuidado!');            // mensaje de advertencia\nconsole.error('Error fatal');           // mensaje de error\n</code></pre>"},{"location":"T02/#declaracion-debugger","title":"Declaraci\u00f3n <code>debugger</code>","text":"<p>La declaraci\u00f3n <code>debugger</code> se puede utilizar para pausar la ejecuci\u00f3n de un script con fines de depuraci\u00f3n.</p> <p>Usando la declaraci\u00f3n <code>debugger</code>, puedes pausar la ejecuci\u00f3n del c\u00f3digo en un punto espec\u00edfico para inspeccionar el estado actual de las variables y la pila de llamadas.</p> <p><pre><code>function add(a, b) {\n    debugger;  // La ejecuci\u00f3n se detendr\u00e1 aqu\u00ed \n                //si las herramientas de desarrollo est\u00e1n abiertas\n    return a + b;\n}\nadd(2, 3);\n</code></pre> Cuando la ejecuci\u00f3n del c\u00f3digo alcanza la declaraci\u00f3n <code>debugger</code>, se pausar\u00e1, permiti\u00e9ndote usar las herramientas de desarrollo del navegador para inspeccionar el estado actual y depurar tu c\u00f3digo de manera efectiva.</p>"},{"location":"T02/#22-alertas-prompt-y-confirmaciones","title":"2.2 Alertas, Prompt y Confirmaciones","text":"<p>Estos m\u00e9todos se utilizan para mostrar alertas en el navegador, solicitar datos y confirmar acciones con un cuadro de di\u00e1logo de OK/Cancelar.</p>"},{"location":"T02/#alert","title":"alert()","text":"<p>El m\u00e9todo <code>alert()</code> muestra un cuadro de alerta con un mensaje especificado y un bot\u00f3n OK.</p> <pre><code>alert(\"\u00a1Este es un mensaje de alerta!\");\n</code></pre>"},{"location":"T02/#prompt","title":"prompt()","text":"<p>El m\u00e9todo <code>prompt()</code> muestra un cuadro de di\u00e1logo con un mensaje solicitando al usuario que ingrese alg\u00fan texto. Devuelve el texto ingresado por el usuario o <code>null</code> si el usuario presion\u00f3 Cancelar.</p> <pre><code>let userInput = prompt(\"Por favor, introduce tu nombre:\");\nconsole.log(\"El usuario ingres\u00f3: \" + userInput);\n</code></pre>"},{"location":"T02/#confirm","title":"confirm()","text":"<p>El m\u00e9todo <code>confirm()</code> muestra un cuadro de di\u00e1logo con un mensaje especificado, junto con un bot\u00f3n OK y un bot\u00f3n Cancelar. Devuelve <code>true</code> si el usuario presion\u00f3 OK, y <code>false</code> si presion\u00f3 Cancelar.</p> <pre><code>let userConfirmed = confirm(\"\u00bfRealmente deseas eliminar este elemento?\");\nif (userConfirmed) {\n    console.log(\"El usuario confirm\u00f3 la acci\u00f3n.\");\n} else {\n    console.log(\"El usuario cancel\u00f3 la acci\u00f3n.\");\n}\n</code></pre>"},{"location":"T02/#mejores-practicas","title":"Mejores Pr\u00e1cticas","text":"<p>Debemos intentar evitar el uso de estos m\u00e9todos siempre que sea posible. Interrumpen la experiencia del usuario y generalmente se consideran una mala pr\u00e1ctica en el desarrollo web moderno. Los utilizaremos por ahora, ya que a\u00fan no conocemos otras formas de comunicaci\u00f3n din\u00e1mica con el usuario.</p>"},{"location":"T02/#3-declaracion-de-variables","title":"3. Declaraci\u00f3n de variables","text":"<p>Podemos declarar variables de tres maneras:</p>"},{"location":"T02/#var","title":"var","text":"<p>La forma tradicional de declarar una variable. No se recomienda hoy en d\u00eda. </p> <p>Las variables declaradas con <code>var</code> dentro de una funci\u00f3n son de \u00e1mbito de funci\u00f3n, lo que significa que son accesibles a lo largo de la funci\u00f3n en la que se declaran, pero no fuera de ella.</p> <p><code>var</code> crear\u00e1 variables de \u00e1mbito global cuando se declaren fuera de una funci\u00f3n o en el \u00e1mbito global.</p> <pre><code>var globalVar = \"Soy accesible desde cualquier lugar en el script\";\nfunction testVar() {\n    var functionVar = \"Soy accesible solo dentro de esta funci\u00f3n\";\n    console.log(globalVar);  // Muestra: Soy accesible desde cualquier lugar en el script\n    console.log(functionVar);  // Muestra: Soy accesible solo dentro de esta funci\u00f3n\n}\nconsole.log(globalVar);  // Muestra: Soy accesible desde cualquier lugar en el script\n// console.log(functionVar);  // Error de referencia no capturado: functionVar no est\u00e1 definida\n</code></pre>"},{"location":"T02/#let","title":"let","text":"<p>Una variable que solo es accesible dentro del bloque, sentencia o expresi\u00f3n donde se declara. <code>let</code> tiene \u00e1mbito de bloque.</p> <pre><code>function testLet() {\n    let blockVar = \"Soy accesible solo dentro de este bloque\";\n    if (true) {\n        let innerBlockVar = \"Soy accesible solo dentro de este bloque interno\";\n        console.log(blockVar);  // Muestra: Soy accesible solo dentro de este bloque\n        console.log(innerBlockVar);  // Muestra: Soy accesible solo dentro de este bloque interno\n    }\n    console.log(blockVar);  // Muestra: Soy accesible solo dentro de este bloque\n    // console.log(innerBlockVar);  // Error de referencia no capturado: innerBlockVar no est\u00e1 definida\n}\n</code></pre>"},{"location":"T02/#const","title":"const","text":"<p>Una constante que solo es accesible dentro del bloque, sentencia o expresi\u00f3n donde se declara. Las constantes no se pueden reasignar despu\u00e9s de su declaraci\u00f3n inicial. <code>const</code> tiene \u00e1mbito de bloque.</p> <pre><code>function testConst() {\n    const constantVar = \"Soy una constante dentro de este bloque\";\n    if (true) {\n        const innerConstantVar = \"Soy una constante dentro de este bloque interno\";\n        console.log(constantVar);  // Muestra: Soy una constante dentro de este bloque\n        console.log(innerConstantVar);  // Muestra: Soy una constante dentro de este bloque interno\n    }\n    console.log(constantVar);  // Muestra: Soy una constante dentro de este bloque\n    // console.log(innerConstantVar);  // Error de referencia no capturado: innerConstantVar no est\u00e1 definida\n    // constantVar = \"Nuevo valor\";  // Error de tipo no capturado: Asignaci\u00f3n a una variable constante.\n}\n</code></pre>"},{"location":"T02/#mejores-practicas_1","title":"Mejores Pr\u00e1cticas","text":"<p>Se recomienda usar <code>let</code> o <code>const</code> dependiendo de si el valor de la variable debe cambiar o no.</p> <ul> <li>Usa <code>let</code> para variables que cambiar\u00e1n.</li> <li>Usa <code>const</code> para variables que no deben cambiar.</li> </ul> <pre><code>let variableMutable = \"Puedo cambiar\";\nvariableMutable = \"He cambiado\";\n\nconst variableInmutable = \"No puedo cambiar\";\n// variableInmutable = \"Intentando cambiar\";  // Error de tipo no capturado: Asignaci\u00f3n a una variable constante.\n</code></pre>"},{"location":"T02/#4-tipos-de-datos-primitivos","title":"4. Tipos de Datos Primitivos","text":"<p>JavaScript tiene varios tipos de datos primitivos:</p> <ul> <li> <p>Number (N\u00famero): Representa tanto n\u00fameros enteros como n\u00fameros de punto flotante.</p> </li> <li> <p>String (Cadena): Representa una secuencia de caracteres (texto).</p> </li> <li> <p>Boolean (Booleano): Representa una entidad l\u00f3gica y puede tener dos valores: <code>true</code> o <code>false</code>.</p> </li> <li> <p>Undefined (Indefinido): Indica que una variable ha sido declarada pero a\u00fan no se le ha asignado un valor.</p> </li> <li> <p>Null (Nulo): Representa la ausencia intencional de cualquier valor de objeto. Es uno de los valores primitivos de JavaScript y se trata como un valor \"falso\" en operaciones booleanas.</p> </li> </ul>"},{"location":"T02/#nota","title":"Nota:","text":"<ul> <li>Undefined: <code>undefined</code> significa que una variable ha sido declarada pero a\u00fan no se le ha asignado un valor.</li> <li>Null: <code>null</code> es un valor asignado. Puede ser asignado a una variable como representaci\u00f3n de la ausencia de valor.</li> </ul> <p>Estos son los bloques de construcci\u00f3n b\u00e1sicos de los datos en JavaScript. Entender y usar estos tipos de datos correctamente es crucial para programar de manera efectiva en JavaScript.</p>"},{"location":"T02/#41-tipo-numero","title":"4.1 Tipo N\u00famero","text":"<p>En JavaScript, el tipo de datos <code>number</code> representa tanto n\u00fameros enteros como n\u00fameros de punto flotante.</p>"},{"location":"T02/#caracteristicas-de-los-numeros","title":"Caracter\u00edsticas de los N\u00fameros","text":"<ul> <li>N\u00fameros Positivos o Negativos:</li> </ul> <pre><code>let numeroPositivo = 4;\nlet numeroNegativo = -30;\n</code></pre> <ul> <li>N\u00fameros con o sin decimales</li> </ul> <pre><code>let entero = 34;\nlet puntoFlotante = 34.4;\nlet cero = 0;\nlet flotanteNegativo = -9.45;\nlet numeroGrande = 150000000;\n</code></pre>"},{"location":"T02/#operaciones-aritmeticas","title":"Operaciones Aritm\u00e9ticas","text":"<p>Puedes realizar varias operaciones aritm\u00e9ticas con n\u00fameros:</p> <ul> <li>Adici\u00f3n <code>+</code></li> <li>Sustracci\u00f3n <code>-</code></li> <li>Multiplicaci\u00f3n <code>*</code></li> <li>Divisi\u00f3n <code>/</code></li> <li>M\u00f3dulo <code>%</code>: Devuelve el resto de una divisi\u00f3n.</li> <li>Exponenciaci\u00f3n <code>**</code>: Eleva el primer operando a la potencia del segundo operando.</li> <li>Incremento <code>++</code>: Aumenta el valor de una variable en 1.</li> <li>Decremento <code>--</code>: Disminuye el valor de una variable en 1.</li> </ul> <pre><code>let suma = 4 + 5;  // 9\nlet resta = 10 - 3;  // 7\nlet producto = 4 * 3;  // 12\nlet cociente = 12 / 4;  // 3\n\nlet potencia = 2 ** 3;  // 8\n\nlet contador = 0;\ncontador++;  // el contador ahora es 1\n\ncontador--;  // el contador ahora es 0\n</code></pre>"},{"location":"T02/#operaciones-de-comparacion","title":"Operaciones de Comparaci\u00f3n","text":"<p>Tambi\u00e9n puedes comparar n\u00fameros utilizando varios operadores de comparaci\u00f3n:</p> <ul> <li>Menor que <code>&lt;</code></li> <li>Mayor que <code>&gt;</code></li> <li>Menor o igual que <code>&lt;=</code></li> <li>Mayor o igual que <code>&gt;=</code></li> <li>Igual a <code>==</code></li> <li>Estrictamente igual a <code>===</code></li> <li>Distinto de <code>!=</code></li> <li>Estrictamente distinto de <code>!==</code></li> </ul> <p><pre><code>let esMenorQue = 5 &lt; 10;  // true\nlet esMayorQue = 10 &gt; 5;  // true\nlet esMenorOIgualQue = 5 &lt;= 5;  // true\nlet esMayorOIgualQue = 10 &gt;= 10;  // true\nlet esIgual = 5 == '5';  // true (coerci\u00f3n de tipos)\nlet esEstrictamenteIgual = 5 === 5;  // true\nlet esEstrictamenteIgualConTiposDiferentes = 5 === '5';  // false (sin coerci\u00f3n de tipos)\nlet esDistinto = 5 != '5';  // false (coerci\u00f3n de tipos)\nlet esEstrictamenteDistinto = 5 !== '5';  // true (sin coerci\u00f3n de tipos)\n</code></pre> La \"coerci\u00f3n de tipos\" fuerza la conversi\u00f3n y comparaci\u00f3n del contenido de los operandos, cuando son de tipos distintos. --&gt; Comparaciones de igualdad y semejanza</p>"},{"location":"T02/#metodos-adicionales-para-numeros-en-el-objeto-math","title":"M\u00e9todos Adicionales para N\u00fameros en el Objeto Math","text":"<p>JavaScript tambi\u00e9n proporciona varios m\u00e9todos incorporados para trabajar con n\u00fameros a trav\u00e9s del Objeto Math.</p>  Ejercicio Pr\u00e1ctico 2a <p>En JavaScript no hay un operador para calcular la divisi\u00f3n entera. \u00bfPuedes implementar una forma de obtener esta operaci\u00f3n utilizando las operaciones enumeradas arriba?</p> <p>Ejemplos:</p> <ul> <li>10 // 3 = 3</li> <li>13 // -3 = -4</li> </ul>"},{"location":"T02/#mas-sobre-el-tipo-numero","title":"M\u00e1s sobre el tipo n\u00famero","text":"<ul> <li><code>typeof</code>: Tipo de la variable</li> <li><code>NaN</code>: Not-a-Number (No es un n\u00famero)</li> <li><code>isNaN()</code>: Comprueba si el valor es NaN</li> <li><code>.toString()</code>: Convierte un n\u00famero a cadena</li> <li><code>.toFixed()</code>: Formatea un n\u00famero a un n\u00famero fijo de decimales</li> </ul> <pre><code>// Tipo de la variable\nlet tipoDeNumero = typeof 123;  // 'number'\nlet tipoDeCadena = typeof '123';  // 'string'\n\n// NaN (No es un n\u00famero)\nlet noEsUnNumero = NaN;\nlet chequeoNaN1 = isNaN(123);  // false\nlet chequeoNaN2 = isNaN(NaN);  // true\nlet chequeoNaN3 = isNaN('Hola');  // true\n\n// Convertir n\u00famero a cadena\nlet numeroACadena = (123).toString();  // '123'\n\n// Formatear n\u00famero a decimales fijos\nlet decimalFijo = (123.456).toFixed(2);  // '123.46'\n</code></pre>"},{"location":"T02/#42-tipo-cadena","title":"4.2 Tipo Cadena","text":"<p>En JavaScript, el tipo de datos <code>string</code> se utiliza para representar datos textuales.</p>"},{"location":"T02/#caracteristicas-de-las-cadenas","title":"Caracter\u00edsticas de las Cadenas","text":"<ul> <li>Cadenas: Una secuencia de caracteres encerrada entre comillas.</li> <li>Comillas dobles: <code>\"Hola mundo\"</code></li> <li>Comillas simples: <code>'Hola mundo'</code></li> </ul>"},{"location":"T02/#operaciones-con-cadenas","title":"Operaciones con Cadenas","text":"<ul> <li>Concatenaci\u00f3n: Combinar m\u00faltiples cadenas en una sola.<ul> <li>Ejemplo: <code>cadena = 'Hola' + ' mundo'</code> da como resultado <code>'Hola mundo'</code></li> </ul> </li> <li>Operaciones de Comparaci\u00f3n: Comparar cadenas.<ul> <li>Igual a (<code>==</code>)</li> <li>Estrictamente igual a (<code>===</code>)</li> <li>Distinto de (<code>!=</code>)</li> </ul> </li> <li>Otros M\u00e9todos \u00datiles: Se pueden encontrar en el Objeto String</li> </ul> <pre><code>// Caracter\u00edsticas de las cadenas\nlet cadena1 = \"Hola mundo\";\nlet cadena2 = 'Hola mundo';\n\n// Concatenaci\u00f3n\nlet saludo = 'Hola' + ' mundo';  // 'Hola mundo'\n\n// Operaciones de Comparaci\u00f3n\nlet esIgual = 'Hola' == 'Hola';  // true\nlet esEstrictamenteIgual = 'Hola' === 'Hola';  // true\nlet esEstrictamenteIgual2 = '123' === 132;  // false\nlet esDistinto = 'Hola' != 'Mundo';  // true\n\n// Otros m\u00e9todos \u00fatiles\nlet longitudDeCadena = saludo.length;  // 10\nlet enMayusculas = saludo.toUpperCase();  // 'HOLA MUNDO'\nlet enMinusculas = saludo.toLowerCase();  // 'hola mundo'\nlet incluyePalabra = saludo.includes('mundo');  // true\nlet dividirCadena = saludo.split(' ');  // ['Hola', 'mundo']\nlet subCadena = saludo.substring(1, 4);  // 'ola'  substring(inicio, fin+1)\nlet caracterEn = saludo.charAt(1);  // 'o'\nlet indiceDelCaracter = saludo.indexOf('m');  // 5\nlet cadenaReemplazada = saludo.replace('mundo', 'todos');  // 'Hola todos'\nlet cadenaRecortada = '   Hola mundo   '.trim();  // 'Hola mundo'\n</code></pre>"},{"location":"T02/#literales-de-plantilla","title":"Literales de Plantilla","text":"<p>Los literales de plantilla, tambi\u00e9n conocidos como cadenas de plantilla, son una caracter\u00edstica de JavaScript que permite la interpolaci\u00f3n de expresiones y la creaci\u00f3n de cadenas en varias l\u00edneas. Se encierran entre comillas invertidas (<code>`</code>) en lugar de comillas simples o dobles.</p> <pre><code>let texto = `\u00a1Hola, mundo!`;\n</code></pre>"},{"location":"T02/#caracteristicas-de-los-literales-de-plantilla","title":"Caracter\u00edsticas de los Literales de Plantilla","text":"<ol> <li>Interpolaci\u00f3n de Cadenas: Insertar expresiones dentro de una cadena usando la sintaxis <code>${expresi\u00f3n}</code>.</li> </ol> <pre><code>let nombre = \"Juan\";\nlet apellido = \"P\u00e9rez\";\nlet edad = 30;\nlet presentacion = `Mi nombre es ${nombre} ${apellido} y tengo ${edad} a\u00f1os.`;\n\nlet resultado = `2 + 2 es ${2 + 2}`;  // \"2 + 2 es 4\"\n</code></pre> <ol> <li>Cadenas Multil\u00ednea: Crear cadenas que ocupan varias l\u00edneas.</li> </ol> <pre><code>let direccion = `Calle Falsa 123\nCiudad Springfield\n62704`;\n</code></pre>  Ejercicio Pr\u00e1ctico 2b: Trabajando con Cadenas en JavaScript <p>Sigue estos pasos para completar el ejercicio:</p> <ol> <li>Concatenaci\u00f3n y Literales de Plantilla:             <ul> <li>Crea dos variables de cadena, <code>nombre</code> y <code>apellido</code>.</li> <li>Conc\u00e1t\u00e9nalos usando tanto el operador <code>+</code> como literales de plantilla para formar un nombre completo.</li> </ul> </li> <li>M\u00e9todos de Cadenas:             <ul> <li>Usa los m\u00e9todos <code>.toUpperCase()</code> y <code>.toLowerCase()</code> para cambiar el caso del nombre completo.</li> <li>Extrae una subcadena del nombre completo usando los m\u00e9todos <code>substring()</code> y <code>slice()</code>.</li> </ul> </li> <li>Interpolaci\u00f3n de Cadenas:             <ul> <li>Crea una cadena multil\u00ednea usando literales de plantilla que incluya el nombre completo y una direcci\u00f3n.</li> </ul> </li> <li>Dividiendo y Recortando Cadenas:             <ul> <li>Crea una cadena que incluya una lista de elementos separados por comas.</li> <li>Divide la cadena en un arreglo y recorta los espacios en blanco de cada elemento.</li> </ul> </li> <li>Chequeo y Conversi\u00f3n:             <ul> <li>Crea una variable que incluya un n\u00famero como cadena.</li> <li>Verifica si es un n\u00famero usando <code>isNaN()</code> y convi\u00e9rtelo a n\u00famero.</li> <li>Usa <code>.toString()</code> para convertir un n\u00famero de nuevo a una cadena.</li> <li>Usa <code>.toFixed()</code> para formatear un n\u00famero a dos decimales.</li> </ul> </li> </ol>"},{"location":"T02/#43-tipo-booleano","title":"4.3 Tipo Booleano","text":"<ul> <li>Solo acepta dos valores: <code>true</code> o <code>false</code></li> <li>Es \u00fatil para verificar el estado de la aplicaci\u00f3n</li> <li> <p>Se recomienda que su nombre defina el estado positivo</p> <ul> <li>Ejemplo: <code>userIsLogged</code>, <code>itemFound</code>, <code>errorFound</code> </li> </ul> </li> <li> <p><code>Boolean(value);</code> devuelve el valor booleano de una condici\u00f3n o variable.</p> </li> </ul>"},{"location":"T02/#boolean","title":"Boolean()","text":"<p><code>Boolean(value);</code> devuelve el valor booleano de una condici\u00f3n o variable.</p>"},{"location":"T02/#verdadero-vs-falso","title":"Verdadero vs Falso","text":"Verdadero Falso 1 0, -0 <code>\"Cualquiera\"</code> <code>\"\"</code> 3.14 NaN <code>100 &gt; 5</code> null <code>1 &lt; 100</code> undefined <code>'1' == 1</code> <code>'1' === 1</code> <pre><code>// Ejemplo 1: Usando Boolean() para obtener el valor booleano\nconsole.log(Boolean(1));           // true\nconsole.log(Boolean(0));           // false\nconsole.log(Boolean(\"Cualquiera\"));  // true\nconsole.log(Boolean(\"\"));          // false\n\n// Ejemplo 2: Usando expresiones\nconsole.log(100 &gt; 5);              // true\nconsole.log(1 &lt; 100);              // true\nconsole.log('1' == 1);             // true\nconsole.log('1' === 1);            // false\n\n// Ejemplo 3: Verificaci\u00f3n de undefined y null\nlet a;\nconsole.log(Boolean(a));           // false\n\nlet b = null;\nconsole.log(Boolean(b));           // false\n\n// Ejemplo 4: Verificaci\u00f3n de NaN\nlet c = NaN;\nconsole.log(Boolean(c));           // false\nconsole.log(isNaN(c));             // true\n\n// Ejemplo 5: Combinando m\u00faltiples verificaciones\nlet value = \"Hola\";\nif (value &amp;&amp; typeof value === \"string\") {\n    console.log(\"El valor es una cadena no vac\u00eda\"); // Esto se imprimir\u00e1\n}\n\nlet number = 0;\nif (!number) {\n    console.log(\"El n\u00famero es cero o falso\"); // Esto se imprimir\u00e1\n}\n</code></pre>"},{"location":"T02/#44-tipos-undefined-y-null","title":"4.4 Tipos Undefined y Null","text":"<p>En JavaScript, <code>undefined</code> y <code>null</code> son dos tipos distintos que representan la ausencia de valor o no existencia. A menudo se confunden entre s\u00ed pero tienen significados y casos de uso diferentes.</p>"},{"location":"T02/#undefined","title":"Undefined","text":"<ul> <li>Tipo: <code>undefined</code></li> <li>Descripci\u00f3n: Una variable que ha sido declarada pero a\u00fan no se le ha asignado un valor tiene el valor <code>undefined</code>.</li> <li>Ejemplo:     <pre><code>let a;\nconsole.log(a); // Salida: undefined\n</code></pre></li> </ul>"},{"location":"T02/#null","title":"Null","text":"<ul> <li>Tipo: <code>object</code></li> <li>Descripci\u00f3n: <code>null</code> es un valor de asignaci\u00f3n que se puede utilizar para representar la ausencia de valor o de objeto. Se establece expl\u00edcitamente por el programador para indicar \"sin valor\".</li> <li>Ejemplo:     <pre><code>let b = null;\nconsole.log(b); // Salida: null\n</code></pre></li> </ul>"},{"location":"T02/#diferencias-clave","title":"Diferencias Clave","text":"<ul> <li> <p>Tipo:</p> <ul> <li><code>undefined</code>: El tipo de <code>undefined</code> es <code>undefined</code>.</li> <li><code>null</code>: El tipo de <code>null</code> es <code>object</code> (esto es un error hist\u00f3rico en JavaScript, pero permanece para compatibilidad con versiones anteriores).</li> </ul> </li> <li> <p>Valor por Defecto:</p> <ul> <li><code>undefined</code> es el valor por defecto para variables no inicializadas.</li> <li><code>null</code> es una asignaci\u00f3n expl\u00edcita para indicar un valor vac\u00edo o inexistente.</li> </ul> </li> <li> <p>Uso:</p> <ul> <li>Usa <code>undefined</code> para verificar si una variable ha sido declarada pero a\u00fan no se le ha asignado un valor.</li> <li>Usa <code>null</code> para significar intencionalmente que una variable deber\u00eda estar vac\u00eda.</li> </ul> </li> </ul>"},{"location":"T02/#ejemplos","title":"Ejemplos","text":"<pre><code>// Ejemplo de Undefined\nlet x;\nconsole.log(x); // Salida: undefined\n\n// Ejemplo de Null\nlet y = null;\nconsole.log(y); // Salida: null\n\n// Verificaci\u00f3n de tipos\nconsole.log(typeof x); // Salida: undefined\nconsole.log(typeof y); // Salida: object\n</code></pre>"},{"location":"T02/#puedes-resolver-el-mayor-enigma-de-js","title":"\u00bfPuedes resolver el mayor enigma de JS?","text":""},{"location":"T02/#5-sentencias-de-control","title":"5. Sentencias de Control","text":""},{"location":"T02/#51-sentencias-condicionales","title":"5.1 Sentencias Condicionales","text":""},{"location":"T02/#ifelse","title":"if...else","text":"<p>Las sentencias condicionales permiten la ejecuci\u00f3n de bloques de c\u00f3digo espec\u00edficos basados en ciertas condiciones. Las sentencias condicionales m\u00e1s comunes son <code>if</code>, <code>else if</code> y <code>else</code>.</p> <p>Ejemplos de uso:</p> <pre><code>let number = 10;\n\nif (number &gt; 0) {\n    console.log(\"El n\u00famero es positivo.\");\n} else if (number &lt; 0) {\n    console.log(\"El n\u00famero es negativo.\");\n} else {\n    console.log(\"El n\u00famero es cero.\");\n}\n</code></pre>"},{"location":"T02/#switch","title":"switch","text":"<p>Una sentencia <code>switch</code> eval\u00faa una variable o expresi\u00f3n y compara su valor con uno de varios casos posibles. Cada caso corresponde a un bloque de c\u00f3digo espec\u00edfico que se ejecuta cuando se encuentra una coincidencia. Si no se encuentra ninguna coincidencia, se puede ejecutar un caso <code>default</code> opcional.</p> <p>Ejemplos de uso:</p>"},{"location":"T02/#javascript","title":"JavaScript","text":"<pre><code>let fruit = 'apple';\n\nswitch (fruit) {\n    case 'manzana':\n        console.log(\"Esto es una manzana.\");\n        break;\n    case 'platano':\n        console.log(\"Esto es un pl\u00e1tano.\");\n        break;\n    case 'naranja':\n        console.log(\"Esto es una naranja.\");\n        break;\n    case 'zanahoria':\n        console.log(\"Cuidao que se lo come Manolo.\");\n        break;\n    default:\n        console.log(\"Fruta desconocida.\");\n}\n</code></pre>"},{"location":"T02/#operador-condicional-ternario","title":"Operador Condicional (ternario)","text":"<p>El operador condicional ternario es una forma concisa de realizar evaluaciones condicionales. Toma tres operandos: una condici\u00f3n, un resultado para verdadero y un resultado para falso. La sintaxis es:</p> <p><code>condici\u00f3n ? expresi\u00f3n_si_verdadera : expresi\u00f3n_si_falsa</code></p> <p>Ejemplos de uso:</p> <pre><code>let age = 18;\nlet canVote = (age &gt;= 18) ? \"S\u00ed, puedes votar.\" : \"No, no puedes votar.\";\nconsole.log(canVote);\n</code></pre>"},{"location":"T02/#52-bucles-o-iteraciones","title":"5.2 Bucles o Iteraciones","text":""},{"location":"T02/#for-bucle-tradicional-con-contador","title":"for (bucle tradicional con contador)","text":"<p>El bucle <code>for</code> es un bucle tradicional que itera con un contador. Se usa para repetir un bloque de c\u00f3digo un n\u00famero determinado de veces.</p> <p>Ejemplos de uso:</p> <pre><code>for (let i = 0; i &lt; 5; i++) {\n    console.log(i);\n}\n\n// Contando hacia atr\u00e1s en pasos de 5 unidades\nfor (let i = 50; i &gt;= 0; i -= 5) {\n    console.log(i);\n}\n</code></pre>"},{"location":"T02/#forin-itera-sobre-propiedades-de-un-objeto","title":"for..in (itera sobre propiedades de un objeto)","text":"<p>El bucle <code>for..in</code> itera sobre las propiedades enumerables de un objeto. Se usa para recorrer las propiedades del objeto.</p> <p>Ejemplos de uso:</p> <pre><code>let person = {name: 'John', age: 30, city: 'New York'};\nfor (let key in person) {\n    console.log(key + ': ' + person[key]);\n}\n</code></pre>"},{"location":"T02/#forof-es6-itera-sobre-una-coleccion-de-objetos","title":"for..of (ES6) (itera sobre una colecci\u00f3n de objetos)","text":"<p>El bucle <code>for..of</code>, introducido en ES6, itera sobre objetos iterables como arrays, cadenas y otras colecciones.</p> <p>Ejemplos de uso:</p> <pre><code>let fruits = ['apple', 'banana', 'orange'];\nfor (let fruit of fruits) {\n    console.log(fruit);\n}\n</code></pre>"},{"location":"T02/#foreach-metodo-para-iterar-sobre-una-coleccion-de-objetos","title":"forEach (m\u00e9todo para iterar sobre una colecci\u00f3n de objetos)","text":"<p>Sin embargo, en JavaScript, la forma m\u00e1s com\u00fan de iterar sobre arrays de objetos es utilizando el m\u00e9todo <code>forEach</code>. Este m\u00e9todo ejecuta una funci\u00f3n proporcionada una vez para cada elemento del array, lo que lo hace m\u00e1s conveniente y legible para estas tareas.</p> <pre><code>const users = [  //sabemos lo que es name y age\n    { name: 'John', age: 15 },\n    { name: 'Jane', age: 25 },\n    { name: 'Jim', age: 35 },\n    { name: 'Manolo', age: 2 },\n];\n\nusers.forEach(user =&gt; {\n    console.log(`${user.name} tiene ${user.age} a\u00f1os.`);  //fijaos que estamos usando literales\n    if (user.age &gt;= 18) {  //le estamos pasando una funci\u00f3n, y dentro podemos poner el codigo que nos d\u00e9 la gana\n        console.log(`El usuario ${user.name} es mayor de edad, y puede salir al recreo`); \n    } else {\n        console.log(`El usuario ${user.name} es menor de edad, y necesita que le firmen su padres`); \n\n    }\n});\n</code></pre>"},{"location":"T02/#while-bucle-while-tradicional","title":"while (bucle while tradicional)","text":"<p>El bucle <code>while</code> repite un bloque de c\u00f3digo mientras una condici\u00f3n especificada sea verdadera.</p> <pre><code>let i = 0;\nwhile (i &gt; 0.5) {  //cuidado con la expresi\u00f3n que ponemos aqui, no vayamos a crear un bucle infinito\n    console.log(i);\n    i = Math.rand();\n}\nconsole.log(`Se encontr\u00f3 un n\u00famero aleatorio mayor que 0.5: ${i}`);\n</code></pre>"},{"location":"T02/#6-objetos-nativos-de-javascript","title":"6. Objetos Nativos de JavaScript","text":"<p>JavaScript proporciona varios objetos integrados que permiten a los desarrolladores trabajar con diferentes tipos de datos, realizar tareas comunes, manipular el DOM y manejar errores. Estos objetos son parte del lenguaje JavaScript y est\u00e1n disponibles globalmente.</p> <p></p> <p>Los objetos nativos de JavaScript se pueden categorizar en dos tipos seg\u00fan su contexto de uso y origen:</p>"},{"location":"T02/#objetos-independientes-del-navegador-tambien-disponibles-en-nodejs","title":"Objetos Independientes del Navegador (Tambi\u00e9n disponibles en Node.js)","text":"<p>Estos objetos son parte de la especificaci\u00f3n del lenguaje JavaScript y se pueden usar tanto en el navegador como en entornos del lado del servidor (como Node.js). Generalmente comienzan con una letra may\u00fascula (y son los marcados en rojo en la figura anterior):</p> <ul> <li>Math: Proporciona constantes y funciones matem\u00e1ticas.</li> <li>Number: Representa valores num\u00e9ricos y proporciona m\u00e9todos para operaciones num\u00e9ricas.</li> <li>Date: Representa fechas y horas.</li> <li>Array: Representa una colecci\u00f3n tipo lista de elementos.</li> </ul> <p>Estos objetos est\u00e1n implementados como parte del propio lenguaje JavaScript y no dependen de la presencia de un entorno de navegador.</p>"},{"location":"T02/#objetos-dependientes-del-navegador-entorno-del-lado-del-cliente","title":"Objetos Dependientes del Navegador (Entorno del Lado del Cliente)","text":"<p>Estos objetos son espec\u00edficos del entorno del navegador y no est\u00e1n disponibles en JavaScript del lado del servidor (Node.js). Generalmente comienzan con una letra min\u00fascula:</p> <ul> <li>window: Representa la ventana global del navegador y act\u00faa como el objeto global en JavaScript del lado del cliente.</li> <li>document: Representa el documento HTML cargado en la ventana del navegador.</li> <li>navigator: Proporciona informaci\u00f3n sobre el navegador y el sistema operativo del cliente.</li> <li>localStorage / sessionStorage: Proporciona mecanismos de almacenamiento dentro del navegador para persistir datos.</li> </ul> <p>Estos objetos interact\u00faan directamente con el Modelo de Objetos del Documento (DOM) del navegador y son esenciales para la programaci\u00f3n del lado del cliente y el desarrollo de aplicaciones web.</p>"},{"location":"T02/#contextos-de-uso","title":"Contextos de Uso","text":"<ul> <li>Node.js: Los objetos independientes del navegador (por ejemplo, Math, Number, Date) se pueden usar en aplicaciones Node.js sin dependencia de un entorno de navegador.</li> <li>Navegador: Los objetos dependientes del navegador (por ejemplo, window, document, navigator) son espec\u00edficos del entorno del lado del cliente y requieren un navegador web para su ejecuci\u00f3n.</li> </ul> <p>Vamos a explicar los m\u00e1s \u00fatiles para nosotros en el alcance de este curso.</p>"},{"location":"T02/#61-objeto-date","title":"6.1 Objeto Date","text":"<ul> <li>El objeto Date en JavaScript se utiliza para trabajar con fechas y horas.</li> <li>Permite crear y manipular fechas, obtener y establecer varios componentes de la fecha (como a\u00f1o, mes, d\u00eda, hora, minuto, segundo) y realizar operaciones como formato y aritm\u00e9tica.</li> <li>Internamente, se almacena el n\u00famero de milisegundos desde las 00:00:00 UTC del 1 de enero de 1970.</li> </ul> <p>Constructor:</p> <pre><code>let currentDate = new Date();               // Fecha y hora actuales\nlet specificDate = new Date(1626176282855); // Ejemplo con n\u00famero de milisegundos\nlet customDate = new Date(2023, 5, 12, 14, 30, 0, 0); // 12 de junio de 2023, 14:30:00\n</code></pre>"},{"location":"T02/#getfullyear-getmonth-getdate-getday-gethours-getminutes-getseconds-getmilliseconds-recupera-varios-componentes-de-la-fecha","title":"getFullYear(), getMonth(), getDate(), getDay(), getHours(), getMinutes(), getSeconds(), getMilliseconds(): Recupera varios componentes de la fecha.","text":"<pre><code>let now = new Date();\nlet year = now.getFullYear();\nlet month = now.getMonth(); // \u00cdndice 0 (Enero es 0)\nlet day = now.getDate();\nlet hours = now.getHours();\nlet minutes = now.getMinutes();\nlet seconds = now.getSeconds();\n</code></pre>"},{"location":"T02/#setfullyear-setmonth-setdate-sethours-setminutes-setseconds-setmilliseconds-establece-varios-componentes-de-la-fecha","title":"setFullYear(), setMonth(), setDate(), setHours(), setMinutes(), setSeconds(), setMilliseconds(): Establece varios componentes de la fecha.","text":"<pre><code>day = new Date(2000, 0, 1); // 1 de enero de 2000\nbirthday.setFullYear(2001); // Cambiar el a\u00f1o a 2001\n</code></pre>"},{"location":"T02/#todatestring-toisostring-tolocaledatestring-tolocaletimestring-convierte-objetos-de-fecha-en-diferentes-representaciones-de-cadena","title":"toDateString(), toISOString(), toLocaleDateString(), toLocaleTimeString(): Convierte objetos de fecha en diferentes representaciones de cadena.","text":"<pre><code>let today = new Date();\nlet dateString = today.toDateString(); // \"Tue Jul 13 2024\"\nlet isoString = today.toISOString(); // \"2024-07-13T12:30:00.000Z\"\nlet localeDateString = today.toLocaleDateString(); // Depende del local\n</code></pre>"},{"location":"T02/#trabajando-con-fechas","title":"Trabajando con fechas","text":"<p>Aqu\u00ed tienes un ejemplo que muestra c\u00f3mo crear un objeto <code>Date</code>, acceder a sus componentes y formatear su salida:</p> <pre><code>let now = new Date();\n\nlet year = now.getFullYear();\nlet month = now.getMonth(); // \u00cdndice 0 (Julio es 6)\nlet day = now.getDate();\nlet hours = now.getHours();\nlet minutes = now.getMinutes();\nlet seconds = now.getSeconds();\n\nconsole.log(`Fecha y hora actuales: ${day}/${month + 1}/${year} ${hours}:${minutes}:${seconds}`);\n</code></pre> <p>Aqu\u00ed est\u00e1 el ejemplo en JavaScript comparando dos fechas:</p> <pre><code>// Crear dos fechas\nlet date1 = new Date('2023-07-13');\nlet date2 = new Date('2023-07-14');\n\n// Comparar las fechas\nif (date1 &lt; date2) {\n    console.log(`${date1.toDateString()} es antes que ${date2.toDateString()}`);\n} else if (date1 &gt; date2) {\n    console.log(`${date1.toDateString()} es despu\u00e9s de ${date2.toDateString()}`);\n} else {\n    console.log(`${date1.toDateString()} y ${date2.toDateString()} son iguales`);\n}\n</code></pre>"},{"location":"T02/#62-objeto-math","title":"6.2 Objeto Math","text":"<p>El objeto Math en JavaScript proporciona constantes y funciones matem\u00e1ticas, permiti\u00e9ndote realizar tareas matem\u00e1ticas sin crear expl\u00edcitamente una instancia del objeto Math. Incluye m\u00e9todos para redondeo, trigonometr\u00eda, logaritmos, exponenciaci\u00f3n, algunas constantes como el n\u00famero PI, y m\u00e1s.</p> <ul> <li><code>Math.abs()</code>: Valor absoluto</li> <li><code>Math.ceil()</code>: Redondeo hacia arriba</li> <li><code>Math.floor()</code>: Redondeo hacia abajo</li> <li><code>Math.round()</code>: Redondeo al entero m\u00e1s cercano</li> <li><code>Math.max()</code>: Valor m\u00e1ximo</li> <li><code>Math.min()</code>: Valor m\u00ednimo</li> <li><code>Math.random()</code>: N\u00famero aleatorio entre 0 y 1</li> <li><code>Math.sqrt()</code>: Ra\u00edz cuadrada</li> <li><code>Math.PI</code>: N\u00famero PI</li> </ul> <pre><code>let absoluteValue = Math.abs(-5);  // 5\nlet roundedUp = Math.ceil(4.2);  // 5\nlet roundedDown = Math.floor(4.8);  // 4\nlet rounded = Math.round(4.5);  // 5\nlet roundedDownExample = Math.round(4.4);  // 4\nlet max = Math.max(1, 2, 3);  // 3\nlet min = Math.min(1, 2, 3);  // 1\nlet random = Math.random();  // ej., 0.543\nlet squareRoot = Math.sqrt(16);  // 4\n\n// Adem\u00e1s, el objeto Math contiene algunas constantes \u00fatiles como PI o el n\u00famero E\nlet piNumber = Math.PI;  // 3.1415......\n</code></pre>"},{"location":"T02/#64-objeto-string","title":"6.4 Objeto String","text":"<p>El objeto <code>String</code> es un envoltorio alrededor del tipo de dato primitivo string de JavaScript. Proporciona varios m\u00e9todos y propiedades para trabajar con cadenas de texto de manera efectiva.</p>"},{"location":"T02/#creacion-de-objetos-string","title":"Creaci\u00f3n de Objetos String","text":"<p>En JavaScript, puedes crear una cadena primitiva directamente o usar el constructor del objeto <code>String</code> para crear un objeto <code>String</code>:</p> <pre><code>// Cadena primitiva\nlet mensaje = '\u00a1Hola, Mundo!';\n\n// Usando el constructor del objeto String\nlet otroMensaje = new String('\u00a1Hola, Mundo!');\n</code></pre>"},{"location":"T02/#metodos-y-propiedades-utiles","title":"M\u00e9todos y propiedades \u00fatiles","text":"<ul> <li><code>length</code>: Devuelve la longitud de la cadena.</li> <li><code>charAt(index)</code>: Devuelve el car\u00e1cter en el \u00edndice especificado.</li> <li><code>concat(str1, str2, ...)</code>: Concatena una o m\u00e1s cadenas al final de la cadena que llama al m\u00e9todo y devuelve una nueva cadena.</li> <li><code>toUpperCase()</code>: Convierte todos los caracteres a may\u00fasculas.</li> <li><code>toLowerCase()</code>: Convierte todos los caracteres a min\u00fasculas.</li> <li><code>indexOf(searchValue, startIndex)</code>: Devuelve el \u00edndice de la primera aparici\u00f3n de <code>searchValue</code> en la cadena, comenzando la b\u00fasqueda en <code>startIndex</code>.</li> <li><code>substring(startIndex, endIndex)</code>: Devuelve una nueva subcadena desde <code>startIndex</code> hasta <code>endIndex</code> (excluyendo <code>endIndex</code>).</li> <li><code>slice(startIndex, endIndex)</code>: Extrae una secci\u00f3n de la cadena y la devuelve como una nueva cadena.</li> <li><code>split(separator)</code>: Divide la cadena en un array de subcadenas basadas en un <code>separator</code> especificado.</li> </ul> <p>Ejemplos de uso:</p> <p>Estos m\u00e9todos ya han sido utilizados en el Tipo de Dato String Primitivo.</p>"},{"location":"T02/#65-objetos-de-interaccion-con-el-navegador","title":"6.5 Objetos de Interacci\u00f3n con el Navegador","text":"<p>Adem\u00e1s de los objetos presentados anteriormente, hay otros tipos de objetos que permiten la manipulaci\u00f3n de caracter\u00edsticas espec\u00edficas del navegador:</p> <ul> <li>navigator: Proporciona informaci\u00f3n sobre el navegador y el sistema operativo del cliente.</li> <li>screen: Representa las propiedades de la pantalla del usuario.</li> <li>window: Representa la ventana global del navegador y act\u00faa como el objeto global en JavaScript del lado del cliente.</li> <li>document: Representa el documento HTML cargado en la ventana del navegador.</li> <li>history: Proporciona el historial de sesiones del navegador (p\u00e1ginas visitadas en la pesta\u00f1a/ventana actual).</li> </ul>"},{"location":"T02/#navigator","title":"navigator","text":"<p>Para identificar las caracter\u00edsticas de la plataforma en la que se ejecuta una aplicaci\u00f3n web, puedes usar propiedades y m\u00e9todos proporcionados por el objeto <code>navigator</code> en JavaScript:</p> <ol> <li> <p>Tipo de Navegador y Versi\u00f3n:</p> <ul> <li>Usa <code>navigator.userAgent</code> para obtener la cadena del User-Agent, que incluye informaci\u00f3n sobre el tipo de navegador y la versi\u00f3n.</li> </ul> </li> <li> <p>Sistema Operativo:</p> <ul> <li>Usa <code>navigator.platform</code> para recuperar la plataforma en la que se est\u00e1 ejecutando el navegador (por ejemplo, \"Win32\", \"Linux x86_64\", \"MacIntel\").</li> </ul> </li> <li> <p>Geolocalizaci\u00f3n:</p> <ul> <li>Utiliza la API de Geolocalizaci\u00f3n para solicitar y obtener la ubicaci\u00f3n geogr\u00e1fica actual del dispositivo, siempre que el usuario conceda permiso.</li> </ul> </li> </ol> <p>Ejemplo de c\u00f3digo JavaScript: <pre><code>// User Agent\nlet infoNavegador = navigator.userAgent;\nconsole.log(`User-Agent: ${infoNavegador}`);\n\n// Informaci\u00f3n de la Plataforma\nlet infoPlataforma = navigator.platform;\nconsole.log(`Plataforma: ${infoPlataforma}`);\n\n// Geolocalizaci\u00f3n\nif ('geolocation' in navigator) {\n    navigator.geolocation.getCurrentPosition(position =&gt; {\n      console.log('Latitud:', position.coords.latitude);\n      console.log('Longitud:', position.coords.longitude);\n    }, error =&gt; {\n        console.error('Error al obtener la geolocalizaci\u00f3n:', error);\n    });\n} else {\n    console.error('La geolocalizaci\u00f3n no es soportada por este navegador.');\n}\n</code></pre></p>"},{"location":"T02/#screen","title":"screen","text":"<p>El objeto <code>screen</code> en JavaScript representa la pantalla del usuario y proporciona propiedades de solo lectura para recuperar informaci\u00f3n sobre sus caracter\u00edsticas.</p>"},{"location":"T02/#propiedades-del-objeto-screen","title":"Propiedades del Objeto <code>screen</code>","text":"<ul> <li><code>screen.width</code>: Devuelve el ancho de la pantalla del usuario en p\u00edxeles.</li> <li><code>screen.height</code>: Devuelve la altura de la pantalla del usuario en p\u00edxeles.</li> <li><code>screen.availWidth</code>: Devuelve el ancho disponible de la pantalla del usuario (excluyendo las barras de tareas del sistema operativo, etc.) en p\u00edxeles.</li> <li><code>screen.availHeight</code>: Devuelve la altura disponible de la pantalla del usuario (excluyendo las barras de tareas del sistema operativo, etc.) en p\u00edxeles.</li> <li><code>screen.colorDepth</code>: Devuelve la profundidad de color de la paleta para mostrar im\u00e1genes en la pantalla del usuario.</li> <li><code>screen.pixelDepth</code>: Devuelve la profundidad de bits del b\u00fafer de p\u00edxeles de la pantalla del usuario.</li> </ul> <p>Estas propiedades permiten que las aplicaciones web adapten su contenido o comportamiento en funci\u00f3n de las dimensiones y capacidades de la pantalla del usuario, mejorando la experiencia del usuario.</p> <p>Aqu\u00ed hay un ejemplo simple que demuestra c\u00f3mo acceder y usar algunas de estas propiedades en JavaScript:</p> <pre><code>console.log(`Ancho de la pantalla: ${screen.width}px`);\nconsole.log(`Altura de la pantalla: ${screen.height}px`);\nconsole.log(`Ancho disponible de la pantalla: ${screen.availWidth}px`);\nconsole.log(`Altura disponible de la pantalla: ${screen.availHeight}px`);\nconsole.log(`Profundidad de color: ${screen.colorDepth} bits`);\nconsole.log(`Profundidad de p\u00edxeles: ${screen.pixelDepth} bits`);\n</code></pre>"},{"location":"T02/#window","title":"window","text":"<p>El objeto <code>window</code> se considera uno de los objetos m\u00e1s importantes en JavaScript por varias razones:</p> <ul> <li> <p>Gesti\u00f3n de Ventanas: Permite gestionar ventanas del navegador y proporciona m\u00e9todos para manipular e interactuar con ellas.</p> </li> <li> <p>Objeto Impl\u00edcito: El objeto <code>window</code> es impl\u00edcito, lo que significa que no necesitas referenciarlo expl\u00edcitamente para acceder a objetos y propiedades anidados dentro de su jerarqu\u00eda. Por ejemplo, <code>window.document</code> se refiere directamente al objeto <code>document</code> sin necesidad de mencionar expl\u00edcitamente <code>window</code>.</p> </li> </ul>"},{"location":"T02/#document","title":"document","text":"<p>El objeto <code>document</code> en JavaScript representa la p\u00e1gina web actual cargada en la ventana del navegador. Proporciona acceso al DOM (Modelo de Objetos del Documento) de la p\u00e1gina, permitiendo a los desarrolladores manipular su contenido, estructura y estilos de manera din\u00e1mica.</p>"},{"location":"T02/#caracteristicas-clave-del-objeto-document","title":"Caracter\u00edsticas Clave del Objeto <code>document</code>:","text":"<ul> <li> <p>Manipulaci\u00f3n del DOM: Los desarrolladores pueden acceder y modificar elementos dentro de la p\u00e1gina web usando m\u00e9todos como <code>getElementById</code>, <code>querySelector</code> y propiedades como <code>textContent</code>, <code>innerHTML</code>.</p> </li> <li> <p>Manejo de Eventos: Permite adjuntar escuchadores de eventos a elementos y responder a interacciones del usuario u otros eventos en la p\u00e1gina.</p> </li> <li> <p>Actualizaciones Din\u00e1micas: Permite a los scripts actualizar din\u00e1micamente el contenido de la p\u00e1gina en funci\u00f3n de la entrada del usuario, respuestas del servidor u otras condiciones.</p> </li> </ul>"},{"location":"T02/#ejemplo-de-manipulacion-del-dom","title":"Ejemplo de Manipulaci\u00f3n del DOM:","text":"<pre><code>// Accediendo a un elemento por su ID y cambiando su contenido\nconst elementoEncabezado = document.getElementById('header');\nelementoEncabezado.textContent = '\u00a1Bienvenidos a nuestro sitio web!';\n</code></pre>"},{"location":"T02/#history","title":"history","text":"<p>En JavaScript, el objeto <code>history</code> proporciona m\u00e9todos y propiedades para navegar por el historial de navegaci\u00f3n del usuario. Permite almacenar referencias a las p\u00e1ginas web visitadas y facilita la navegaci\u00f3n entre ellas usando una estructura tipo lista.</p>"},{"location":"T02/#caracteristicas-clave-del-objeto-history","title":"Caracter\u00edsticas Clave del Objeto <code>history</code>:","text":"<ul> <li> <p><code>history.length</code>: Devuelve el n\u00famero de entradas en la pila del historial de navegaci\u00f3n.</p> </li> <li> <p><code>history.back()</code>: Regresa una p\u00e1gina en el historial de sesi\u00f3n. Equivalente a hacer clic en el bot\u00f3n de retroceso del navegador.</p> </li> <li> <p><code>history.forward()</code>: Avanza una p\u00e1gina en el historial de sesi\u00f3n. Equivalente a hacer clic en el bot\u00f3n de avance del navegador.</p> </li> <li> <p><code>history.go(n)</code>: Carga una p\u00e1gina espec\u00edfica del historial de sesi\u00f3n, donde <code>n</code> puede ser un n\u00famero entero positivo o negativo. Los valores negativos mueven hacia atr\u00e1s, y los valores positivos avanzan.</p> </li> </ul>"},{"location":"T02/#ejemplo-de-uso","title":"Ejemplo de Uso:","text":"<pre><code>// Navegando hacia atr\u00e1s y hacia adelante en el historial\nfunction irAtras() {\n    window.history.back();\n}\n\nfunction irAdelante() {\n    window.history.forward();\n}\n\n// Accediendo a la longitud de la pila del historial\nlet longitudHistorial = window.history.length;\nconsole.log(`N\u00famero de p\u00e1ginas en el historial: ${longitudHistorial}`);\n</code></pre>"},{"location":"T02/#7-funciones","title":"7. Funciones","text":"<p>Una funci\u00f3n en programaci\u00f3n es un bloque reutilizable de c\u00f3digo que realiza una tarea espec\u00edfica. Puede recibir entradas, procesarlas y devolver una salida. Las funciones son bloques fundamentales en la programaci\u00f3n, permitiendo un c\u00f3digo modular, legible y mantenible.</p>"},{"location":"T02/#caracteristicas-clave-de-las-funciones","title":"Caracter\u00edsticas Clave de las Funciones:","text":"<ol> <li>Modularidad: Las funciones permiten dividir el c\u00f3digo en piezas m\u00e1s peque\u00f1as y manejables, cada una realizando una tarea espec\u00edfica.</li> <li>Reusabilidad: Una vez definida, una funci\u00f3n puede ser llamada m\u00faltiples veces dentro de un programa, reduciendo la redundancia.</li> <li>Abstracci\u00f3n: Las funciones permiten encapsular operaciones complejas, ocultando los detalles y exponiendo solo las interfaces necesarias.</li> <li>Mantenibilidad: Las funciones facilitan la actualizaci\u00f3n y gesti\u00f3n del c\u00f3digo. Los cambios realizados dentro de una funci\u00f3n no afectan otras partes del c\u00f3digo que dependen de ella.</li> </ol>"},{"location":"T02/#estructura-basica-de-una-funcion","title":"Estructura B\u00e1sica de una Funci\u00f3n:","text":"<ol> <li>Declaraci\u00f3n de Funci\u00f3n: Define la funci\u00f3n y especifica su nombre, par\u00e1metros y cuerpo.</li> <li>Llamada a Funci\u00f3n: Ejecuta la funci\u00f3n haciendo referencia a su nombre y pasando los argumentos necesarios. Opcionalmente, podemos guardar el valor que devuelve la funci\u00f3n.</li> </ol>"},{"location":"T02/#ejemplo-en-javascript","title":"Ejemplo en JavaScript:","text":"<p>Nota que en JavaScript no declaramos el tipo de los par\u00e1metros ni el valor de retorno.</p> <pre><code>// Declaraci\u00f3n de Funci\u00f3n\nfunction saludar(nombre) {\n    return `\u00a1Hola, ${nombre}!`;\n}\n\n// Llamada a la Funci\u00f3n\nlet mensaje = saludar('Alice');\nconsole.log(mensaje); // Salida: \u00a1Hola, Alice!\n</code></pre>"},{"location":"T02/#71-funciones-globales-en-javascript","title":"7.1 Funciones Globales en JavaScript","text":"<p>Las funciones globales en JavaScript son funciones integradas que son parte del objeto global y pueden ser llamadas desde cualquier parte de tu c\u00f3digo. Est\u00e1n disponibles tanto en el entorno del navegador como en Node.js. Aqu\u00ed hay algunas de las funciones globales m\u00e1s com\u00fanmente utilizadas:</p> <ol> <li> <p><code>parseInt(string, radix)</code></p> <ul> <li>Analiza una cadena y devuelve un entero en la base especificada.</li> <li>Ejemplo:  <pre><code>let num = parseInt(\"10\", 10); // 10\n</code></pre></li> </ul> </li> <li> <p><code>parseFloat(string)</code></p> <ul> <li>Analiza una cadena y devuelve un n\u00famero de punto flotante.</li> <li>Ejemplo:  <pre><code>let num = parseFloat(\"10.5\"); // 10.5\n</code></pre></li> </ul> </li> <li> <p><code>isNaN(value)</code></p> <ul> <li>Determina si un valor es NaN (No es un N\u00famero).</li> <li>Ejemplo:  <pre><code>let resultado = isNaN(\"hola\"); // true\n</code></pre></li> </ul> </li> <li> <p><code>isFinite(value)</code></p> <ul> <li>Determina si un valor es un n\u00famero finito.</li> <li>Ejemplo:  <pre><code>let resultado = isFinite(10); // true\nlet resultado2 = isFinite(Infinity); // false\n</code></pre></li> </ul> </li> <li> <p><code>eval(string)</code></p> <ul> <li>Eval\u00faa c\u00f3digo JavaScript representado como una cadena.</li> <li>Ejemplo:  <pre><code>let resultado = eval(\"2 + 2\"); // 4\n</code></pre></li> </ul> </li> <li> <p><code>encodeURI(uri)</code></p> <ul> <li>Codifica un Identificador de Recurso Uniforme (URI) escapando ciertos caracteres.</li> <li>Ejemplo:  <pre><code>let uri = \"https://www.example.com?name=John Doe\";\nlet uriCodificado = encodeURI(uri); // \"https://www.example.com?name=John%20Doe\"\n</code></pre></li> </ul> </li> <li> <p><code>encodeURIComponent(uriComponent)</code></p> <ul> <li>Codifica un componente URI escapando ciertos caracteres.</li> <li>Ejemplo:  <pre><code>let componenteURI = \"John Doe &amp; Co\";\nlet componenteURICodificado = encodeURIComponent(componenteURI); // \"John%20Doe%20%26%20Co\"\n</code></pre></li> </ul> </li> <li> <p><code>decodeURI(encodedURI)</code></p> <ul> <li>Decodifica un Identificador de Recurso Uniforme (URI) creado con <code>encodeURI</code>.</li> <li>Ejemplo:  <pre><code>let uriCodificado = \"https://www.example.com?name=John%20Doe\";\nlet uriDecodificado = decodeURI(uriCodificado); // \"https://www.example.com?name=John Doe\"\n</code></pre></li> </ul> </li> <li> <p><code>decodeURIComponent(encodedURIComponent)</code></p> <ul> <li>Decodifica un componente URI creado con <code>encodeURIComponent</code>.</li> <li>Ejemplo:  <pre><code>let componenteURICodificado = \"John%20Doe%20%26%20Co\";\nlet componenteURIDecodificado = decodeURIComponent(componenteURICodificado); // \"John Doe &amp; Co\"\n</code></pre></li> </ul> </li> <li> <p><code>setTimeout(function, delay)</code></p> <ul> <li>Llama a una funci\u00f3n o eval\u00faa una expresi\u00f3n despu\u00e9s de un n\u00famero espec\u00edfico de milisegundos.</li> <li>Ejemplo:   <pre><code>setTimeout(function() {\n    console.log(\"Hola despu\u00e9s de 2 segundos\");\n}, 2000);\n</code></pre></li> </ul> </li> <li> <p><code>setInterval(function, delay)</code></p> <ul> <li>Llama repetidamente a una funci\u00f3n o eval\u00faa una expresi\u00f3n a intervalos especificados (en milisegundos).</li> <li>Ejemplo:   <pre><code>setInterval(function() {\n    console.log(\"Hola cada 2 segundos\");\n}, 2000);\n</code></pre></li> </ul> </li> <li> <p><code>clearTimeout(timeoutID)</code></p> <ul> <li>Limpia un temporizador establecido con <code>setTimeout</code>.</li> <li>Ejemplo:   <pre><code>let timeoutID = setTimeout(function() {\n    console.log(\"Esto no se ejecutar\u00e1\");\n}, 2000);\nclearTimeout(timeoutID);\n</code></pre></li> </ul> </li> <li> <p><code>clearInterval(intervalID)</code></p> <ul> <li>Limpia un temporizador establecido con <code>setInterval</code>.</li> <li>Ejemplo:   <pre><code>let intervalID = setInterval(function() {\n    console.log(\"Esto no se ejecutar\u00e1 repetidamente\");\n}, 2000);\nclearInterval(intervalID);\n</code></pre></li> </ul> </li> </ol>"},{"location":"T02/#72-declaracion-de-funciones-del-usuario","title":"7.2 Declaraci\u00f3n de Funciones del Usuario","text":"<p>En JavaScript, puedes crear funciones personalizadas para encapsular y reutilizar c\u00f3digo. Existen varias formas de declarar funciones:</p>"},{"location":"T02/#declaracion-clasica-de-funcion","title":"Declaraci\u00f3n Cl\u00e1sica de Funci\u00f3n","text":"<p>La forma cl\u00e1sica de definir una funci\u00f3n en JavaScript es utilizando la palabra clave <code>function</code>. Esta forma permite crear funciones nombradas o an\u00f3nimas.</p> <pre><code>// Funci\u00f3n nombrada\nfunction add(a, b) {\n    return a + b;\n}\n\n// Llamada a la funci\u00f3n\nlet result = add(2, 3);\nconsole.log(result); // Salida: 5\n</code></pre>"},{"location":"T02/#funcion-por-expresion-y-funcion-lambda","title":"Funci\u00f3n por Expresi\u00f3n y Funci\u00f3n Lambda","text":"<p>Puedes asignar una funci\u00f3n a una variable mediante una expresi\u00f3n. Esto incluye las funciones an\u00f3nimas y las funciones lambda.</p> <pre><code>// 1. Funci\u00f3n por expresi\u00f3n\nconst multiply = function multiplication(a, b) {\n    return a * b;\n};\n\n// Llamada a la funci\u00f3n\nlet result = multiply(5, 3);\nconsole.log(result); // Salida: 15\n\n// 2. Funci\u00f3n Lambda o an\u00f3nima por expresi\u00f3n\nconst divide = function (a, b) {\n    return a / b;\n};\n\n// Llamada a la funci\u00f3n\nlet resultDiv = divide(15, 3);\nconsole.log(resultDiv); // Salida: 5\n</code></pre>"},{"location":"T02/#funciones-arrow-lambda","title":"Funciones Arrow (Lambda)Instrucciones:Ejemplo de Uso:Pistas:","text":"<p>Las funciones arrow proporcionan una sintaxis m\u00e1s concisa para escribir funciones en JavaScript. Son an\u00f3nimas y a menudo se utilizan en lugar de las expresiones de funci\u00f3n.</p> <pre><code>// Funci\u00f3n tradicional\nconst f1 = function (a) {\n  return a + 100;\n}\n\n// Desglose de la Funci\u00f3n Arrow\n\n// 1. Elimina la palabra clave \"function\" y coloca la flecha entre el argumento y la llave de apertura.\nconst f2 = (a) =&gt; {\n  return a + 100;\n}\n\n// 2. Elimina las llaves del cuerpo y la palabra clave \"return\" \u2014 el retorno es impl\u00edcito.\nconst f3 = (a) =&gt; a + 100;\n\n// 3. Omite los par\u00e9ntesis alrededor del argumento si hay un solo argumento\nconst f4 = a =&gt; a + 100;\n</code></pre>  Ejercicio Pr\u00e1ctico: Calcular D\u00edas Entre Dos Fechas <p>Escribe una funci\u00f3n en JavaScript que calcule el n\u00famero de d\u00edas entre dos fechas dadas.</p> <ol> <li>Crea una funci\u00f3n <code>calculateDaysBetweenDates(date1, date2)</code> que tome dos cadenas de fecha como entrada.</li> <li>Convierte las cadenas de fecha en objetos <code>Date</code>.</li> <li>Calcula la diferencia en milisegundos entre las dos fechas.</li> <li>Convierte la diferencia en milisegundos a d\u00edas.</li> <li>Devuelve el n\u00famero de d\u00edas entre las dos fechas.</li> </ol> <pre><code>let date1 = \"2024-07-01\";\nlet date2 = \"2024-07-13\";\nlet daysBetween = calculateDaysBetweenDates(date1, date2);\nconsole.log(`Hay ${daysBetween} d\u00edas entre ${date1} y ${date2}.`); // Salida: Hay 12 d\u00edas entre 2024-07-01 y 2024-07-13.</code></pre> <ul> <li>Utiliza <code>new Date(dateString)</code> para crear objetos <code>Date</code> a partir de las cadenas de fecha.</li> <li>Resta la fecha anterior de la fecha posterior para obtener la diferencia en milisegundos.</li> <li>Hay <code>1000 * 60 * 60 * 24</code> milisegundos en un d\u00eda.</li> </ul>"},{"location":"T02/#73-funciones-callback","title":"7.3 Funciones Callback","text":"<p>A un alto nivel, un callback es cuando una funci\u00f3n B se pasa como par\u00e1metro a otra funci\u00f3n A. Esto permite que la funci\u00f3n A invoque (o \"llame de vuelta\") a la funci\u00f3n B en un momento posterior, generalmente en respuesta a alg\u00fan evento o condici\u00f3n.</p>"},{"location":"T02/#puntos-clave","title":"Puntos Clave:","text":"<ul> <li>Flexibilidad: Los callbacks proporcionan una forma de especificar el comportamiento personalizado que debe ejecutarse cuando se completa una acci\u00f3n o ocurre un evento.</li> <li>Operaciones As\u00edncronas: Se utilizan com\u00fanmente en la programaci\u00f3n as\u00edncrona para manejar operaciones que tardan en completarse, como la obtenci\u00f3n de datos desde un servidor.</li> <li>Definici\u00f3n Externa: Las funciones callback se definen fuera de la funci\u00f3n que las utiliza, permitiendo un c\u00f3digo modular y reutilizable.</li> </ul>"},{"location":"T02/#ejemplo-conceptual","title":"Ejemplo Conceptual:","text":"<pre><code>// Funci\u00f3n A toma la funci\u00f3n B como par\u00e1metro de callback\nfunction A(callback) {\n    // L\u00f3gica de la funci\u00f3n A\n    console.log(\"Dentro de la funci\u00f3n A\");\n\n    // Invoca la funci\u00f3n callback B\n    callback();\n}\n\n// Funci\u00f3n B (funci\u00f3n callback)\nfunction B() {\n    console.log(\"Funci\u00f3n callback B ejecutada\");\n}\n\n// Llama a la funci\u00f3n A y pasa la funci\u00f3n B como callback\nA(B);\n</code></pre>"},{"location":"T02/#funciones-callback-ad-hoc","title":"Funciones Callback Ad-hoc","text":"<p>En JavaScript, las funciones callback ad-hoc son funciones que se definen en l\u00ednea en el momento en que se pasan como argumentos a otra funci\u00f3n. El m\u00e9todo <code>forEach</code> es un buen ejemplo de c\u00f3mo se utilizan frecuentemente callbacks ad-hoc para iterar sobre arrays.</p>"},{"location":"T02/#ejemplo-usando-foreach","title":"Ejemplo Usando <code>forEach</code>:","text":"<pre><code>// Array de n\u00fameros\nconst numbers = [1, 2, 3, 4, 5];\n\n// Usando forEach con una funci\u00f3n callback ad-hoc\nnumbers.forEach(function(item) {\n    console.log(item); // Muestra cada n\u00famero\n});\n\n// Usando forEach con una funci\u00f3n callback ad-hoc de tipo arrow\nnumbers.forEach(item =&gt; {\n    console.log(item * 2); // Muestra cada n\u00famero multiplicado por 2\n});\n</code></pre>"},{"location":"T03/","title":"UNIDAD 3 - Arrays, Objectos... y Clases","text":""},{"location":"T03/#1-arrays","title":"1. Arrays","text":"<p>Un Array es un conjunto ordenado de valores relacionados. Cada uno de estos valores se llama un elemento, y cada elemento tiene un \u00edndice que indica su posici\u00f3n num\u00e9rica en el Array. Debes declarar un Array antes de poder usarlo.</p>"},{"location":"T03/#puntos-clave","title":"Puntos Clave:","text":"<ul> <li>Elementos: Los valores individuales en un array.</li> <li>\u00cdndices: Posiciones num\u00e9ricas de los elementos, comenzando desde 0.</li> <li>Declaraci\u00f3n: Los arrays deben ser declarados antes de su uso.</li> </ul>"},{"location":"T03/#11-declaracion-de-un-array","title":"1.1 Declaraci\u00f3n de un Array","text":"<p>En JavaScript, hay dos formas principales de crear arrays:</p> <ol> <li>Usando el constructor <code>Array</code>.</li> <li>Usando la notaci\u00f3n literal de arrays para definir el array y sus elementos.</li> </ol>"},{"location":"T03/#1-usando-el-constructor-array","title":"1. Usando el Constructor <code>Array</code>","text":"<pre><code>const a1 = new Array(); // Nuevo array vac\u00edo\nconsole.log(a1.length); // Salida: 0\n\nconst a2 = new Array(4); // Nuevo array con 4 elementos\nconsole.log(a2.length); // Salida: 4\n\n// Nuevo array con 3 elementos definidos\nconst artist = new Array('Michael Jackson', 'Taylor Swift', 'David Bowie');\nconsole.log(artist.length); // Salida: 3\n\n// Rellenar a1 con valores aleatorios\nfor (let i = 0; i &lt; 10; i++) {\n  a1[i] = Math.random();\n}\n\nconsole.log(a1.length); // Salida: 10\nconsole.log(a2.length); // Salida: 4\nconsole.log(artist.length); // Salida: 3\nconsole.log(a1);\nconsole.log(a2);\nconsole.log(artist);\n</code></pre>"},{"location":"T03/#2-usando-la-notacion-literal-de-arrays","title":"2. Usando la Notaci\u00f3n Literal de Arrays","text":"<pre><code>const artist2 = ['Michael Jackson', 'Taylor Swift', 'David Bowie'];\n\nconsole.log(artist2.length); // Salida: 3\nconsole.log(artist2); // Salida: [\"Michael Jackson\", \"Taylor Swift\", \"David Bowie\"]\nconsole.log(artist2[0]); // Salida: Michael Jackson\n</code></pre>"},{"location":"T03/#12-acceso-a-los-elementos-del-array","title":"1.2 Acceso a los Elementos del Array","text":"<p>Puedes acceder a los elementos en un array utilizando su \u00edndice. Los \u00edndices de los arrays comienzan en 0, as\u00ed que el primer elemento est\u00e1 en el \u00edndice 0, el segundo elemento en el \u00edndice 1, y as\u00ed sucesivamente.</p>"},{"location":"T03/#ejemplo-de-acceso-a-los-elementos","title":"Ejemplo de Acceso a los Elementos:","text":"<pre><code>// Declarar un array\nconst colors = [\"Red\", \"Green\", \"Blue\", \"Yellow\"];\n\n// Acceder a los elementos por \u00edndice\nconsole.log(colors[0]); // Salida: Red\nconsole.log(colors[1]); // Salida: Green\nconsole.log(colors[2]); // Salida: Blue\nconsole.log(colors[3]); // Salida: Yellow\n\n// Acceder al \u00faltimo elemento usando la propiedad length\nconsole.log(colors[colors.length - 1]); // Salida: Yellow\n\n// Modificar un elemento por \u00edndice\ncolors[1] = \"Purple\";\nconsole.log(colors); // Salida: [\"Red\", \"Purple\", \"Blue\", \"Yellow\"]\n\n// Recorrer el array para acceder a cada elemento\ncolors.forEach(function(color, index) {\n    console.log(index + \": \" + color);\n});\n// Salida:\n// 0: Red\n// 1: Purple\n// 2: Blue\n// 3: Yellow\n</code></pre>"},{"location":"T03/#13-formas-de-iterar-sobre-un-array","title":"1.3 Formas de Iterar sobre un Array","text":"<p>En JavaScript, hay varias formas de iterar sobre un array. Aqu\u00ed est\u00e1n algunos de los m\u00e9todos m\u00e1s comunes:</p> <ol> <li>Bucle <code>for</code> Tradicional</li> <li>Bucle <code>for...of</code></li> <li>Bucle <code>for...in</code></li> <li>M\u00e9todo <code>forEach</code></li> </ol>"},{"location":"T03/#1-bucle-for-tradicional","title":"1. Bucle <code>for</code> Tradicional","text":"<p>El bucle <code>for</code> tradicional es la forma m\u00e1s b\u00e1sica y flexible de iterar sobre un array.</p> <pre><code>const fruits = [\"Apple\", \"Banana\", \"Cherry\", \"Date\"];\n\nfor (let i = 0; i &lt; fruits.length; i++) {\n    console.log(fruits[i]);\n}\n// Salida:\n// Apple\n// Banana\n// Cherry\n// Date\n</code></pre>"},{"location":"T03/#2-bucle-forof","title":"2. Bucle <code>for...of</code>","text":"<p>El bucle <code>for...of</code> se utiliza para iterar sobre los valores de un array.</p> <pre><code>for (const fruit of fruits) {\n    console.log(fruit);\n}\n// Salida:\n// Apple\n// Banana\n// Cherry\n// Date\n</code></pre>"},{"location":"T03/#3-bucle-forin","title":"3. Bucle <code>for...in</code>","text":"<p>El bucle <code>for...in</code> se utiliza para iterar sobre las propiedades enumerables de un objeto, pero tambi\u00e9n se puede usar para iterar sobre los \u00edndices de un array (no recomendado para arrays).</p> <pre><code>for (const index in fruits) {\n    console.log(fruits[index]);\n}\n// Salida:\n// Apple\n// Banana\n// Cherry\n// Date\n</code></pre>"},{"location":"T03/#4-metodo-foreach","title":"4. M\u00e9todo <code>forEach</code>","text":"<p>El m\u00e9todo <code>forEach</code> ejecuta una funci\u00f3n de callback proporcionada una vez para cada elemento del array.</p> <pre><code>fruits.forEach((fruit, index) =&gt; {\n    console.log(index + \": \" + fruit);\n});\n// Salida:\n// 0: Apple\n// 1: Banana\n// 2: Cherry\n// 3: Date\n</code></pre> <p></p>"},{"location":"T03/#14-propiedades-de-los-arrays","title":"1.4 Propiedades de los Arrays","text":"<p>Los arrays en JavaScript vienen con varias propiedades integradas que proporcionan informaci\u00f3n y funcionalidades \u00fatiles. Aqu\u00ed est\u00e1n dos de las propiedades m\u00e1s importantes:</p>"},{"location":"T03/#1-length","title":"1. <code>length</code>","text":"<p>La propiedad <code>length</code> de un array devuelve el n\u00famero de elementos en el array.</p> <pre><code>const fruits = [\"Apple\", \"Banana\", \"Cherry\"];\nconsole.log(fruits.length); // Salida: 3\n</code></pre>"},{"location":"T03/#2-prototype","title":"2. <code>prototype</code>","text":"<p>La propiedad <code>prototype</code> permite agregar nuevas propiedades y m\u00e9todos a todos los objetos array.</p> <pre><code>Array.prototype.first = function() {\n    return this[0];\n};\n\nconsole.log(fruits.first()); // Salida: Apple\n</code></pre>"},{"location":"T03/#15-metodos-importantes-de-los-arrays","title":"1.5 M\u00e9todos Importantes de los Arrays","text":"<p>Los arrays en JavaScript vienen con una variedad de m\u00e9todos integrados que proporcionan funcionalidades poderosas para manipular e interactuar con los elementos del array. Aqu\u00ed est\u00e1n algunos de los m\u00e9todos m\u00e1s importantes:</p> <ol> <li><code>push</code></li> <li><code>pop</code></li> <li><code>shift</code></li> <li><code>unshift</code></li> <li><code>concat</code></li> <li><code>slice</code></li> <li><code>splice</code></li> <li><code>indexOf</code></li> <li><code>includes</code></li> <li><code>forEach</code></li> <li><code>map</code></li> <li><code>filter</code></li> <li><code>reduce</code></li> <li><code>sort</code></li> </ol>"},{"location":"T03/#1-push","title":"1. <code>push</code>","text":"<p>Agrega uno o m\u00e1s elementos al final de un array y devuelve la nueva longitud del array.</p> <pre><code>const fruits = [\"Apple\", \"Banana\"];\nfruits.push(\"Cherry\");\nconsole.log(fruits); // Salida: [\"Apple\", \"Banana\", \"Cherry\"]\n</code></pre>"},{"location":"T03/#2-pop","title":"2. <code>pop</code>","text":"<p>Elimina el \u00faltimo elemento de un array y devuelve ese elemento.</p> <pre><code>const lastFruit = fruits.pop();\nconsole.log(lastFruit); // Salida: Cherry\nconsole.log(fruits); // Salida: [\"Apple\", \"Banana\"]\n</code></pre>"},{"location":"T03/#3-shift","title":"3. <code>shift</code>","text":"<p>Elimina el primer elemento de un array y devuelve ese elemento.</p> <pre><code>const firstFruit = fruits.shift();\nconsole.log(firstFruit); // Salida: Apple\nconsole.log(fruits); // Salida: [\"Banana\"]\n</code></pre>"},{"location":"T03/#4-unshift","title":"4. <code>unshift</code>","text":"<p>Agrega uno o m\u00e1s elementos al principio de un array y devuelve la nueva longitud del array.</p> <pre><code>fruits.unshift(\"Apple\");\nconsole.log(fruits); // Salida: [\"Apple\", \"Banana\"]\n</code></pre>"},{"location":"T03/#5-concat","title":"5. <code>concat</code>","text":"<p>Combina dos o m\u00e1s arrays y devuelve un nuevo array.</p> <pre><code>const moreFruits = [\"Cherry\", \"Date\"];\nconst allFruits = fruits.concat(moreFruits);\nconsole.log(allFruits); // Salida: [\"Apple\", \"Banana\", \"Cherry\", \"Date\"]\n</code></pre>"},{"location":"T03/#6-slice","title":"6. <code>slice</code>","text":"<p>Devuelve una copia superficial de una porci\u00f3n de un array en un nuevo array objeto.</p> <p><pre><code>const someFruits = allFruits.slice(1, 3);\nconsole.log(someFruits); // Salida: [\"Banana\", \"Cherry\"]\n</code></pre> El \u00faltimo \u00edndice no est\u00e1 incluido. En el ejemplo tomamos del \u00edndice 1 al \u00edndice 3 (no incluido). Osea, el 1 y el 2.</p>"},{"location":"T03/#7-splice","title":"7. <code>splice</code>","text":"<p>Cambia el contenido de un array eliminando o reemplazando elementos existentes y/o agregando nuevos elementos.</p> <pre><code>allFruits.splice(2, 1, \"Blueberry\");\nconsole.log(allFruits); // Salida: [\"Apple\", \"Banana\", \"Blueberry\", \"Date\"]\n</code></pre>"},{"location":"T03/#8-indexof","title":"8. <code>indexOf</code>","text":"<p>Devuelve el primer \u00edndice en el que se puede encontrar un elemento dado en el array, o -1 si no est\u00e1 presente.</p> <pre><code>const index = allFruits.indexOf(\"Banana\");\nconsole.log(index); // Salida: 1\n</code></pre>"},{"location":"T03/#9-includes","title":"9. <code>includes</code>","text":"<p>Determina si un array incluye un cierto elemento, devolviendo verdadero o falso.</p> <pre><code>const hasBanana = allFruits.includes(\"Banana\");\nconsole.log(hasBanana); // Salida: true\n</code></pre>"},{"location":"T03/#10-foreach","title":"10. <code>forEach</code>","text":"<p>Ejecuta una funci\u00f3n proporcionada una vez para cada elemento del array.</p> <pre><code>allFruits.forEach(function(fruit, index) {\n    console.log(index + \": \" + fruit);\n});\n// Salida:\n// 0: Apple\n// 1: Banana\n// 2: Blueberry\n// 3: Date\n</code></pre>"},{"location":"T03/#11-map","title":"11. <code>map</code>","text":"<p>Crea un nuevo array con los resultados de llamar a una funci\u00f3n proporcionada en cada elemento del array.</p> <pre><code>const upperCaseFruits = allFruits.map(function(fruit) {\n    return fruit.toUpperCase();\n});\nconsole.log(upperCaseFruits); // Salida: [\"APPLE\", \"BANANA\", \"BLUEBERRY\", \"DATE\"]\n</code></pre>"},{"location":"T03/#12-filter","title":"12. <code>filter</code>","text":"<p>Crea un nuevo array con todos los elementos que pasan la prueba implementada por la funci\u00f3n proporcionada.</p> <pre><code>const longNamedFruits = allFruits.filter(function(fruit) {\n    return fruit.length &gt; 5;\n});\nconsole.log(longNamedFruits); // Salida: [\"Blueberry\"]\n</code></pre>"},{"location":"T03/#13-reduce","title":"13. <code>reduce</code>","text":"<p>Ejecuta una funci\u00f3n reductora en cada elemento del array, resultando en un solo valor de salida.</p> <pre><code>const totalLength = allFruits.reduce(function(accumulator, fruit) {\n    return accumulator + fruit.length;\n}, 0);\nconsole.log(totalLength); // Salida: 26\n</code></pre>"},{"location":"T03/#14-sort","title":"14. <code>sort</code>","text":"<p>Se utiliza para ordenar los elementos de un array en su lugar y devuelve el array ordenado. Cuando no se proporciona una funci\u00f3n de comparaci\u00f3n, <code>sort()</code> convierte cada elemento en una cadena y los ordena lexicogr\u00e1ficamente (orden de diccionario).</p> <ul> <li> <p>Ordenar sin una Funci\u00f3n de Comparaci\u00f3n       <pre><code>const fruits = ['banana', 'apple', 'orange'];\nfruits.sort();\nconsole.log(fruits); // [\"apple\", \"banana\", \"orange\"]\n</code></pre></p> </li> <li> <p>Ordenar con una Funci\u00f3n de Comparaci\u00f3n       <pre><code>const numbers = [4, 2, 5, 1, 3];\nnumbers.sort((a, b) =&gt; a - b);\nconsole.log(numbers); // [1, 2, 3, 4, 5]\n</code></pre></p> </li> </ul> <p>Fuente: MDN Web Docs</p>"},{"location":"T03/#boom","title":"\u00a1Boom!","text":"Ejercicio Pr\u00e1ctico: Manipulaci\u00f3n de Arrays con `map` <p>Crea una p\u00e1gina web que calcule el cuadrado de cada n\u00famero en un array y muestre los resultados.</p>"},{"location":"T03/#2-objetos","title":"2. Objetos","text":"<p>JavaScript est\u00e1 dise\u00f1ado con un paradigma simple basado en objetos. Un objeto es una colecci\u00f3n de propiedades, donde una propiedad es una asociaci\u00f3n entre un nombre (o clave) y un valor.</p> <p>El valor de una propiedad puede ser una funci\u00f3n, en cuyo caso la propiedad se conoce como un m\u00e9todo.</p> <p>Adem\u00e1s de los objetos predefinidos en el navegador, puedes definir tus propios objetos.</p> <p>Fuente: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Working_with_objects</p>"},{"location":"T03/#puntos-clave_1","title":"Puntos Clave:","text":"<ul> <li>Propiedades: Asociaciones entre un nombre (clave) y un valor.</li> <li>M\u00e9todos: Funciones que son propiedades de los objetos.</li> <li>Objetos Personalizados: Objetos definidos por el usuario adem\u00e1s de los objetos definidos por el navegador.</li> </ul>"},{"location":"T03/#21-declarando-objetos","title":"2.1 Declarando Objetos","text":"<p>En JavaScript, hay dos formas principales de crear objetos:</p> <ol> <li>Usando el constructor <code>Object</code> y luego a\u00f1adiendo propiedades.</li> <li>Usando la notaci\u00f3n de literal de objeto para definir el objeto y sus propiedades directamente.</li> </ol>"},{"location":"T03/#1-usando-el-constructor-object","title":"1. Usando el Constructor <code>Object</code>","text":"<p>Puedes crear un objeto vac\u00edo usando el constructor <code>Object</code> y luego a\u00f1adir propiedades a \u00e9l.</p> <pre><code>// Crear un objeto vac\u00edo usando el constructor Object\nconst myCar = new Object();\n\n// A\u00f1adir propiedades al objeto\nmyCar.make = \"Ford\";\nmyCar.model = \"Mustang\";\nmyCar.year = 1969;\n\n// Acceder a las propiedades\nconsole.log(`Make: ${myCar.make} Model: ${myCar.model}`);\n</code></pre>"},{"location":"T03/#2-usando-la-notacion-de-literal-de-objeto","title":"2. Usando la Notaci\u00f3n de Literal de Objeto","text":"<p>Puedes definir el objeto y sus propiedades directamente usando la notaci\u00f3n de literal de objeto, que es m\u00e1s concisa y f\u00e1cil de leer.</p> <pre><code>// Crear un objeto con notaci\u00f3n literal\nconst myCar2 = {\n  make: 'Seat',\n  model: '600',\n  year: '1965'\n}\n\n// Acceder a las propiedades\nconsole.log(`Make: ${myCar2.make} Model: ${myCar2.model}`);\n</code></pre>"},{"location":"T03/#crear-un-objeto-con-metodos","title":"Crear un Objeto con M\u00e9todos:","text":"<pre><code>// Definir un objeto usando notaci\u00f3n literal de objeto\nconst person = {\n    firstName: \"John\",\n    lastName: \"Doe\",\n    age: 30,\n    // este es un m\u00e9todo:\n    greet: function() {\n        console.log(\"Hello, \" + this.firstName + \" \" + this.lastName);\n    }\n};\n\n// Acceder a las propiedades y llamar al m\u00e9todo\nconsole.log(person.firstName); // Salida: John\n// Llamar al m\u00e9todo\nperson.greet(); // Salida: Hello, John Doe\n</code></pre>"},{"location":"T03/#22-funciones-constructoras-e-instancias-de-objetos","title":"2.2 Funciones Constructoras e Instancias de Objetos","text":"<p>En JavaScript, puedes crear una funci\u00f3n constructora para definir la estructura y el comportamiento de los objetos. Luego, puedes crear instancias del objeto usando la palabra clave <code>new</code>.</p> <pre><code>// Definir una funci\u00f3n constructora\nfunction Person(firstName, lastName, age) {\n    this.firstName = firstName;\n    this.lastName = lastName;\n    this.age = age;\n    this.greet = function() {\n        console.log(\"Hello, \" + this.firstName + \" \" + this.lastName);\n    };\n}\n\n// Crear instancias del objeto Person\nconst person1 = new Person(\"John\", \"Doe\", 30);\nconst person2 = new Person(\"Jane\", \"Smith\", 25);\n\n// Acceder a las propiedades y llamar a los m\u00e9todos\nconsole.log(person1.firstName); // Salida: John\nperson1.greet(); // Salida: Hello, John Doe\n\nconsole.log(person2.firstName); // Salida: Jane\nperson2.greet(); // Salida: Hello, Jane Smith\n</code></pre>"},{"location":"T03/#3-clases-en-javascript","title":"3. Clases en JavaScript","text":"<p>Desde ES6 (ECMAScript 2015), JavaScript admite la sintaxis de clases, permitiendo un estilo de programaci\u00f3n orientado a objetos m\u00e1s tradicional. Aqu\u00ed est\u00e1n algunas caracter\u00edsticas clave de las clases ES6:</p>"},{"location":"T03/#declaracion-de-clase-con-constructor","title":"Declaraci\u00f3n de Clase con Constructor","text":"<p>Las clases en JavaScript pueden tener un m\u00e9todo <code>constructor</code>, que es un m\u00e9todo especial para inicializar instancias de la clase con ciertas propiedades.</p> <pre><code>class Car {\n  constructor(brand, model) {\n    this.brand = brand;\n    this.model = model;\n    this.mileage = 0;\n  }\n}\n</code></pre>"},{"location":"T03/#metodos-setter-y-getter","title":"M\u00e9todos Setter y Getter","text":"<p>Las clases ES6 tambi\u00e9n admiten m\u00e9todos setter y getter usando las palabras clave <code>set</code> y <code>get</code>, respectivamente, permitiendo el acceso controlado a las propiedades del objeto.</p> <pre><code>class Car {\n  constructor(brand, model) {\n    this._brand = brand;\n    this._model = model;\n    this._mileage = 0;\n  }\n\n  // M\u00e9todo regular\n  drive(distance) {\n    this._mileage += distance;\n    console.log(`Driving ${distance} miles in ${this._brand} ${this._model}.`);\n  }\n\n  // M\u00e9todo getter\n  get mileage() {\n    return this._mileage;\n  }\n\n  // M\u00e9todo setter\n  set mileage(value) {\n    if (value &gt;= 0) {\n      this._mileage = value;\n    } else {\n      console.error(\"Mileage cannot be negative.\");\n    }\n  }\n}\n\n// Crear una instancia de Car\nconst myCar = new Car(\"Toyota\", \"Corolla\");\n\n// Llamar al m\u00e9todo regular para conducir\nmyCar.drive(50);\nmyCar.drive(30);\n\n// Acceder al kilometraje usando el m\u00e9todo getter\nconsole.log(`Total mileage: ${myCar.mileage} miles.`);\n</code></pre>"},{"location":"T03/#4-arrays-de-objetos-aqui-no-arreglamos-nada","title":"4. Arrays de Objetos (aqui no arreglamos nada)","text":"<p>En JavaScript, los arrays pueden contener una colecci\u00f3n de objetos. Cada objeto dentro del array puede tener sus propias propiedades y m\u00e9todos, lo que permite una organizaci\u00f3n y manipulaci\u00f3n estructurada de los datos.</p> <pre><code>// Definir un array de objetos (array de coches)\nlet cars = [\n  { brand: \"Toyota\", model: \"Corolla\", year: 2020 },\n  { brand: \"Honda\", model: \"Civic\", year: 2019 },\n  { brand: \"Ford\", model: \"Mustang\", year: 2021 }\n];\n\n// Acceder a los objetos en el array\nconsole.log(cars[0]); // Salida: { brand: \"Toyota\", model: \"Corolla\", year: 2020 }\n\n// A\u00f1adir un nuevo objeto al array\ncars.push({ brand: \"Tesla\", model: \"Model S\", year: 2022 });\n\n// Modificar un objeto en el array\ncars[1].year = 2020;\n\n// Eliminar un objeto del array\ncars.splice(2, 1); // Elimina el objeto en el \u00edndice 2\n\n// Iterar sobre el array de objetos\ncars.forEach(function(car) {\n  console.log(`${car.brand} ${car.model} (${car.year})`);\n});\n</code></pre>"},{"location":"T03/#5-notacion-json","title":"5. Notaci\u00f3n JSON","text":"<p>JSON (JavaScript Object Notation) es un formato ligero de intercambio de datos que es f\u00e1cil de leer y escribir para los humanos, y f\u00e1cil de analizar y generar para las m\u00e1quinas. Se utiliza ampliamente como formato para intercambiar datos entre un servidor y una aplicaci\u00f3n web, y es un formato de datos est\u00e1ndar con muchos lenguajes de programaci\u00f3n.</p>"},{"location":"T03/#sintaxis","title":"Sintaxis","text":"<ul> <li>Datos en pares nombre/valor: Los datos JSON se representan como pares clave-valor.</li> <li>Datos separados por comas: Los datos JSON se separan por comas.</li> <li>Llaves que contienen objetos: Los datos JSON est\u00e1n encerrados en llaves <code>{}</code> para denotar objetos.</li> <li>Corchetes que contienen arrays: Los arrays JSON est\u00e1n encerrados en corchetes <code>[]</code>.</li> </ul> <pre><code>{\n  \"firstName\": \"John\",\n  \"lastName\": \"Doe\",\n  \"age\": 30,\n  \"isStudent\": false,\n  \"address\": {\n    \"streetAddress\": \"123 Main Street\",\n    \"city\": \"Anytown\",\n    \"state\": \"CA\",\n    \"postalCode\": \"12345\"\n  },\n  \"phoneNumbers\": [\n    { \"type\": \"home\", \"number\": \"555-1234\" },\n    { \"type\": \"work\", \"number\": \"555-5678\" }\n  ]\n}\n</code></pre>"},{"location":"T03/#puntos-clave_2","title":"Puntos Clave","text":"<ul> <li>Tipos de Datos: JSON admite cadenas, n\u00fameros, objetos, arrays, booleanos y valores nulos.</li> <li>Formato Universal: JSON es independiente del lenguaje de programaci\u00f3n, lo que lo hace adecuado para el intercambio de datos.</li> <li>Parseo y Serializaci\u00f3n: JSON puede ser convertido en objetos JavaScript usando <code>JSON.parse()</code> y convertido de nuevo a JSON usando <code>JSON.stringify()</code>.</li> </ul>"},{"location":"T03/#uso","title":"Uso","text":"<ul> <li>APIs Web: Muchas APIs web utilizan JSON para enviar datos entre servidores y navegadores web.</li> <li>Archivos de Configuraci\u00f3n: JSON se utiliza en archivos de configuraci\u00f3n debido a su formato legible.</li> <li>Almacenamiento de Datos: JSON se utiliza para almacenar e intercambiar datos estructurados en bases de datos y aplicaciones.</li> </ul>"},{"location":"T03/#ejemplo-de-parseo-y-serializacion-de-json","title":"Ejemplo de Parseo y Serializaci\u00f3n de JSON","text":"<pre><code>// Objeto con m\u00faltiples atributos, incluyendo un array de objetos\nlet user = {\n  name: \"John Doe\",\n  age: 35,\n  address: {\n    street: \"Main Street\",\n    city: \"New York\",\n    country: \"USA\"\n  },\n  orderHistory: [\n    { id: 1, product: \"Smartphone\n\n\", quantity: 1 },\n    { id: 2, product: \"Tablet\", quantity: 2 },\n    { id: 3, product: \"Laptop\", quantity: 1 }\n  ]\n};\n\n// Convertir a JSON usando JSON.stringify()\nlet jsonUser = JSON.stringify(user);\n\nconsole.log(\"Objeto convertido a JSON:\");\nconsole.log(jsonUser);\n\n// Convertir de vuelta a objeto usando JSON.parse()\nlet parsedObject = JSON.parse(jsonUser);\n\nconsole.log(\"\\nJSON convertido de vuelta a objeto:\");\nconsole.log(parsedObject);\n</code></pre>"},{"location":"T04/","title":"UNIDAD 4 - Manipulaci\u00f3n del DOM","text":""},{"location":"T04/#1-modelo-de-objetos-del-documento-dom","title":"1. Modelo de Objetos del Documento (DOM)","text":"<p>El DOM (Modelo de Objetos del Documento) es un est\u00e1ndar del W3C que define c\u00f3mo acceder a documentos como HTML y XML. Es una interfaz de programaci\u00f3n de aplicaciones (API) de la plataforma W3C que permite a los scripts acceder y actualizar din\u00e1micamente el contenido, la estructura y el estilo de un documento.</p> <p>Es decir, si analizamos el documento html de la p\u00e1gina web, nos vamos a encontrar una serie de etiquetas  unas dentro de otras. DOM permite manejar esas etiquetas como objetos de la p\u00e1gina, y de esta forma gestionarla din\u00e1micamente.</p> <ul> <li>Est\u00e1ndar: El DOM es un est\u00e1ndar mantenido por el World Wide Web Consortium (W3C) que proporciona una representaci\u00f3n estructurada de un documento.</li> <li>API: Sirve como una interfaz para la programaci\u00f3n, permitiendo a los desarrolladores manipular la estructura, el estilo y el contenido del documento a trav\u00e9s de lenguajes de scripting como JavaScript.</li> <li>Actualizaciones Din\u00e1micas: Con el DOM, los scripts pueden modificar din\u00e1micamente el contenido, la estructura y el estilo del documento, permitiendo aplicaciones web interactivas y reactivas.</li> </ul> <p>Aqu\u00ed tienes un ejemplo simple de c\u00f3mo podr\u00edas usar el DOM para cambiar din\u00e1micamente el contenido de un elemento HTML:</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"es\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\n    &lt;title&gt;Ejemplo de DOM&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;h1 id=\"title\"&gt;\u00a1Hola, Mundo!&lt;/h1&gt;\n    &lt;button onclick=\"changeTitle()\"&gt;Cambiar T\u00edtulo&lt;/button&gt;\n\n    &lt;script&gt;\n        function changeTitle() {\n            // Accede al elemento DOM con el id 'title'\n            const titleElement = document.getElementById('title');\n            // Cambia el contenido del elemento\n            titleElement.textContent = '\u00a1Hola, DOM!';\n        }\n    &lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"T04/#11-historia-del-dom","title":"1.1 Historia del DOM","text":"<ul> <li> <p>Web Temprana (1990s): La web comenz\u00f3 con p\u00e1ginas HTML est\u00e1ticas simples. No hab\u00eda una manera est\u00e1ndar de manipular el contenido o la estructura de estas p\u00e1ginas de manera din\u00e1mica.</p> </li> <li> <p>Guerras Netscape e IE: Netscape Navigator e Internet Explorer (IE) fueron los dos navegadores dominantes. Cada uno desarroll\u00f3 sus propios m\u00e9todos para manipular documentos HTML, lo que llev\u00f3 a problemas de compatibilidad.</p> </li> <li> <p>Introducci\u00f3n de JavaScript (1995): Brendan Eich cre\u00f3 JavaScript para Netscape, permitiendo interacciones din\u00e1micas b\u00e1sicas. Sin embargo, el enfoque de Netscape era diferente del de IE. Netscape Navigator 2.0 fue el primer navegador en implementar el denominado DOM Nivel 0.</p> </li> <li> <p>Participaci\u00f3n del W3C (1998): El World Wide Web Consortium (W3C) intervino para estandarizar c\u00f3mo se deber\u00edan acceder y manipular los documentos, resultando en la creaci\u00f3n del Modelo de Objetos del Documento (DOM) Nivel 1.</p> </li> <li> <p>DOM Nivel 1 (1998): Se lanz\u00f3 la primera versi\u00f3n del DOM, proporcionando una manera estandarizada de manipular la estructura y el contenido del documento a trav\u00e9s de diferentes navegadores.</p> </li> <li> <p>DOM Nivel 2 (2000): Introdujo caracter\u00edsticas m\u00e1s avanzadas como soporte para CSS, eventos y manipulaci\u00f3n de documentos XML.</p> </li> <li> <p>DOM Nivel 3 (2004): Expansi\u00f3n adicional de la API para incluir m\u00e1s caracter\u00edsticas para la manipulaci\u00f3n y navegaci\u00f3n de documentos.</p> </li> <li> <p>HTML5 y la Web Moderna (2010s): HTML5 trajo actualizaciones significativas al DOM, haci\u00e9ndolo m\u00e1s robusto y permitiendo aplicaciones web m\u00e1s complejas. Los navegadores modernos han adoptado e implementado estos est\u00e1ndares de manera consistente.</p> </li> </ul> <p>El desarrollo y la estandarizaci\u00f3n del DOM han sido cruciales para crear la web din\u00e1mica e interactiva que conocemos hoy, proporcionando una manera consistente para que los scripts interact\u00faen y modifiquen documentos web a trav\u00e9s de diferentes navegadores.</p> <p>--&gt; Est\u00e1ndar DOM Nivel 3 por el W3C</p>"},{"location":"T04/#2-estructura-del-arbol-dom","title":"2. Estructura del \u00c1rbol DOM","text":"<p>Un \u00e1rbol DOM es una estructura de \u00e1rbol cuyos nodos representan el contenido de un documento HTML o XML. Cada documento HTML o XML tiene una representaci\u00f3n en \u00e1rbol DOM. Por ejemplo, considera el siguiente documento:</p> <pre><code>&lt;html lang=\"es\"&gt;\n  &lt;head&gt;\n    &lt;title&gt;My Tittle&lt;/title&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n    &lt;a href=\"http://alink.com\"&gt;My Link&lt;/a&gt;\n    &lt;h1&gt;My Header&lt;/h1&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>Tiene un \u00e1rbol DOM que se ve as\u00ed:</p> <p></p> <p>Aunque el \u00e1rbol anterior es similar al \u00e1rbol DOM del documento, no es id\u00e9ntico, ya que el \u00e1rbol DOM real conserva el espacio en blanco.</p> <p>Cuando un navegador web analiza un documento HTML, construye un \u00e1rbol DOM y luego lo usa para mostrar el documento.</p> <p>FUENTE: mdn web docs_</p>"},{"location":"T04/#reglas-de-estructura-del-arbol","title":"Reglas de Estructura del \u00c1rbol:","text":"<p>Para organizar la estructura del \u00e1rbol, hay una serie de reglas:</p> <ul> <li>En el \u00e1rbol de nodos, el nodo superior (documento) se llama ra\u00edz.</li> <li>Cada nodo, excepto el nodo ra\u00edz, tiene un padre.</li> <li>Un nodo puede tener cualquier n\u00famero de hijos.</li> <li>Una hoja es un nodo con sin hijos.</li> <li>Los nodos que comparten el mismo padre son hermanos.</li> </ul>"},{"location":"T04/#21-la-interfaz-node","title":"2.1 La Interfaz Node","text":"<p>Un Node es una interfaz abstracta que representa un solo nodo en el \u00e1rbol. Estos nodos pueden ser un Documento, un Elemento, un DocumentFragment y m\u00e1s.</p> <ul> <li>Document: El nodo ra\u00edz del documento HTML.</li> <li>DocumentType: Un nodo que representa el DTD (Definici\u00f3n de Tipo de Documento) de la p\u00e1gina.</li> <li>Element: Un nodo que representa un elemento HTML.</li> <li>Attr: Un nodo que representa un atributo de un elemento.</li> <li>Text: Un nodo que almacena el texto contenido dentro de un nodo Elemento.</li> <li>Comment: Un nodo que almacena un comentario en el documento HTML.</li> </ul>"},{"location":"T04/#interfaz-node","title":"Interfaz Node","text":"<ul> <li>Para manipular la informaci\u00f3n de los nodos, JavaScript crea un objeto llamado <code>Node</code>.</li> <li>Este objeto define propiedades y m\u00e9todos para procesar documentos.</li> <li>Tambi\u00e9n define un conjunto de constantes que identifican los tipos de nodos. Estos son los valores que la propiedad <code>nodeType</code> puede tener:</li> </ul> Constante Descripci\u00f3n Valor <code>Node.ELEMENT_NODE</code> Representa un nodo de elemento. 1 <code>Node.ATTRIBUTE_NODE</code> Representa un nodo de atributo. 2 <code>Node.TEXT_NODE</code> Representa un nodo de texto. 3 <code>Node.CDATA_SECTION_NODE</code> Representa un nodo de secci\u00f3n CDATA. 4 <code>Node.ENTITY_REFERENCE_NODE</code> Representa un nodo de referencia de entidad. 5 <code>Node.ENTITY_NODE</code> Representa un nodo de entidad. 6 <code>Node.PROCESSING_INSTRUCTION_NODE</code> Representa un nodo de instrucci\u00f3n de procesamiento. 7 <code>Node.COMMENT_NODE</code> Representa un nodo de comentario. 8 <code>Node.DOCUMENT_NODE</code> Representa el nodo del documento. 9 <code>Node.DOCUMENT_TYPE_NODE</code> Representa el nodo de tipo de documento. 10 <code>Node.DOCUMENT_FRAGMENT_NODE</code> Representa un nodo de fragmento de documento. 11 <code>Node.NOTATION_NODE</code> Representa un nodo de notaci\u00f3n. 12"},{"location":"T04/#propiedades-y-metodos-de-la-interfaz-node","title":"Propiedades y M\u00e9todos de la interfaz Node","text":"Propiedad/M\u00e9todo Descripci\u00f3n <code>nodeName</code> Devuelve el nombre del nodo. <code>nodeType</code> Devuelve un c\u00f3digo entero que representa el tipo de nodo. <code>nodeValue</code> Establece o devuelve el valor del nodo. Para nodos de elementos, esto es <code>null</code>. <code>parentNode</code> Devuelve el nodo padre del nodo especificado. <code>childNodes</code> Devuelve una NodeList de los nodos hijos del nodo especificado. <code>firstChild</code> Devuelve el primer nodo hijo del nodo especificado. <code>lastChild</code> Devuelve el \u00faltimo nodo hijo del nodo especificado. <code>previousSibling</code> Devuelve el nodo hermano anterior del nodo especificado. <code>nextSibling</code> Devuelve el nodo hermano siguiente del nodo especificado. <code>textContent</code> Establece o devuelve el contenido de texto del nodo y sus descendientes. <code>appendChild(node)</code> Agrega un nuevo nodo hijo al final de la lista de hijos de un nodo padre especificado. <code>removeChild(node)</code> Elimina un nodo hijo del nodo padre especificado. <code>replaceChild(newNode, oldNode)</code> Reemplaza un nodo hijo por otro en el nodo padre especificado. <code>cloneNode(deep)</code> Clona el nodo actual. Si <code>deep</code> es <code>true</code>, tambi\u00e9n clona todos los nodos descendientes. <p>Estos m\u00e9todos y propiedades proporcionan una variedad de maneras para manipular los nodos dentro del \u00e1rbol DOM, permitiendo una amplia gama de operaciones en la estructura del documento.</p> <p>Para saber m\u00e1s --&gt; Interfaz Node @ mdn web docs_</p>"},{"location":"T04/#3-la-clase-element","title":"3. La Clase Element","text":"<p>La clase <code>Element</code> representa un elemento en la jerarqu\u00eda del DOM, heredando de la interfaz <code>Node</code>.</p> <p>En el contexto del DOM (Modelo de Objetos del Documento), un elemento se refiere a un elemento HTML individual dentro de un documento HTML. Los elementos HTML son los bloques de construcci\u00f3n de las p\u00e1ginas web e incluyen etiquetas como <code>&lt;div&gt;</code>, <code>&lt;p&gt;</code>, <code>&lt;a&gt;</code>, <code>&lt;img&gt;</code>, entre otras.</p>"},{"location":"T04/#algunas-propiedades-y-metodos-de-la-clase-element","title":"Algunas Propiedades y M\u00e9todos de la clase Element","text":"Propiedad/M\u00e9todo Descripci\u00f3n <code>attributes</code> Devuelve un NamedNodeMap de los atributos del elemento. <code>classList</code> Devuelve un DOMTokenList que contiene la lista de atributos de clase. <code>id</code> Establece o devuelve el ID del elemento. <code>className</code> Establece o devuelve el(los) nombre(s) de clase del elemento. <code>tagName</code> Devuelve el nombre de la etiqueta del elemento en may\u00fasculas. <code>innerHTML</code> Obtiene o establece el contenido HTML (incluyendo elementos hijos y texto) del elemento. <code>outerHTML</code> Obtiene o establece el contenido HTML (incluyendo el propio elemento) del elemento. <code>textContent</code> Obtiene o establece el contenido de texto del elemento y sus descendientes. <code>setAttribute(name, value)</code> Establece el valor de un atributo en el elemento especificado. <code>getAttribute(name)</code> Devuelve el valor del atributo con el nombre especificado en el elemento. <code>removeAttribute(name)</code> Elimina el atributo especificado del elemento. <code>hasAttribute(name)</code> Devuelve un Booleano que indica si el elemento tiene o no el atributo especificado. <code>appendChild(node)</code> A\u00f1ade un nuevo nodo hijo al final de la lista de hijos de un nodo padre especificado. <code>removeChild(node)</code> Elimina un nodo hijo del DOM y devuelve el nodo eliminado. <code>querySelector(selector)</code> Devuelve el primer elemento que coincide con el selector CSS especificado dentro del sub\u00e1rbol del elemento. <code>querySelectorAll(selector)</code> Devuelve una NodeList de todos los elementos que coinciden con el selector CSS especificado dentro del sub\u00e1rbol del elemento. <code>addEventListener(event, callback)</code> A\u00f1ade un listener de eventos al elemento. <code>removeEventListener(event, callback)</code> Elimina un listener de eventos del elemento. <p>Leer m\u00e1s: --&gt; Clase Element @ mdn web docs</p>"},{"location":"T04/#31-moviendose-a-elementos-relativos","title":"3.1 Movi\u00e9ndose a Elementos Relativos","text":"<p>Podemos navegar por el \u00e1rbol del DOM desde un nodo dado a elementos relativos como padres, hijos y hermanos utilizando estas propiedades y m\u00e9todos:</p> M\u00e9todo/Propiedad Descripci\u00f3n <code>nextElementSibling()</code> Devuelve el elemento inmediatamente siguiente al elemento especificado en el \u00e1rbol del DOM. <code>previousElementSibling()</code> Devuelve el elemento inmediatamente anterior al elemento especificado en el \u00e1rbol del DOM. <code>parentElement()</code> Devuelve el elemento padre del elemento especificado en el \u00e1rbol del DOM. <code>firstElementChild()</code> Devuelve el primer elemento hijo del elemento especificado. <code>lastElementChild()</code> Devuelve el \u00faltimo elemento hijo del elemento especificado. <code>childNodes()</code> Devuelve una HTMLCollection en vivo de los elementos hijos del elemento especificado. <code>childElementCount()</code> Devuelve el n\u00famero de elementos hijos del elemento especificado. <p>Mucho ojo con las versiones antiguas de estos m\u00e9todos, el <code>firstChild()</code>, <code>lastChild()</code>, o <code>children()</code>.  Est\u00e1n y funcionan como les da la gana. Lo mejor es que utilic\u00e9is las funciones de la tabla anterior... Y acordaros que  <code>childNodes()</code>  devuelve un HTMLCollection, por lo tanto, tendremos que acceder a sus elementos (o iterar en ellos), para tener objetos de tipo element. No podemos tratar a la HTMLCollection como un Element, porque no lo es, y peta.</p>"},{"location":"T04/#32-acceso-directo-a-elementos","title":"3.2 Acceso Directo a Elementos","text":"<p>Podemos acceder de manera m\u00e1s directa a los nodos de los elementos del DOM con estos m\u00e9todos:</p>"},{"location":"T04/#metodos-para-acceso-directo-a-elementos","title":"M\u00e9todos para Acceso Directo a Elementos","text":"<ul> <li><code>getElementById(id)</code>: Recupera un elemento por su atributo ID. Si utilizamos este, debemos asegurarnos que el <code>id</code> buscado es realmente \u00fanico en toda la p\u00e1gina. Si no puede devovler cualquiera de los que haya, y ojiito si son de diferente etiqueta..... Si estamos \"pintando\" datos de un JSON, lo l\u00f3gico es que cambiemos los <code>\u00ecd</code> de todos los elementos en los que metemos los datos, para que no se repitan.</li> <li><code>getElementsByClassName(className)</code>: Recupera una colecci\u00f3n de elementos que tienen un nombre de clase especificado.</li> <li><code>getElementsByTagName(tagName)</code>: Recupera una colecci\u00f3n de elementos con el nombre de etiqueta especificado.</li> <li><code>querySelector(selector)</code>: Devuelve el primer elemento que coincide con un selector CSS especificado.</li> <li><code>querySelectorAll(selector)</code>: Devuelve una NodeList que contiene todos los elementos que coinciden con un selector CSS especificado.</li> </ul> <p>Cuidadinnn! las funciones <code>getElements...</code> devuelven un HTMLColection (aunque tenga un s\u00f3lo elemento). Por tanto, tenemos que manejarlas o iterar en ellas. Si utilizamos las funciones de JQuery, debemos importar la libreria.</p>"},{"location":"T04/#ejemplo-en-javascript","title":"Ejemplo en JavaScript","text":"<pre><code>// Ejemplo de acceso directo y manipulaci\u00f3n\nconst paragraph1 = document.getElementById('paragraph1');\nparagraph1.style.fontWeight = 'bold';\n\nconst elementsByClass = document.getElementsByClassName('myClass');\nfor (let element of elementsByClass) {\n    element.classList.add('highlight');\n}\n\nconst elementsByTagName = document.getElementsByTagName('p');\nfor (let element of elementsByTagName) {\n    element.style.color = 'blue';\n}\n\nconst elementByQuery = document.querySelector('#parent &gt; p:nth-child(2)');\nelementByQuery.textContent = 'Segundo p\u00e1rrafo modificado';\n\nconst elementsByQueryAll = document.querySelectorAll('.myClass');\nelementsByQueryAll.forEach(element =&gt; {\n    element.style.border = '1px solid red';\n});\n</code></pre>"},{"location":"T04/#33-accediendo-a-los-atributos-de-un-elemento","title":"3.3 Accediendo a los Atributos de un Elemento","text":"<p>El DOM permite el acceso directo a todos los atributos de un elemento. La propiedad <code>attributes</code> proporciona acceso a los atributos de un nodo de elemento.</p> <p>El DOM ofrece varios m\u00e9todos que facilitan el acceso directo para modificar, insertar y eliminar atributos de un elemento:</p> <ul> <li><code>getAttribute(attributeName)</code>: Este m\u00e9todo es equivalente a <code>attributes.getNamedItem(attributeName)</code>.</li> <li><code>setAttribute(attributeName, attributeValue)</code>: Este m\u00e9todo es equivalente a <code>attributes.getNamedItem(attributeName).value = attributeValue</code>.</li> <li><code>removeAttribute(attributeName)</code>: Este m\u00e9todo es equivalente a <code>attributes.removeNamedItem(attributeName)</code>.</li> </ul> <p>Tambi\u00e9n podemos acceder y modificar el valor de un atributo directamente usando la notaci\u00f3n de puntos seguida del nombre del atributo:</p> <pre><code>const value = element.value;\nelement.value = \"nuevo valor\";\nelement.checked = true;\n</code></pre>"},{"location":"T04/#34-el-atributo-style-de-un-elemento","title":"3.4 El Atributo Style de un Elemento","text":"<p>Podemos modificar directamente las propiedades CSS de un elemento accediendo a su atributo <code>style</code>:</p> <pre><code>element.style.color = \"blue\";\nelement.style.fontFamily = \"Arial\";\nelement.style.display = \"block\";\n</code></pre>"},{"location":"T04/#35-el-atributo-classlist","title":"3.5 El Atributo Classlist","text":"<p>El atributo <code>classList</code> de un nodo de Elemento nos permite gestionar la lista de clases a las que pertenece el elemento HTML. Aunque el atributo en s\u00ed es de solo lectura, proporciona varios m\u00e9todos para consultar y modificar las clases:</p> <ul> <li><code>add( String [, String] )</code>: A\u00f1ade las clases especificadas. Si estas clases ya existen en el atributo class del elemento, se ignoran.</li> <li> <p><code>remove( String [, String] )</code>: Elimina las clases especificadas. Eliminar una clase que no existe no arroja un error.</p> <pre><code>// Selecciona un elemento con id \"myElement\"\nconst element = document.getElementById(\"myElement\");\n\n// A\u00f1adir una clase\nelement.classList.add(\"active\");\n\n// Eliminar una clase\nelement.classList.remove(\"inactive\");\n</code></pre> </li> <li> <p><code>item( Number )</code>: Devuelve el valor de la clase por \u00edndice en la colecci\u00f3n.</p> </li> <li> <p><code>toggle( String [, force] )</code>: Cuando solo se proporciona un argumento:</p> <ul> <li>Alterna el valor de la clase; por ejemplo, si la clase existe, la elimina y devuelve <code>false</code>; si no, la a\u00f1ade y devuelve <code>true</code>.</li> <li>Cuando se proporciona el segundo argumento:<ul> <li>Si el segundo argumento eval\u00faa como <code>true</code>, a\u00f1ade la clase especificada.</li> <li>Si eval\u00faa como <code>false</code>, elimina la clase especificada. <pre><code>// Selecciona un elemento con clase \"toggleElement\"\nconst element = document.querySelector(\".toggleElement\");\n\n// Alterna una clase\nelement.classList.toggle(\"hidden\");\n\n// Alterna con par\u00e1metro force (true/false)\nelement.classList.toggle(\"visible\", true);  // A\u00f1ade la clase \"visible\"\nelement.classList.toggle(\"visible\", false); // Elimina la clase \"visible\"\n</code></pre></li> </ul> </li> </ul> </li> <li> <p><code>contains( String )</code>: Comprueba si la clase especificada existe en el atributo class del elemento.</p> <pre><code>// Selecciona un elemento con id \"myElement\"\nconst element = document.getElementById(\"myElement\");\n\n// Comprueba si una clase existe\nif (element.classList.contains(\"active\")) {\n  console.log(\"El elemento est\u00e1 activo\");\n} else {\n  console.log(\"El elemento no est\u00e1 activo\");\n}\n</code></pre> </li> <li> <p><code>replace( oldClass, newClass )</code>: Reemplaza una clase existente por una nueva.</p> <pre><code>// Select an element with id \"myElement\"\nconst element = document.getElementById(\"myElement\");\n\n// Check if a class exists\nif (element.classList.contains(\"active\")) {\n  console.log(\"Element is active\");\n} else {\n  console.log(\"Element is not active\");\n}\n</code></pre> </li> </ul>"},{"location":"T04/#4-creando-nuevo-contenido","title":"4. Creando Nuevo Contenido","text":"<p>Al manipular el Modelo de Objetos del Documento (DOM) en JavaScript, existen varias formas de crear y agregar contenido nuevo a una p\u00e1gina web. Inicialmente, podemos recurrir a un m\u00e9todo m\u00e1s simple modificando directamente la propiedad <code>innerHTML</code> de un elemento.</p> <p>Ejemplo: <pre><code>// Selecciona un elemento por su ID\nconst container = document.getElementById('container');\n\n// Modifica el innerHTML para agregar contenido nuevo\ncontainer.innerHTML = '&lt;h2&gt;Nuevo Contenido&lt;/h2&gt;&lt;p&gt;Este es contenido a\u00f1adido din\u00e1micamente.&lt;/p&gt;';\n// A\u00f1ade un nuevo p\u00e1rrafo\ncontainer.innerHTML += '&lt;p&gt;A\u00f1adiendo nuevo p\u00e1rrafo.&lt;/p&gt;';\n</code></pre></p> <p>Aunque <code>innerHTML</code> proporciona un enfoque directo, m\u00e9todos m\u00e1s sofisticados ofrecen un mayor control y beneficios de rendimiento. Estos m\u00e9todos implican la creaci\u00f3n y manipulaci\u00f3n directa de nodos del DOM:</p>"},{"location":"T04/#41-metodos-para-crear-nuevos-nodos","title":"4.1 M\u00e9todos para Crear Nuevos Nodos","text":"<p>En JavaScript, puedes crear varios tipos de nodos utilizando los siguientes m\u00e9todos:</p> <ul> <li><code>createElement(tagName)</code>: Crea un nuevo nodo de elemento con el nombre de etiqueta especificado.</li> <li><code>createTextNode(text)</code>: Crea un nodo de texto con el contenido de texto especificado.</li> <li><code>createAttribute(name)</code>: Crea un nodo de atributo con el nombre dado.</li> <li><code>createCDATASection(text)</code>: Crea un nodo de secci\u00f3n CDATA con el texto especificado.</li> <li><code>createComment(text)</code>: Crea un nodo de comentario con el texto especificado.</li> <li><code>createDocumentFragment()</code>: Crea un nodo de fragmento de documento.</li> </ul>"},{"location":"T04/#42-anadir-nuevos-nodos-al-dom","title":"4.2 A\u00f1adir Nuevos Nodos al DOM","text":"<p>Una vez que has creado nodos, puedes agregarlos al DOM (Modelo de Objetos del Documento) usando m\u00e9todos como:</p> <ul> <li>El m\u00e9todo <code>append()</code>: acepta m\u00faltiples par\u00e1metros, cada uno de los cuales puede ser un objeto de nodo o una DOMString (una cadena de texto o HTML). A\u00f1ade cada par\u00e1metro como un hijo del elemento.</li> <li><code>appendChild(node)</code>: Este m\u00e9todo acepta solo un par\u00e1metro, que debe ser un objeto de nodo. A\u00f1ade el nodo hijo especificado como el \u00faltimo hijo del elemento.</li> <li><code>insertBefore(newNode, referenceNode)</code>: Inserta un nuevo nodo antes de un nodo existente especificado en el \u00e1rbol del DOM.</li> </ul> <p>Ejemplo:</p> <pre><code>// Crear un nuevo elemento &lt;div&gt;\nconst divElement = document.createElement('div');\ndivElement.textContent = 'Elemento Padre';\n\n// A\u00f1adir m\u00faltiples nodos hijos usando append()\ndivElement.append(\n  'Nodo de Texto',   // A\u00f1ade un nodo de texto\n  document.createElement('span'),  // A\u00f1ade un elemento &lt;span&gt; vac\u00edo\n  '&lt;strong&gt;HTML&lt;/strong&gt;'  // A\u00f1ade una cadena HTML como nodo de texto\n);\n\n// Seleccionar el div con la clase .main\nconst mainDiv = document.querySelector(\"div.main\");\n\n// A\u00f1adir el elemento div al div principal\nmainDiv.appendChild(divElement);\n</code></pre> <p>Estos m\u00e9todos te permiten crear y agregar din\u00e1micamente elementos, texto, atributos, comentarios y m\u00e1s a tu p\u00e1gina web utilizando JavaScript.</p>"},{"location":"T05/","title":"UNIDAD 5 - Gesti\u00f3n de Eventos y Validaci\u00f3n de Formularios","text":"<p>En esta unidad, exploraremos c\u00f3mo manejar interacciones de los usuarios y validar formularios en una p\u00e1gina web.</p> <ul> <li>Los eventos son fundamentales para crear aplicaciones web din\u00e1micas e interactivas. Nos permiten responder a acciones del usuario, como clics, pulsaciones de teclas y env\u00edos de formularios.</li> <li>La validaci\u00f3n de formularios es esencial para asegurar que los datos ingresados por los usuarios cumplan con los criterios requeridos antes de enviarlos al servidor.</li> </ul> <p>Al dominar la gesti\u00f3n de eventos y la validaci\u00f3n de formularios, mejorar\u00e1s la experiencia del usuario y la fiabilidad de tus aplicaciones web.</p>"},{"location":"T05/#1-modelos-de-gestion-de-eventos-en-javascript","title":"1. Modelos de Gesti\u00f3n de Eventos en JavaScript","text":"<ul> <li>Los eventos son mecanismos que se activan cuando el usuario realiza un cambio en una p\u00e1gina web.</li> <li>La entidad responsable de crear la jerarqu\u00eda de objetos que compone una p\u00e1gina web es el DOM (Modelo de Objeto de Documento).</li> <li>Por lo tanto, es el DOM el que gestiona los eventos.</li> </ul>"},{"location":"T05/#11-asignar-un-manejador-de-eventos","title":"1.1 Asignar un Manejador de Eventos","text":"<p>En JavaScript, la gesti\u00f3n de eventos te permite responder a acciones de los usuarios u otros eventos activados en el navegador. Existen diferentes modelos para gestionar eventos, cada uno ofreciendo distintas maneras de adjuntar oyentes de eventos y gestionar la propagaci\u00f3n de eventos.</p> <ol> <li> <p>Modelo Tradicional de Eventos (<code>onclick</code>, <code>onmouseover</code>, etc.)</p> <ul> <li>Descripci\u00f3n: Este modelo implica asignar directamente atributos de manejador de eventos a elementos HTML.</li> <li>Uso: Adjuntar eventos dentro de etiquetas HTML o configurarlos mediante JavaScript utilizando propiedades de los elementos (<code>element.onclick = function() {...}</code>).</li> <li>Ejemplo: <pre><code>&lt;button onclick=\"alert('\u00a1Bot\u00f3n clicado!')\"&gt;Haz clic aqu\u00ed&lt;/button&gt;\n</code></pre></li> </ul> </li> <li> <p>Modelo de Eventos Nivel 2 del DOM (m\u00e9todo <code>addEventListener()</code>)</p> <ul> <li>Descripci\u00f3n: Introducido en el Nivel 2 del DOM, este modelo ofrece un enfoque m\u00e1s flexible para la gesti\u00f3n de eventos.</li> <li>Uso: Adjuntar eventos utilizando <code>addEventListener(event, handler, useCapture)</code>, donde <code>event</code> es el tipo de evento (por ejemplo, <code>'click'</code>), <code>handler</code> es la funci\u00f3n a ejecutar, y <code>useCapture</code> (opcional) especifica el flujo del evento.</li> <li>Ejemplo: <pre><code>const boton = document.querySelector('button');\nboton.addEventListener('click', function() {\n  alert('\u00a1Bot\u00f3n clicado usando addEventListener!');\n});\n</code></pre></li> </ul> </li> <li> <p>Delegaci\u00f3n de Eventos</p> <ul> <li>Descripci\u00f3n: En lugar de adjuntar oyentes de eventos a elementos individuales, esta t\u00e9cnica implica adjuntar un solo oyente de eventos a un elemento padre.</li> <li>Uso: Utilizar la burbuja de eventos colocando oyentes de eventos en elementos padres y delegar el manejo en funci\u00f3n del elemento objetivo (<code>event.target</code>).</li> <li>Ejemplo: <pre><code>&lt;ul id=\"lista\"&gt;\n  &lt;li&gt;Elemento 1&lt;/li&gt;\n  &lt;li&gt;Elemento 2&lt;/li&gt;\n  &lt;li&gt;Elemento 3&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;script&gt;\n  const lista = document.getElementById('lista');\n  lista.addEventListener('click', function(evento) {\n    if (evento.target.tagName === 'LI') {\n      console.log('Clic en:', evento.target.textContent);\n    }\n  });\n&lt;/script&gt;\n</code></pre></li> </ul> </li> </ol>"},{"location":"T05/#2-tipos-de-eventos-en-javascript","title":"2. Tipos de Eventos en JavaScript","text":"<p>JavaScript ofrece una gran variedad de eventos que se pueden utilizar para interactuar con las p\u00e1ginas web. Estos eventos se pueden clasificar en diferentes categor\u00edas seg\u00fan su naturaleza y los elementos a los que est\u00e1n asociados.</p>"},{"location":"T05/#categorias-de-eventos","title":"Categor\u00edas de Eventos","text":"<ol> <li>Eventos de Rat\u00f3n</li> <li>Eventos de Teclado</li> <li>Eventos de Formularios</li> <li>Eventos del Documento</li> <li>Eventos del Portapapeles</li> <li>Eventos de Arrastrar y Soltar</li> <li>Eventos de Pantalla T\u00e1ctil</li> </ol>"},{"location":"T05/#21-eventos-de-raton","title":"2.1 Eventos de Rat\u00f3n","text":"<p>Los eventos de rat\u00f3n se activan por acciones del usuario con el rat\u00f3n.</p> <ul> <li>click: Se dispara cuando el usuario hace clic en un elemento.</li> <li>dblclick: Se dispara cuando el usuario hace doble clic en un elemento.</li> <li>mousedown: Se dispara cuando el usuario presiona un bot\u00f3n del rat\u00f3n sobre un elemento.</li> <li>mouseup: Se dispara cuando el usuario suelta un bot\u00f3n del rat\u00f3n sobre un elemento.</li> <li>mousemove: Se dispara cuando el usuario mueve el puntero del rat\u00f3n sobre un elemento.</li> <li>mouseover: Se dispara cuando el usuario mueve el puntero del rat\u00f3n sobre un elemento.</li> <li>mouseout: Se dispara cuando el usuario mueve el puntero del rat\u00f3n fuera de un elemento.</li> </ul>"},{"location":"T05/#22-eventos-de-teclado","title":"2.2 Eventos de Teclado Ejercicio Pr\u00e1ctico: Gesti\u00f3n de Eventos de Teclado","text":"<p>Los eventos de teclado se activan por acciones del usuario con el teclado.</p> <ul> <li>keydown: Se dispara cuando el usuario presiona una tecla.</li> <li>keyup: Se dispara cuando el usuario suelta una tecla.</li> <li>keypress: Se disparaba cuando el usuario presionaba una tecla (obsoleto, usar <code>keydown</code> en su lugar).</li> </ul> <p>Cuando una tecla se presiona y se mantiene pulsada, comienza a repetirse autom\u00e1ticamente: <code>keydown</code> se dispara repetidamente, y cuando la tecla finalmente se suelta, se desencadena un solo evento <code>keyup</code>. Por lo tanto, es normal tener muchos eventos <code>keydown</code> y solo uno <code>keyup</code>.</p> <p>Crea una p\u00e1gina HTML simple con JavaScript que permita al usuario controlar un personaje usando las teclas de flecha.</p> <ol> <li>Estructura HTML: Crea un archivo HTML (`index.html`) con un elemento `div` para representar el personaje.</li> <li>Estilo CSS: Estiliza el personaje (`#personaje`) para que sea visible y est\u00e9 posicionado en la pantalla.</li> <li>Funcionalidad JavaScript: Implementa c\u00f3digo JavaScript para manejar eventos `keydown` de las teclas de flecha y mover el personaje en consecuencia.</li> <li>Gesti\u00f3n de Eventos: Adjunta un oyente de eventos al objeto `document` para capturar las pulsaciones de las teclas de flecha y actualizar la posici\u00f3n del personaje.</li> </ol> <p>Objetivo: Mover el personaje suavemente en la pantalla usando las teclas de flecha.</p> <p>Instrucciones:</p> <ul> <li>Abre `index.html` en un navegador web.</li> <li>Usa las teclas de flecha (`arriba`, `abajo`, `izquierda`, `derecha`) para controlar el movimiento del personaje.</li> <li>Observa c\u00f3mo el personaje actualiza su posici\u00f3n en respuesta a cada pulsaci\u00f3n de tecla.</li> </ul> <p>Explicaci\u00f3n: Este ejercicio demuestra los fundamentos de la gesti\u00f3n de eventos de teclado en JavaScript para crear aplicaciones web interactivas.</p> <p>Ejemplo de HTML para el ejercicio:</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"es\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"UTF-8\"&gt;\n  &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\n  &lt;title&gt;Ejercicio Simple de Eventos de Teclado&lt;/title&gt;\n  &lt;style&gt;\n    body {\n      font-family: Arial, sans-serif;\n      text-align: center;\n    }\n    #personaje {\n      position: relative;\n      width: 50px;\n      height: 50px;\n      background-color: blue;\n      margin-top: 20px;\n      transition: 0.2s ease-out;\n    }\n  &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n  &lt;h2&gt;Mueve el Personaje con las Teclas de Flecha&lt;/h2&gt;\n  &lt;div id=\"personaje\"&gt;&lt;/div&gt;\n\n  &lt;script&gt;\n    // C\u00f3digo JavaScript ir\u00e1 aqu\u00ed\n    const personaje = document.getElementById('personaje');\n    let posX = 0;\n    let posY = 0;\n  &lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"T05/#23-eventos-de-formularios","title":"2.3 Eventos de Formularios","text":"<p>Los eventos de formularios est\u00e1n relacionados con los elementos del formulario.</p> <ul> <li>submit: Se dispara cuando se env\u00eda un formulario.</li> <li>reset: Se dispara cuando se restablece un formulario.</li> <li>change: Se dispara cuando cambia el valor de un elemento (para <code>&lt;input&gt;</code>, <code>&lt;textarea&gt;</code>, <code>&lt;select&gt;</code>).</li> <li>focus: Se dispara cuando un elemento gana el foco.</li> <li>blur: Se dispara cuando un elemento pierde el foco.</li> <li>input: Se dispara cuando el usuario introduce texto en un elemento.</li> </ul>"},{"location":"T05/#24-eventos-del-documento","title":"2.4 Eventos del Documento","text":"<p>Los eventos del documento se activan por acciones que afectan al documento en su totalidad.</p> <ul> <li>DOMContentLoaded: Se dispara cuando el documento HTML inicial ha sido completamente cargado y analizado. <pre><code>document.addEventListener('DOMContentLoaded', (event) =&gt; {\n    console.log('El DOM est\u00e1 completamente cargado y analizado');\n});\n</code></pre></li> <li>DOMSubtreeModified: Se activa cuando se agregan o eliminan nodos del sub\u00e1rbol de un elemento o del documento.</li> <li>DOMNodeInserted: Ocurre cuando un nuevo nodo hijo es agregado a un nodo padre.</li> <li>DOMNodeRemoved: Ocurre cuando un nodo con un nodo padre es eliminado.</li> </ul>"},{"location":"T05/#25-eventos-de-la-ventana","title":"2.5 Eventos de la Ventana","text":"<ul> <li>load: Se dispara cuando toda la p\u00e1gina (ventana) y todos los recursos dependientes han terminado de cargarse. <pre><code>window.addEventListener('load', (event) =&gt; {\n    console.log('La p\u00e1gina est\u00e1 completamente cargada');\n});\n</code></pre></li> </ul> <p>El evento <code>load</code> de <code>window</code> y el evento <code>DOMContentLoaded</code> de <code>document</code> se pueden utilizar para fines similares, actuando como un \"m\u00e9todo principal\" en el que podemos asegurarnos de que el c\u00f3digo dentro de ellos se ejecute una vez que la p\u00e1gina est\u00e9 cargada, con algunas diferencias:</p> <ul> <li>DOMContentLoaded: Se dispara una vez que el \u00e1rbol del DOM est\u00e1 completamente construido.</li> <li>load: Se dispara una vez que todos los recursos de la p\u00e1gina, incluyendo multimedia, est\u00e1n completamente cargados. Es una buena pr\u00e1ctica colocar el c\u00f3digo que queremos ejecutar dentro de una funci\u00f3n controladora para uno de estos eventos. Sin embargo, si el script se carga al final del <code>body</code>, al menos podemos asegurar que todo el DOM est\u00e9 cargado.</li> </ul> <ul> <li>unload: Se dispara cuando toda la p\u00e1gina (ventana) o un recurso hijo est\u00e1 siendo descargado.</li> <li>resize: Se dispara cuando la vista del documento (ventana) es redimensionada.</li> <li>scroll: Se dispara cuando la vista del documento (ventana) es desplazada.</li> </ul>"},{"location":"T05/#26-eventos-de-arrastrar-y-soltar","title":"2.6 Eventos de Arrastrar y Soltar","text":"<p>Los eventos de arrastrar y soltar se utilizan para mover elementos arrastr\u00e1ndolos.</p> <ul> <li>drag: Se dispara cuando un elemento est\u00e1 siendo arrastrado.</li> <li>dragstart: Se dispara cuando el usuario comienza a arrastrar un elemento.</li> <li>dragend: Se dispara cuando el usuario termina de arrastrar un elemento.</li> <li>dragenter: Se dispara cuando un elemento arrastrado entra en un objetivo de colocaci\u00f3n v\u00e1lido.</li> <li>dragover: Se dispara cuando un elemento es arrastrado sobre un objetivo de colocaci\u00f3n v\u00e1lido.</li> <li>dragleave: Se dispara cuando un elemento arrastrado sale de un objetivo de colocaci\u00f3n v\u00e1lido.</li> <li>drop: Se dispara cuando un elemento arrastrado es soltado sobre un objetivo de colocaci\u00f3n v\u00e1lido.</li> </ul>"},{"location":"T05/#3-formularios-html","title":"3. Formularios HTML","text":"<ul> <li>Un formulario web se utiliza para enviar, procesar y recuperar datos que se env\u00edan y reciben entre un cliente y un servidor web.</li> <li>Cada elemento del formulario almacena un tipo de dato o activa alguna de sus funcionalidades.</li> <li>Los formularios tienen una arquitectura definida dentro del contexto del lenguaje HTML.</li> </ul>"},{"location":"T05/#31-estructura-del-formulario","title":"3.1 Estructura del Formulario","text":"<ul> <li>Los formularios se definen utilizando etiquetas.</li> <li>La etiqueta principal es <code>&lt;form&gt; &lt;/form&gt;</code>.</li> <li>Para ser funcional, la etiqueta <code>&lt;form&gt;</code> necesita inicializar dos atributos:</li> <li><code>action</code> \u2013 Contiene la URL donde se redirige la informaci\u00f3n del formulario.</li> <li><code>method</code> \u2013 Indica el m\u00e9todo por el cual el formulario env\u00eda datos. Puede ser POST o GET.</li> </ul>"},{"location":"T05/#32-etiquetas-del-formulario","title":"3.2 Etiquetas del Formulario","text":""},{"location":"T05/#1-input","title":"1. <code>&lt;input&gt;</code>","text":"<p>La etiqueta <code>&lt;input&gt;</code> es un elemento fundamental de HTML que se utiliza dentro de los formularios para recopilar entradas del usuario. Es vers\u00e1til y admite varios tipos (atributo <code>type</code>), cada uno dise\u00f1ado para necesidades espec\u00edficas de entrada de datos. Los tipos de entrada m\u00e1s comunes incluyen campos de texto, casillas de verificaci\u00f3n, botones de opci\u00f3n, controles de carga de archivos y m\u00e1s. La etiqueta <code>&lt;input&gt;</code> no tiene una etiqueta de cierre y es autoconclusiva con atributos que controlan su apariencia, comportamiento e interacci\u00f3n con el usuario.</p>"},{"location":"T05/#atributos-de-entrada","title":"Atributos de Entrada:","text":"<p>type: Especifica el tipo de elemento que se est\u00e1 definiendo. Este atributo determina los par\u00e1metros adicionales. Los valores posibles para el atributo <code>type</code> incluyen:</p> <ul> <li><code>text</code>: Campo de entrada de texto.</li> <li><code>password</code>: Campo de entrada de contrase\u00f1a, donde los caracteres est\u00e1n ocultos (normalmente se muestran como asteriscos).</li> <li><code>checkbox</code>: Casilla de verificaci\u00f3n para selecci\u00f3n m\u00faltiple.</li> <li><code>radio</code>: Bot\u00f3n de opci\u00f3n para selecci\u00f3n exclusiva entre dos o m\u00e1s opciones.</li> <li><code>submit</code>: Bot\u00f3n para enviar el formulario.</li> <li><code>reset</code>: Bot\u00f3n para restablecer o borrar los campos del formulario.</li> <li><code>button</code>: Bot\u00f3n gen\u00e9rico dentro del formulario.</li> <li><code>file</code>: Bot\u00f3n para buscar y seleccionar archivos.</li> <li><code>hidden</code>: Campo oculto no visible para el usuario en el formulario.</li> <li><code>image</code>: Bot\u00f3n de imagen dentro del formulario.</li> </ul>"},{"location":"T05/#mas-tipos-de-entrada-en-html5","title":"M\u00e1s tipos de entrada en HTML5:","text":"<ul> <li><code>email</code>: Obliga al usuario a introducir una direcci\u00f3n de correo electr\u00f3nico v\u00e1lida.</li> <li><code>search</code>: Estilizado para cajas de b\u00fasqueda, proporcionando pistas visuales adecuadas.</li> <li><code>tel</code>: Permite la entrada de un n\u00famero de tel\u00e9fono (en dispositivos m\u00f3viles, activa un teclado num\u00e9rico, pero no restringe la entrada solo a n\u00fameros).</li> <li><code>url</code>: Impone restricciones de entrada para garantizar que el texto siga el formato de una URL.</li> <li><code>number</code>: Permite la entrada de solo n\u00fameros de punto flotante. Se pueden aplicar restricciones de rango.</li> <li><code>range</code>: Crea un control deslizante gr\u00e1fico para seleccionar un rango num\u00e9rico.</li> <li><code>date/time inputs</code> (Nota: no todos los navegadores los soportan):</li> <li><code>datetime-local</code></li> <li><code>month</code></li> <li><code>week</code></li> <li><code>time</code></li> <li><code>color</code>: Proporciona un control de selecci\u00f3n de color.</li> </ul> <p>Consulta --&gt; https://developer.mozilla.org/es/docs/Learn/Forms/HTML5_input_types</p>"},{"location":"T05/#mas-atributos-para-input","title":"M\u00e1s Atributos para Input:","text":"<ul> <li>name: Especifica el nombre utilizado para pasar el valor de la variable al servidor.</li> <li>value: Indica el valor inicial de la entrada en el formulario. Se puede establecer inicialmente y acceder a \u00e9l para leerlo o validarlo. El tipo de dato depende del tipo de entrada.</li> <li>size: Especifica el tama\u00f1o del elemento en p\u00edxeles. Para los campos de texto y contrase\u00f1a, se refiere al n\u00famero de caracteres.</li> <li>maxlength: Especifica el n\u00famero m\u00e1ximo de caracteres que se pueden introducir en un campo de texto o contrase\u00f1a.</li> <li>checked: Exclusivo para elementos de casilla de verificaci\u00f3n y bot\u00f3n de opci\u00f3n. Indica qu\u00e9 opci\u00f3n est\u00e1 seleccionada.</li> <li>disabled: Deshabilita el elemento, impidiendo que su valor se env\u00ede al servidor.</li> <li>readonly: Hace que el contenido del elemento no sea editable.</li> <li>src: Especifica la ruta de una imagen utilizada como bot\u00f3n dentro del formulario.</li> <li>alt: Proporciona texto alternativo para la imagen.</li> <li>placeholder: Texto que aparece como sugerencia en el campo de entrada antes de que el usuario lo enfoque.</li> <li>autofocus: Especifica que el elemento debe tener el foco autom\u00e1ticamente cuando la p\u00e1gina se carga.</li> </ul> <p>Consulta --&gt; https://developer.mozilla.org/es/docs/Learn/Forms/Basic_native_form_controls</p>"},{"location":"T05/#2-label-asocia-una-etiqueta-con-un-input-select-textarea-o-button-proporcionando-orientacion-al-usuario-usa-el-atributo-for-para-coincidir-con-el-id-del-control-relacionado","title":"2. <code>&lt;label&gt;</code>: Asocia una etiqueta con un <code>&lt;input&gt;</code>, <code>&lt;select&gt;</code>, <code>&lt;textarea&gt;</code> o <code>&lt;button&gt;</code>, proporcionando orientaci\u00f3n al usuario. Usa el atributo <code>for</code> para coincidir con el <code>id</code> del control relacionado.","text":""},{"location":"T05/#3-select-crea-una-lista-desplegable-para-seleccionar-opciones-usa-etiquetas-option-anidadas-para-definir-las-opciones","title":"3. <code>&lt;select&gt;</code>: Crea una lista desplegable para seleccionar opciones. Usa etiquetas <code>&lt;option&gt;</code> anidadas para definir las opciones.","text":""},{"location":"T05/#4-textarea-permite-la-entrada-de-texto-en-varias-lineas-util-para-respuestas-largas-como-comentarios-o-mensajes","title":"4. <code>&lt;textarea&gt;</code>: Permite la entrada de texto en varias l\u00edneas. \u00datil para respuestas largas como comentarios o mensajes.","text":""},{"location":"T05/#5-button-crea-un-boton-clicable-dentro-de-un-formulario-el-atributo-type-submit-reset-o-button-define-el-comportamiento","title":"5. <code>&lt;button&gt;</code>: Crea un bot\u00f3n clicable dentro de un formulario. El atributo <code>type</code> (<code>submit</code>, <code>reset</code> o <code>button</code>) define el comportamiento.","text":""},{"location":"T05/#6-fieldset-y-legend-agrupa-controles-de-formulario-relacionados-input-select-etc-legend-proporciona-un-titulo-para-el-grupo","title":"6. <code>&lt;fieldset&gt;</code> y <code>&lt;legend&gt;</code>: Agrupa controles de formulario relacionados (<code>&lt;input&gt;</code>, <code>&lt;select&gt;</code>, etc.). <code>&lt;legend&gt;</code> proporciona un t\u00edtulo para el grupo.","text":""},{"location":"T05/#33-estilo-de-formularios","title":"3.3 Estilo de Formularios","text":"<p>Podemos estilizar manualmente los formularios usando CSS para que se vean mejor. Aqu\u00ed hay algunos aspectos clave a considerar:</p> <ul> <li>Cambiar el estilo de los botones (los navegadores diferentes los muestran de manera diferente).</li> <li>Usar las fuentes y colores de nuestro sitio web.</li> <li>Distribuir adecuadamente los elementos del formulario en la pantalla.</li> <li>Usar CSS para distinguir los campos err\u00f3neos durante la validaci\u00f3n, por ejemplo, cambiando el borde a rojo o mostrando mensajes de error ocultos.</li> </ul> <p>Para agregar o quitar clases CSS usando JavaScript, podemos usar <code>element.classList.add(\"clase\")</code>.</p> <p>Tambi\u00e9n podemos usar bibliotecas como Bootstrap, donde los elementos del formulario ya est\u00e1n definidos.</p>"},{"location":"T05/#1-estilo-manual-con-css","title":"1. Estilo Manual con CSS","text":""},{"location":"T05/#estilo-de-botones","title":"Estilo de Botones","text":"<p>Podemos cambiar el estilo de los botones para asegurarnos de que se vean consistentes en todos los navegadores:</p> <pre><code>button {\n    background-color: #4CAF50; /* Verde */\n    border: none;\n    color: white;\n    padding: 15px 32px;\n    text-align: center;\n    text-decoration: none;\n    display: inline-block;\n    font-size: 16px;\n    margin: 4px 2px;\n    cursor: pointer;\n    border-radius: 4px;\n}\n\nbutton:hover {\n    background-color: #45a049;\n}\n</code></pre>"},{"location":"T05/#usando-fuentes-y-colores-del-sitio","title":"Usando Fuentes y Colores del Sitio","text":"<p>Podemos usar fuentes y colores espec\u00edficos de nuestro sitio web:</p> <pre><code>body {\n    font-family: 'Arial', sans-serif;\n    background-color: #f2f2f2;\n    color: #333;\n}\n\ninput, select, textarea {\n    font-family: inherit;\n    font-size: 16px;\n    padding: 10px;\n    margin: 10px 0;\n    box-sizing: border-box;\n}\n\nlabel {\n    font-weight: bold;\n}\n</code></pre>"},{"location":"T05/#distribuyendo-elementos-del-formulario-en-la-pantalla","title":"Distribuyendo Elementos del Formulario en la Pantalla","text":"<p>Podemos usar un contenedor para centrar el formulario y distribuir sus elementos:</p> <pre><code>.form-container {\n    max-width: 500px;\n    margin: auto;\n    background: white;\n    padding: 20px;\n    border-radius: 5px;\n    box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);\n}\n</code></pre> <p>Para organizar los formularios y aplicar estilos de manera efectiva, es una buena idea agrupar elementos usando <code>fieldset</code> o <code>div</code> con una clase que ayude en el estilo. Por ejemplo, usar una clase como <code>form-group</code> puede ayudar a aplicar estilos consistentes a los elementos agrupados.</p> <pre><code>&lt;div class=\"form-group\"&gt;\n    &lt;label for=\"name\"&gt;Nombre:&lt;/label&gt;\n    &lt;input type=\"text\" name=\"name\" id=\"name\" autofocus&gt;\n&lt;/div&gt;\n</code></pre> <pre><code>.form-group {\n  margin-bottom: 1em;\n}\n\n.form-group label {\n    display: block;\n    margin-bottom: 5px;\n}\n\n.form-group&gt;input,\n.form-group&gt;textarea,\n.form-group&gt;select {\n  display: block;\n  width: 100%;\n  padding: 10px;\n  border-radius: 4px;\n  border: 1px solid #ccc;\n  font-family: inherit;\n  font-size: 16px;\n  box-sizing: border-box;\n}\n\n.form-group&gt;input[type=\"checkbox\"] {\n  display: inline-block;\n  width: auto;\n}\n</code></pre>"},{"location":"T05/#2-campos-erroneos","title":"2. Campos Err\u00f3neos","text":"<p>Podemos resaltar los campos err\u00f3neos y mostrar mensajes de error:</p> <pre><code>input.error, select.error, textarea.error {\n    border-color: red;\n}\n\n.error-message {\n    color: red;\n    font-size: 12px;\n    display: none;\n}\n\n.error-message.active {\n    display: block;\n}\n</code></pre> <p>Podemos usar JavaScript para agregar o quitar clases CSS:</p> <pre><code>document.getElementById('myInput').classList.add('error');\ndocument.getElementById('myErrorMessage').classList.add('active');\n</code></pre>"},{"location":"T05/#3-usando-bibliotecas-como-bootstrap","title":"3. Usando Bibliotecas como Bootstrap","text":"<p>Bootstrap proporciona clases predefinidas para formularios:</p> <pre><code>&lt;form&gt;\n  &lt;div class=\"mb-3\"&gt;\n    &lt;label for=\"exampleInputEmail1\" class=\"form-label\"&gt;Direcci\u00f3n de correo electr\u00f3nico&lt;/label&gt;\n    &lt;input type=\"email\" class=\"form-control\" id=\"exampleInputEmail1\" aria-describedby=\"emailHelp\"&gt;\n    &lt;div id=\"emailHelp\" class=\"form-text\"&gt;Nunca compartiremos tu correo electr\u00f3nico con nadie m\u00e1s.&lt;/div&gt;\n  &lt;/div&gt;\n  &lt;div class=\"mb-3\"&gt;\n    &lt;label for=\"exampleInputPassword1\" class=\"form-label\"&gt;Contrase\u00f1a&lt;/label&gt;\n    &lt;input type=\"password\" class=\"form-control\" id=\"exampleInputPassword1\"&gt;\n  &lt;/div&gt;\n  &lt;div class=\"mb-3 form-check\"&gt;\n    &lt;input type=\"checkbox\" class=\"form-check-input\" id=\"exampleCheck1\"&gt;\n    &lt;label class=\"form-check-label\" for=\"exampleCheck1\"&gt;Marcarme&lt;/label&gt;\n  &lt;/div&gt;\n  &lt;button type=\"submit\" class=\"btn btn-primary\"&gt;Enviar&lt;/button&gt;\n&lt;/form&gt;\n</code></pre> <p>Consulta m\u00e1s informaci\u00f3n sobre Formularios de Bootstrap</p>"},{"location":"T05/#4-validacion-de-formularios","title":"4. Validaci\u00f3n de Formularios","text":"<p>La validaci\u00f3n de formularios es crucial para asegurar que las entradas del usuario sean correctas y completas antes de la presentaci\u00f3n. Esto se puede lograr a trav\u00e9s de varios m\u00e9todos, incluyendo la validaci\u00f3n del lado del cliente con atributos HTML5, validaci\u00f3n con JavaScript y validaci\u00f3n del lado del servidor.</p> IMPORTANTE <p>La validaci\u00f3n del lado del cliente mejora la usabilidad de un sitio web, pero no elimina la necesidad de validaci\u00f3n del lado del servidor.</p>"},{"location":"T05/#41-validacion-con-javascript-vanilla","title":"4.1 Validaci\u00f3n con JavaScript Vanilla","text":"<p>La validaci\u00f3n se puede realizar de muchas maneras, pero es aconsejable hacerlo de manera organizada usando funciones que podamos reutilizar m\u00e1s tarde. Proponemos esta soluci\u00f3n:</p>"},{"location":"T05/#formulario-a-validar","title":"Formulario a validar","text":"<pre><code>&lt;form id=\"contactForm\" class=\"needs-validation\"&gt;\n    &lt;div class=\"form-group\"&gt;\n        &lt;label for=\"name\"&gt;Nombre&lt;/label&gt;\n        &lt;input type=\"text\" class=\"form-control\" id=\"name\" name=\"name\"&gt;\n        &lt;div class=\"error-message\"&gt;El nombre es obligatorio y debe tener al menos 2 caracteres.&lt;/div&gt;\n    &lt;/div&gt;\n    &lt;div class=\"form-group\"&gt;\n        &lt;label for=\"email\"&gt;Correo electr\u00f3nico&lt;/label&gt;\n        &lt;input type=\"email\" class=\"form-control\" id=\"email\" name=\"email\"&gt;\n        &lt;div class=\"error-message\"&gt;Por favor, proporciona una direcci\u00f3n de correo electr\u00f3nico v\u00e1lida.&lt;/div&gt;\n    &lt;/div&gt;\n    &lt;div class=\"form-group\"&gt;\n        &lt;label for=\"password\"&gt;Contrase\u00f1a&lt;/label&gt;\n        &lt;input type=\"password\" class=\"form-control\" id=\"password\" name=\"password\"&gt;\n        &lt;div class=\"error-message\"&gt;La contrase\u00f1a es obligatoria y debe tener al menos 6 caracteres.&lt;/div&gt;\n    &lt;/div&gt;\n    &lt;button type=\"submit\" class=\"btn btn-primary\"&gt;Enviar&lt;/button&gt;\n&lt;/form&gt;\n</code></pre>"},{"location":"T05/#funcion-de-validacion-principal","title":"Funci\u00f3n de Validaci\u00f3n Principal","text":"<p>Se recomienda que todo el c\u00f3digo est\u00e9 dentro del evento <code>DOMContentLoaded</code> o <code>load</code> de la ventana. Esto asegura que todo el documento est\u00e9 cargado antes de comenzar a ejecutar el c\u00f3digo.</p> <pre><code>// Es una buena pr\u00e1ctica que todo el c\u00f3digo est\u00e9 dentro del evento 'DOMContentLoaded' o 'load' \ndocument.addEventListener('DOMContentLoaded', function () {\n  // Capturar todos los elementos \n  const form = document.getElementById('contactForm');\n  const name = document.getElementById('name');\n  const email = document.getElementById('email');\n  const password = document.getElementById('password');\n\n  // Crear el manejador del evento para el env\u00edo del formulario ('submit')\n  form.addEventListener('submit', function (event) {\n    event.preventDefault(); // Evita que el formulario se env\u00ede autom\u00e1ticamente\n    event.stopPropagation(); // Evita que el evento se propague a elementos padre\n\n    // Llamar a la funci\u00f3n principal de validaci\u00f3n \n    if (validateForm()) {\n      console.log(\"Todos los campos est\u00e1n bien, podemos proceder\");\n      form.submit();  // Forzar el env\u00edo\n    } else {\n      console.log(\"Hay alg\u00fan campo no v\u00e1lido. El usuario debe revisarlos.\")\n    }\n  });\n\n  // Esta funci\u00f3n se encarga de validar todos los campos y \n  // devolver un booleano: true si todos los campos est\u00e1n bien, false en caso contrario\n  function validateForm() {\n    // Esta bandera se inicializa como true.\n    // En caso de encontrar un error en un campo, esta variable se convierte en false.\n    var isValid = true;\n\n    // L\u00f3gica de validaci\u00f3n personalizada\n    // Ejemplo de validaci\u00f3n personalizada solo comprobando la longitud \n    if (name.value.trim().length &lt; 2) {\n      markFieldAsNotValid(name);\n      isValid = false;\n    } else {\n      markFieldAsValid(name);\n    }\n\n    // Podemos llamar a funciones personalizadas de validaci\u00f3n de campos \n    // tambi\u00e9n podemos comprobar diferentes condiciones y mostrar diferentes mensajes de error\n    if (email.value === \"\") {\n      markFieldAsNotValid(email, \"El correo electr\u00f3nico es obligatorio\");\n      isValid = false;\n    } else if (!isValidEmail(email.value)) {\n      markFieldAsNotValid(email, \"Por favor, proporciona una direcci\u00f3n de correo v\u00e1lida.\");\n      isValid = false;\n    } else {\n      markFieldAsValid(email);\n    }\n\n    if (!isValidPassword(password.value)) {\n      markFieldAsNotValid(password);\n      isValid = false;\n    } else {\n      markFieldAsValid(password);\n    }\n\n    // Despu\u00e9s de validar todos los campos, devolvemos el valor de la bandera isValid\n    return isValid;\n  }\n\n  // Definici\u00f3n de las funciones de validaci\u00f3n de campos y otras funciones auxiliares\n  // ....\n\n}\n</code></pre>"},{"location":"T05/#funciones-de-validacion-de-campos-especificos","title":"Funciones de validaci\u00f3n de campos espec\u00edficos","text":"<p>Cuando la validaci\u00f3n es m\u00e1s compleja, podemos definir funciones que validen ciertos campos.</p> <pre><code>function isValidEmail(email) {\n  const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n  return emailRegex.test(email);\n}\n\nfunction isValidPassword(passwd) {\n  return (passwd.length &gt;= 6);\n}\n</code></pre>"},{"location":"T05/#funciones-auxiliares-para-gestionar-mensajes-de-error","title":"Funciones auxiliares para gestionar mensajes de error","text":"<p>Podemos crear funciones que gestionen los mensajes de error. En este caso, hemos creado una para mostrar el error y otra para ocultarlo. Funcionan sobre el elemento que pasamos a la funci\u00f3n. El c\u00f3digo navega hacia el elemento padre para agregar o eliminar la clase is-not-valid-field.</p> <p><pre><code>// Esta funci\u00f3n marca un campo como no v\u00e1lido y a\u00f1ade el mensaje de error\nfunction markFieldAsNotValid(element, message) {\n  // Si tenemos un mensaje personalizado, lo mostramos. En caso contrario, mostramos el mensaje de error presente en el HTML\n  if (message) {\n    element.parentNode.querySelector(\".error-message\").textContent = message;\n  }\n  // A\u00f1adiendo la clase que muestra el mensaje de error y a\u00f1ade el borde rojo (css)\n  element.parentNode.classList.add(\"is-not-valid-field\");\n}\n\n// Esta funci\u00f3n marca un campo como v\u00e1lido y oculta el mensaje de error\nfunction markFieldAsValid(element) {\n  element.parentNode.classList.remove(\"is-not-valid-field\");\n}\n</code></pre> Recordemos la estructura de un elemento form-group:</p> <pre><code>&lt;div class=\"form-group\"&gt;\n    &lt;label for=\"name\"&gt;Nombre&lt;/label&gt;\n    &lt;input type=\"text\" class=\"form-control\" id=\"name\" name=\"name\"&gt;\n    &lt;div class=\"error-message\"&gt;El nombre es obligatorio y debe tener al menos 2 caracteres de longitud.&lt;/div&gt;\n&lt;/div&gt;\n</code></pre>"},{"location":"T05/#css-para-manejar-errores","title":"CSS para Manejar Errores","text":"<p>Necesitamos algo de CSS para hacer visibles los mensajes de error y el borde rojo cuando la clase <code>is-not-valid-field</code> est\u00e1 presente en el elemento <code>form-group</code>.</p> <pre><code>.form-group.is-not-valid-field input,\n.form-group.is-not-valid-field select,\n.form-group.is-not-valid-field textarea {\n  border-color: red;\n}\n\n.error-message {\n  color: red;\n  font-size: 12px;\n  display: none;\n}\n\n.is-not-valid-field .error-message {\n  display: block;\n}\n</code></pre> <p></p>  Ejercicio Pr\u00e1ctico <p>Agrega tres nuevos campos al formulario existente:</p> <ul> <li>Un campo de confirmaci\u00f3n de contrase\u00f1a que debe coincidir con el campo de contrase\u00f1a original.</li> <li>Un campo de fecha de nacimiento. Aseg\u00farate de que el usuario tenga al menos 18 a\u00f1os.</li> <li>Una casilla de verificaci\u00f3n para aceptar las condiciones. El formulario no debe enviarse a menos que esta casilla est\u00e9 marcada.</li> </ul> <p>Implementa la l\u00f3gica de validaci\u00f3n para estos campos usando JavaScript vanilla. Aseg\u00farate de que se muestren mensajes de error apropiados para entradas no v\u00e1lidas.</p> <p>Investiga diferentes frameworks y selecciona uno que usar\u00edas para construir una Aplicaci\u00f3n de P\u00e1gina \u00danica (SPA). Indica las razones que te convencieron.</p>"},{"location":"T05/#42-validacion-nativa-con-html5","title":"4.2 Validaci\u00f3n nativa con HTML5","text":"<p>HTML5 permite la validaci\u00f3n nativa de formularios utilizando atributos espec\u00edficos en elementos de formulario como <code>&lt;input&gt;</code>, <code>&lt;textarea&gt;</code> y <code>&lt;select&gt;</code>. Esta validaci\u00f3n integrada asegura que un formulario no se env\u00ede hasta que se cumplan todos los requisitos especificados por estos atributos. Cuando se encuentra un campo inv\u00e1lido, se proporciona retroalimentaci\u00f3n sobre el primer problema encontrado.</p>"},{"location":"T05/#atributos-clave-de-validacion-en-html5","title":"Atributos clave de validaci\u00f3n en HTML5","text":"<ul> <li><code>required</code>: Asegura que el campo no quede vac\u00edo.</li> <li><code>minlength</code> y <code>maxlength</code>: Establecen el n\u00famero m\u00ednimo y m\u00e1ximo de caracteres permitidos.</li> <li><code>min</code> y <code>max</code>: Definen los valores m\u00ednimo y m\u00e1ximo para entradas num\u00e9ricas.</li> <li><code>pattern</code>: Valida la entrada contra una expresi\u00f3n regular especificada.</li> <li><code>type</code>: Especifica el tipo de dato esperado (por ejemplo, <code>email</code>, <code>number</code>, <code>url</code>).</li> <li><code>step</code>: Define los intervalos num\u00e9ricos legales para entradas num\u00e9ricas.</li> </ul> <p>Aunque la validaci\u00f3n HTML5 es sencilla y no requiere JavaScript, tiene limitaciones. La principal desventaja es la falta de control sobre el proceso de validaci\u00f3n y la visualizaci\u00f3n de retroalimentaci\u00f3n. Solo se resalta el primer campo inv\u00e1lido y la personalizaci\u00f3n de los mensajes de error es limitada.</p>"},{"location":"T05/#ejemplos","title":"Ejemplos","text":"<pre><code>&lt;form&gt;\n    &lt;label for=\"username\"&gt;Nombre de usuario:&lt;/label&gt;\n    &lt;input type=\"text\" id=\"username\" name=\"username\" required minlength=\"3\" maxlength=\"15\"&gt;\n\n    &lt;label for=\"email\"&gt;Correo electr\u00f3nico:&lt;/label&gt;\n    &lt;input type=\"email\" id=\"email\" name=\"email\" required&gt;\n\n    &lt;label for=\"age\"&gt;Edad:&lt;/label&gt;\n    &lt;input type=\"number\" id=\"age\" name=\"age\" min=\"18\" max=\"99\" required&gt;\n\n    &lt;label for=\"website\"&gt;Sitio web:&lt;/label&gt;\n    &lt;input type=\"url\" id=\"website\" name=\"website\" pattern=\"https?://.+\"&gt;\n\n    &lt;button type=\"submit\"&gt;Enviar&lt;/button&gt;\n&lt;/form&gt;\n</code></pre>"},{"location":"T05/#43-validacion-html5-con-bootstrap-5","title":"4.3 Validaci\u00f3n HTML5 con Bootstrap 5","text":"<p>Bootstrap 5 proporciona estilos y clases que mejoran la validaci\u00f3n de formularios HTML5, facilitando la creaci\u00f3n de formularios visualmente atractivos y amigables para el usuario. Al combinar los atributos de validaci\u00f3n HTML5 con las clases de Bootstrap, podemos ofrecer retroalimentaci\u00f3n inmediata a los usuarios de manera m\u00e1s pulida.</p>"},{"location":"T05/#clases-clave-de-bootstrap-5-para-validacion","title":"Clases clave de Bootstrap 5 para validaci\u00f3n","text":"<ul> <li><code>.needs-validation</code>: Aplicada al elemento del formulario para habilitar los estilos de validaci\u00f3n.</li> <li><code>.was-validated</code>: Agregada al formulario despu\u00e9s de la presentaci\u00f3n para activar la retroalimentaci\u00f3n de validaci\u00f3n.</li> <li><code>.is-valid</code> y <code>.is-invalid</code>: Aplicadas a los campos de entrada para mostrar el estado de validaci\u00f3n.</li> <li><code>.valid-feedback</code> y <code>.invalid-feedback</code>: Usadas para mostrar mensajes de validaci\u00f3n personalizados.</li> </ul> <p>Consulta el ejemplo en el repositorio de Materiales DWEC. --&gt; 06-html5-bootstrap-validation.html</p>"},{"location":"T05/#44-validacion-hibrida","title":"4.4 Validaci\u00f3n h\u00edbrida","text":"<p>Combinar la validaci\u00f3n HTML5 con la validaci\u00f3n personalizada de JavaScript permite una validaci\u00f3n de formularios m\u00e1s flexible y completa. Este enfoque h\u00edbrido asegura que las validaciones b\u00e1sicas sean manejadas por HTML5 mientras que los requisitos m\u00e1s complejos o espec\u00edficos se gestionen con JavaScript.</p> <p>Echa un vistazo al ejemplo --&gt; Validaci\u00f3n H\u00edbrida con Vanilla JS y Bootstrap</p>"},{"location":"T05/#45-validacion-utilizando-bibliotecas-js","title":"4.5 Validaci\u00f3n utilizando bibliotecas JS","text":""},{"location":"T05/#5-expresiones-regulares-regex","title":"5. Expresiones regulares (regex)","text":"<p>Las expresiones regulares, o regex, son patrones utilizados para coincidir combinaciones de caracteres en cadenas. En JavaScript, el regex se implementa utilizando el objeto <code>RegExp</code> o a trav\u00e9s de literales de regex.</p>"},{"location":"T05/#creando-una-expresion-regular","title":"Creando una expresi\u00f3n regular","text":"<ol> <li>Usando literales de regex:    <pre><code>const regex = /patr\u00f3n/bandera;\n</code></pre></li> <li>Usando el constructor RegExp:    <pre><code>const regex = new RegExp('patr\u00f3n', 'bandera');\n</code></pre></li> </ol>"},{"location":"T05/#banderas-comunmente-utilizadas","title":"Banderas com\u00fanmente utilizadas","text":"<ul> <li><code>g</code>: B\u00fasqueda global (encontrar todas las coincidencias)</li> <li><code>i</code>: B\u00fasqueda sin distinguir entre may\u00fasculas y min\u00fasculas</li> <li><code>m</code>: B\u00fasqueda en m\u00faltiples l\u00edneas</li> </ul> <p>En nuestro caso, la m\u00e1s \u00fatil es la bandera <code>i</code>.</p>"},{"location":"T05/#sintaxis-basica","title":"Sintaxis b\u00e1sica","text":"<ul> <li><code>^</code>: Coincide con el comienzo de la cadena.</li> <li><code>$</code>: Coincide con el final de la cadena.</li> <li><code>.</code>: Coincide con cualquier car\u00e1cter excepto nueva l\u00ednea.</li> <li><code>*</code>: Coincide con 0 o m\u00e1s repeticiones del elemento anterior.</li> <li><code>+</code>: Coincide con 1 o m\u00e1s repeticiones del elemento anterior.</li> <li><code>?</code>: Coincide con 0 o 1 repetici\u00f3n del elemento anterior.</li> <li><code>{n}</code>: Coincide exactamente con n repeticiones del elemento anterior.</li> <li><code>{n,}</code>: Coincide con n o m\u00e1s repeticiones del elemento anterior.</li> <li><code>{n,m}</code>: Coincide entre n y m repeticiones del elemento anterior.</li> <li><code>[abc]</code>: Coincide con cualquiera de los caracteres a, b o c.</li> <li><code>[^abc]</code>: Coincide con cualquier car\u00e1cter excepto a, b o c.</li> <li><code>(abc)</code>: Coincide con la secuencia exacta abc.</li> <li><code>\\d</code>: Coincide con cualquier d\u00edgito (equivalente a <code>[0-9]</code>).</li> <li><code>\\D</code>: Coincide con cualquier car\u00e1cter que no sea un d\u00edgito (equivalente a <code>[^0-9]</code>).</li> <li><code>\\w</code>: Coincide con cualquier car\u00e1cter alfanum\u00e9rico incluyendo el guion bajo (equivalente a <code>[A-Za-z0-9_]</code>).</li> <li><code>\\W</code>: Coincide con cualquier car\u00e1cter no alfanum\u00e9rico (equivalente a <code>[^A-Za-z0-9_]</code>).</li> <li><code>\\s</code>: Coincide con cualquier car\u00e1cter de espacio en blanco (espacio, tabulaci\u00f3n, nueva l\u00ednea).</li> <li><code>\\S</code>: Coincide con cualquier car\u00e1cter que no sea un espacio en blanco.</li> </ul>"},{"location":"T05/#ejemplo-de-uso","title":"Ejemplo de uso","text":"<ol> <li> <p>Probando un patr\u00f3n:     <pre><code>const regex = /hola/i;\nconst str = \"\u00a1Hola Mundo!\";\nconsole.log(regex.test(str)); // true\n</code></pre></p> </li> <li> <p>Coincidencia de un patr\u00f3n:     <pre><code>const regex = /\\d+/g;\nconst str = \"Hay 123 manzanas y 456 naranjas.\";\nconsole.log(str.match(regex)); // [\"123\", \"456\"]\n</code></pre></p> </li> <li> <p>Reemplazo con un patr\u00f3n:     <pre><code>const regex = /manzanas/gi;\nconst str = \"Las manzanas son dulces. Me gustan las manzanas.\";\nconst newStr = str.replace(regex, \"naranjas\");\nconsole.log(newStr); // \"Las naranjas son dulces. Me gustan las naranjas.\"\n</code></pre></p> </li> </ol>"},{"location":"T05/#ejemplos-de-regex","title":"Ejemplos de regex","text":"<p>En nuestro caso, lo m\u00e1s t\u00edpico es hacer que el regex coincida completamente con el campo del formulario, por lo que la mayor\u00eda de las veces debemos comenzar con <code>^</code> y terminar con <code>$</code> en el regex.</p> <pre><code>// Entero b\u00e1sico\nconst basicIntRegex = /^\\d+$/;\n// Entero sin signo (0 no incluido)\nconst intRegex = /^[1-9]\\d*$/;\n// Entero con signo\nconst signIntRegex = /^[-+]?\\d+$/;\n// C\u00f3digo Postal (Espa\u00f1a)\nconst cpRegex  = /^[0-5][0-9]{5}$/;\n// Correo electr\u00f3nico 99.9% preciso\nconst emailRegex = /^(([^&lt;&gt;()\\[\\]\\\\.,;:\\s@\"]+(\\.[^&lt;&gt;()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/\n</code></pre>"},{"location":"T05/#recursos","title":"Recursos","text":"<ul> <li>Crea y prueba regex en varios lenguajes: https://regex101.com/</li> <li>Regex de direcciones de correo electr\u00f3nico: https://emailregex.com/</li> <li>La IA tambi\u00e9n es excelente para encontrar regex, \u00a1pero no olvides probarlos!</li> </ul>"},{"location":"T05/#como-validar-con-regex","title":"C\u00f3mo validar con regex","text":"<p>Podemos validar campos utilizando las funciones <code>test</code> o <code>match</code>:</p> <pre><code>function isValidCP (cp){\n  // C\u00f3digo Postal (Espa\u00f1a)\n  const cpRegex  = /^[0-5][0-9]{5}$/;\n  // Usando la funci\u00f3n test del regex\n  if(cpRegex.test(cp)){\n    return true;\n  }else{\n    return false\n  }\n}\n\nfunction isValidCP2 (cp){\n  // C\u00f3digo Postal\n\n (Espa\u00f1a)\n  const cpRegex  = /^[0-5][0-9]{5}$/;\n  // Usando la funci\u00f3n match de la cadena\n  if(cp.match(cpRegex)){\n    return true;\n  }else{\n    return false\n  }\n}\n</code></pre> <p>Las expresiones regulares son herramientas poderosas para la coincidencia de patrones y la manipulaci\u00f3n de texto. Pueden ser complejas, pero con pr\u00e1ctica, te resultar\u00e1n incre\u00edblemente \u00fatiles para diversas tareas en JavaScript.</p>"},{"location":"T06/","title":"UNIDAD 6 - AJAX","text":""},{"location":"T06/#1-introduccion-a-ajax","title":"1. Introducci\u00f3n a AJAX","text":"<p>\u00bfQu\u00e9 es AJAX?</p> <p></p>"},{"location":"T06/#definicion","title":"Definici\u00f3n","text":"<p>AJAX, que significa JavaScript Asincr\u00f3nico y XML, es una t\u00e9cnica utilizada para crear aplicaciones web din\u00e1micas e interactivas. Permite que las p\u00e1ginas web se actualicen de forma asincr\u00f3nica al intercambiar peque\u00f1as cantidades de datos con el servidor en segundo plano. Esto significa que es posible actualizar partes de una p\u00e1gina web sin recargar toda la p\u00e1gina.</p>"},{"location":"T06/#11-la-solicitud-http","title":"1.1 La Solicitud HTTP","text":"<p>Una solicitud AJAX es, esencialmente, una solicitud HTTP asincr\u00f3nica.</p> <p>HTTP es un protocolo para obtener recursos como documentos HTML. Es la base de cualquier intercambio de datos en la Web y es un protocolo cliente-servidor, lo que significa que las solicitudes son iniciadas por el receptor, generalmente el navegador web. Un documento completo se construye t\u00edpicamente a partir de recursos como contenido de texto, instrucciones de dise\u00f1o, im\u00e1genes, videos, scripts y m\u00e1s.</p> <p></p> <p>Fuente --&gt; mdn web docs</p> <p>Aqu\u00ed est\u00e1n los componentes b\u00e1sicos de una solicitud HTTP:</p>"},{"location":"T06/#metodos-http","title":"M\u00e9todos HTTP:","text":"<ul> <li>GET: Solicita datos del servidor. Solo debe recuperar datos y no cambiar ning\u00fan estado del servidor.</li> <li>POST: Env\u00eda datos para ser procesados a un recurso espec\u00edfico. A menudo causa un cambio en el estado del servidor.</li> <li>PUT: Actualiza un recurso actual con nuevos datos.</li> <li>PATCH: Actualiza parte de un recurso actual con nuevos datos.</li> <li>DELETE: Elimina un recurso espec\u00edfico.</li> </ul>"},{"location":"T06/#url-de-solicitud","title":"URL de Solicitud","text":"<p>La URL especifica el punto final al que se env\u00eda la solicitud. Es la direcci\u00f3n del recurso.</p>"},{"location":"T06/#encabezados","title":"Encabezados","text":"<p>Los encabezados HTTP permiten al cliente y al servidor pasar informaci\u00f3n adicional con una solicitud o respuesta HTTP.</p>"},{"location":"T06/#cuerpo","title":"Cuerpo","text":"<p>El cuerpo de una solicitud HTTP contiene los datos que se enviar\u00e1n al servidor (principalmente utilizados con solicitudes POST y PUT). El formato m\u00e1s com\u00fan para enviar datos es texto plano formateado en JSON.</p> <p>Ejemplo de solicitud GET y POST:</p> <pre><code>  GET https://example.com/comments/1 HTTP/1.1\n\n  &lt;!-- ---------- --&gt;\n\n  GET https://example.com/topics/1 HTTP/1.1\n\n  &lt;!-- ---------- --&gt;\n\n  POST https://example.com/comments HTTP/1.1\n  content-type: application/json\n  {\n      \"name\": \"sample\",\n      \"time\": \"Wed, 21 Oct 2015 18:27:50 GMT\"\n  }\n</code></pre>"},{"location":"T06/#codigos-de-estado-de-respuesta-http","title":"C\u00f3digos de Estado de Respuesta HTTP","text":""},{"location":"T06/#12-entendiendo-la-asincronia-en-javascript","title":"1.2 Entendiendo la Asincron\u00eda en JavaScript","text":"<p>La asincron\u00eda es un concepto fundamental en JavaScript que permite a los programas manejar m\u00faltiples tareas a la vez sin bloquear el hilo principal. Es crucial para mejorar el rendimiento, especialmente en aplicaciones web, donde operaciones como solicitudes de red, lectura de archivos o temporizadores son comunes.</p> <p></p> <p>Por qu\u00e9 es importante la asincron\u00eda</p> <ol> <li>Mejora del Rendimiento: Al manejar tareas de manera concurrente, la aplicaci\u00f3n se mantiene receptiva y puede realizar m\u00faltiples operaciones de manera eficiente.</li> <li>Mejor Experiencia del Usuario: Los usuarios no tienen que esperar a que se completen tareas de larga duraci\u00f3n antes de interactuar con la aplicaci\u00f3n.</li> <li>Operaciones No Bloqueantes: Cr\u00edticas para solicitudes de red, lectura de archivos y otras operaciones de E/S donde esperar detendr\u00eda la ejecuci\u00f3n del c\u00f3digo subsiguiente.</li> </ol>"},{"location":"T06/#patrones-asincronicos-comunes","title":"Patrones Asincr\u00f3nicos Comunes","text":"<ol> <li> <p>Callbacks: Funciones pasadas como argumentos a otras funciones para ser ejecutadas m\u00e1s tarde. Pueden llevar a un \"callback hell\" al tratar con m\u00faltiples callbacks anidados.</p> </li> <li> <p>Promesas:</p> <ul> <li>Objetos que representan la eventual finalizaci\u00f3n o falla de una operaci\u00f3n asincr\u00f3nica.</li> <li>Proporcionan m\u00e9todos como then y catch para manejar casos de \u00e9xito y error.</li> </ul> </li> <li> <p>Async/Await</p> <ul> <li>Az\u00facar sint\u00e1ctica construida sobre Promesas, proporcionando una forma m\u00e1s legible y concisa de escribir c\u00f3digo asincr\u00f3nico.</li> <li>Requiere el uso de la palabra clave async para definir una funci\u00f3n que utiliza await para operaciones asincr\u00f3nicas.</li> </ul> </li> </ol>"},{"location":"T06/#13-metodos-para-hacer-solicitudes-ajax-en-js","title":"1.3 M\u00e9todos para Hacer Solicitudes Ajax en JS","text":""},{"location":"T06/#objeto-xmlhttprequest","title":"Objeto XMLHttpRequest","text":"<ul> <li>Descripci\u00f3n: Un m\u00e9todo cl\u00e1sico para realizar solicitudes HTTP. Desarrollado inicialmente en 2006, todav\u00eda se utiliza hoy en d\u00eda. Originalmente ten\u00eda problemas de compatibilidad con Internet Explorer, que usaba un nombre diferente para este objeto.</li> <li>Uso: Aunque es m\u00e1s antiguo y considerado m\u00e1s engorroso, <code>XMLHttpRequest</code> todav\u00eda es funcional y est\u00e1 soportado en todos los navegadores.</li> </ul>"},{"location":"T06/#fetch-api","title":"Fetch API","text":"<ul> <li>Descripci\u00f3n: Un m\u00e9todo m\u00e1s moderno, potente, flexible y f\u00e1cil de usar para hacer solicitudes HTTP.</li> <li>Uso: La Fetch API es ahora la forma preferida de hacer solicitudes HTTP debido a su simplicidad y arquitectura basada en promesas incorporadas.</li> </ul>"},{"location":"T06/#otros-metodos","title":"Otros M\u00e9todos","text":"<ul> <li>Axios: Un cliente HTTP basado en promesas para el navegador y Node.js. Es popular por su facilidad de uso y capacidad para manejar solicitudes y respuestas como JSON.</li> <li>jQuery: Una biblioteca de JavaScript r\u00e1pida, peque\u00f1a y rica en caracter\u00edsticas. jQuery proporciona un m\u00e9todo simple <code>$.ajax</code> para realizar solicitudes Ajax, lo que simplifica el proceso. La biblioteca jQuery y su m\u00e9todo <code>$.ajax()</code> tuvieron su momento de gloria facilitando las cosas durante la era de <code>XMLHttpRequest</code> y el antiguo Internet Explorer.</li> </ul>"},{"location":"T06/#2-rest-api","title":"2. REST API","text":"<p>Una REST API (Representational State Transfer Application Programming Interface) es una  interfaz de programaci\u00f3n de aplicaciones (API o API web) que se ajusta a los l\u00edmites de la arquitectura REST (Transferencia de Estado Representacional). Es un conjunto de reglas y convenciones para construir e interactuar con servicios web. Las REST APIs permiten que diferentes sistemas se comuniquen a trav\u00e9s de HTTP utilizando los m\u00e9todos est\u00e1ndar que hemos visto en el punto anterior, facilitando la integraci\u00f3n e interacci\u00f3n con aplicaciones y servicios web.</p>"},{"location":"T06/#componentes-clave","title":"Componentes Clave","text":"<ul> <li>Punto final: Una URL espec\u00edfica donde se puede acceder a la API.</li> <li>M\u00e9todo: El tipo de solicitud que se est\u00e1 realizando (por ejemplo, GET, POST, PUT, DELETE, PATCH).</li> <li>Solicitud: Los datos o acciones que deseas enviar al servidor. En la solicitud se incluyen los encabezados y el cuerpo si es necesario.</li> <li>Respuesta: Los datos enviados de vuelta desde el servidor despu\u00e9s de procesar la solicitud.</li> </ul>"},{"location":"T06/#21-herramientas-backend-para-construir-rest-api","title":"2.1 Herramientas Backend para construir REST API","text":"<p>Podemos construir una REST API con cualquier lenguaje de servidor:</p> <ul> <li>PHP</li> <li>Java</li> <li>Ruby</li> <li>Python</li> <li>NODE.js </li> <li>ASP.NET</li> </ul> <p>Para construir una API, a menudo usar\u00e1s un marco de servidor. Algunas opciones populares son:</p> <ul> <li>Node.js con Express (JavaScript)</li> <li>Django (Python)</li> <li>FastAPI (Python)</li> <li>Ruby on Rails (Ruby)</li> <li>Spring Boot (Java)</li> </ul> <p></p> <p>Pero este es un tema de Frontend, as\u00ed que vamos a usar APIs REST p\u00fablicas y una API REST de juguete construida con <code>json-server</code>.</p>"},{"location":"T06/#22-api-rest-publica","title":"2.2 API REST P\u00fablica","text":"<p>Las APIs REST p\u00fablicas proporcionan a los desarrolladores acceso a una variedad de servicios, datos y funcionalidades de diferentes proveedores. Aqu\u00ed hay una lista de algunas APIs REST p\u00fablicas com\u00fanmente utilizadas:</p>"},{"location":"T06/#redes-sociales-y-comunicacion","title":"Redes Sociales y Comunicaci\u00f3n","text":"<ol> <li> <p>Twitter API</p> <ul> <li>Descripci\u00f3n: Permite a los desarrolladores interactuar con datos de Twitter.</li> <li>Documentaci\u00f3n: Twitter API Docs</li> </ul> </li> <li> <p>Facebook Graph API</p> <ul> <li>Descripci\u00f3n: Proporciona acceso a datos del gr\u00e1fico social de Facebook.</li> <li>Documentaci\u00f3n: Facebook Graph API Docs</li> </ul> </li> <li> <p>Slack API</p> <ul> <li>Descripci\u00f3n: Permite la integraci\u00f3n con Slack para mensajer\u00eda y colaboraci\u00f3n.</li> <li>Documentaci\u00f3n: Slack API Docs</li> </ul> </li> </ol>"},{"location":"T06/#mapas-y-geolocalizacion","title":"Mapas y Geolocalizaci\u00f3n","text":"<ol> <li> <p>Google Maps API</p> <ul> <li>Descripci\u00f3n: Ofrece una amplia gama de servicios relacionados con mapas, incluyendo geolocalizaci\u00f3n, enrutamiento e informaci\u00f3n de lugares.</li> <li>Documentaci\u00f3n: Google Maps API Docs</li> </ul> </li> <li> <p>OpenWeatherMap API</p> <ul> <li>Descripci\u00f3n: Proporciona datos meteorol\u00f3gicos, pron\u00f3sticos e informaci\u00f3n hist\u00f3rica.</li> <li>Documentaci\u00f3n: OpenWeatherMap API Docs</li> </ul> </li> <li> <p>Mapbox API</p> <ul> <li>Descripci\u00f3n: Ofrece mapas personalizables y servicios de geolocalizaci\u00f3n.</li> <li>Documentaci\u00f3n: Mapbox API Docs</li> </ul> </li> </ol>"},{"location":"T06/#finanzas-y-criptomonedas","title":"Finanzas y Criptomonedas","text":"<ol> <li> <p>CoinGecko API</p> <ul> <li>Descripci\u00f3n: Proporciona datos sobre criptomonedas, incluyendo precios, capitalizaci\u00f3n de mercado y volumen de negociaci\u00f3n.</li> <li>Documentaci\u00f3n: CoinGecko API Docs</li> </ul> </li> <li> <p>Alpha Vantage API</p> <ul> <li>Descripci\u00f3n: Ofrece datos financieros, incluyendo precios de acciones, indicadores t\u00e9cnicos y datos de divisas.</li> <li>Documentaci\u00f3n: Alpha Vantage API Docs</li> </ul> </li> </ol>"},{"location":"T06/#entretenimiento","title":"Entretenimiento","text":"<ol> <li> <p>Spotify API</p> <ul> <li>Descripci\u00f3n: Permite acceso al cat\u00e1logo musical de Spotify y datos de usuario.</li> <li>Documentaci\u00f3n: Spotify API Docs</li> </ul> </li> <li> <p>The Movie Database (TMDb) API</p> <ul> <li>Descripci\u00f3n: Proporciona informaci\u00f3n sobre pel\u00edculas, programas de televisi\u00f3n y actores.</li> <li>Documentaci\u00f3n: TMDb API Docs</li> </ul> </li> <li> <p>YouTube Data API</p> <ul> <li>Descripci\u00f3n: Permite acceso a contenido de YouTube y datos de usuario.</li> <li>Documentaci\u00f3n: YouTube Data API Docs</li> </ul> </li> </ol>"},{"location":"T06/#utilidad-y-varios","title":"Utilidad y Varios","text":"<ol> <li> <p>GitHub API</p> <ul> <li>Descripci\u00f3n: Proporciona acceso a repositorios de GitHub, versiones y datos de usuario.</li> <li>Documentaci\u00f3n: GitHub API Docs</li> </ul> </li> <li> <p>REST Countries API</p> <ul> <li>Descripci\u00f3n: Ofrece informaci\u00f3n sobre pa\u00edses, incluyendo poblaci\u00f3n, \u00e1rea y ciudades capitales.</li> <li>Documentaci\u00f3n: REST Countries API Docs</li> </ul> </li> <li> <p>NASA API</p> <ul> <li>Descripci\u00f3n: Proporciona acceso a una amplia gama de datos de la NASA, incluyendo im\u00e1genes, videos e informaci\u00f3n planetaria.</li> <li>Documentaci\u00f3n: NASA API Docs</li> </ul> </li> <li> <p>Random User API</p> <ul> <li>Descripci\u00f3n: Genera datos de usuario aleatorios, incluyendo nombres, direcciones y fotos de perfil.</li> <li>Documentaci\u00f3n: Random User API Docs</li> </ul> </li> <li> <p>Open Library API</p> <ul> <li>Descripci\u00f3n: Proporciona acceso a datos de libros del proyecto Open Library.</li> <li>Documentaci\u00f3n: Open Library API Docs</li> </ul> </li> <li> <p>PokeAPI</p> <ul> <li>Descripci\u00f3n: Ofrece datos del universo Pok\u00e9mon, incluyendo Pok\u00e9mon, habilidades y movimientos.</li> <li>Documentaci\u00f3n: PokeAPI Docs</li> </ul> </li> </ol>  Ejercicio Pr\u00e1ctico 1: Creando un archivo .rest para una API REST p\u00fablica <p>En este ejercicio, crear\u00e1s un archivo `.rest` utilizando la extensi\u00f3n REST Client para Visual Studio Code. Explorar\u00e1s una API REST p\u00fablica gratuita para datos de Pok\u00e9mon. El archivo debe contener al menos 5 puntos finales diferentes.</p> <p>Sigue estos pasos:</p> <ol> <li>Instala la extensi\u00f3n REST Client para Visual Studio Code si a\u00fan no lo has hecho.</li> <li>Elige una API REST de acceso gratuito.</li> <li>Crea un nuevo archivo llamado `tu-api-elegida.rest` en tu directorio de proyecto.</li> <li>Agrega cinco puntos finales diferentes a tu archivo `tu-api-elegida.rest`:</li> <li>Prueba los puntos finales.</li> </ol>"},{"location":"T06/#-comprueba-esto","title":"\u00a1-Comprueba esto!","text":"<p>Mucho m\u00e1s que una REST API p\u00fablica</p>"},{"location":"T06/#23-servidor-json","title":"2.3 Servidor JSON","text":"<p>JSON Server es una herramienta poderosa que permite a los desarrolladores crear una API REST falsa completa con un esfuerzo m\u00ednimo. Es especialmente \u00fatil para desarrolladores frontend que necesitan una forma r\u00e1pida y sencilla de simular un servidor backend sin configurar un entorno de servidor completo. Con JSON Server, puedes crear r\u00e1pidamente una API simulada, probar tu c\u00f3digo frontend y prototipar aplicaciones sin necesidad de un backend real.</p>"},{"location":"T06/#caracteristicas-clave","title":"Caracter\u00edsticas ClavePasos para Crear una API Falsa","text":"<ul> <li>Sin Necesidad de Programaci\u00f3n: Crea una API completa a partir de un simple archivo JSON.</li> <li>Configuraci\u00f3n Extremadamente R\u00e1pida: Pon en marcha una API simulada en minutos.</li> <li>Rutas RESTful: Genera autom\u00e1ticamente rutas RESTful basadas en tus datos.</li> <li>Operaciones CRUD: Soporta operaciones de Crear, Leer, Actualizar y Eliminar.</li> <li>Rutas Personalizadas: Permite definir rutas personalizadas y agregar middleware para configuraciones m\u00e1s complejas.</li> <li>Servicio de Archivos Est\u00e1ticos: Puede servir archivos est\u00e1ticos junto con la API, \u00fatil para servir tu aplicaci\u00f3n frontend.</li> </ul>  Ejercicio Pr\u00e1ctico: Crear una API Falsa con JSON Server <p>En este ejercicio, crear\u00e1s una API REST falsa usando JSON Server. Esto te ayudar\u00e1 a entender c\u00f3mo simular un backend para tu desarrollo frontend. Sigue los pasos a continuaci\u00f3n para configurar y ejecutar tu API falsa:</p> <ol> <li> Instala JSON Server: <p>Primero, aseg\u00farate de tener Node.js instalado. Luego, instala JSON Server globalmente usando npm.</p> <pre><code>npm install -g json-server</code></pre> </li> <li> Crea un Archivo <code>db.json</code>: <p>En tu directorio de proyecto, crea un archivo llamado <code>db.json</code>. Este archivo contendr\u00e1 tus datos falsos. A continuaci\u00f3n, se muestra una estructura de ejemplo para una API simple:</p> <pre><code> {\n  \"posts\": [\n    { \"id\": 1, \"title\": \"Hola Mundo\", \"author\": \"John Doe\" },\n    { \"id\": 2, \"title\": \"Aprendiendo JSON Server\", \"author\": \"Jane Doe\" }\n  ],\n  \"comments\": [\n    { \"id\": 1, \"postId\": 1, \"body\": \"\u00a1Gran publicaci\u00f3n!\" },\n    { \"id\": 2, \"postId\": 2, \"body\": \"Muy informativa.\" }\n  ],\n  \"profile\": { \"name\": \"John Doe\" }\n}</code></pre> </li> <li> Inicia JSON Server: <p>Ejecuta JSON Server con el archivo <code>db.json</code> que creaste.</p> <pre><code>npx json-server db.json</code></pre> </li> <li> Accede a Tu API Falsa: <p>Una vez que JSON Server est\u00e9 en funcionamiento, puedes acceder a tu API falsa en <code>http://localhost:3000</code>. Aqu\u00ed hay algunos ejemplos de endpoints basados en el archivo <code>db.json</code>:</p> <ul> <li><code>GET /posts</code> - Listar todas las publicaciones</li> <li><code>GET /posts/1</code> - Obtener una publicaci\u00f3n espec\u00edfica por ID</li> <li><code>POST /posts</code> - Crear una nueva publicaci\u00f3n</li> <li><code>PUT /posts/1</code> - Actualizar una publicaci\u00f3n por ID</li> <li><code>DELETE /posts/1</code> - Eliminar una publicaci\u00f3n por ID</li> <li><code>GET /comments</code> - Listar todos los comentarios</li> <li><code>GET /profile</code> - Obtener el perfil</li> </ul> </li> <li> Realiza Solicitudes a Tu API Falsa: <p>Utiliza herramientas como Postman, cURL, o la extensi\u00f3n REST Client en Visual Studio Code para hacer solicitudes a tus endpoints de API falsa y observar las respuestas.</p> </li> </ol> <p>Experimenta con diferentes estructuras de datos y endpoints para familiarizarte con el funcionamiento de JSON Server. Esta es una herramienta poderosa para configurar r\u00e1pidamente un backend simulado que ayude en el desarrollo frontend.</p>"},{"location":"T06/#3-diferentes-soluciones-para-probar-tu-api-rest","title":"3. Diferentes Soluciones para Probar Tu API REST","text":"<p>Al desarrollar y probar APIs REST, es esencial tener herramientas que te ayuden a hacer solicitudes a tus endpoints e inspeccionar las respuestas.</p> <p>Podemos simplemente pegar la URL del endpoint en la barra de direcciones del navegador cuando tenemos una solicitud GET simple.</p> <p>Intenta pegar esto en tu navegador:</p> <pre><code>https://pokeapi.co/api/v2/pokemon/ditto\n</code></pre> <p>Podemos mejorar la respuesta JSON mostrada en el navegador con alg\u00fan complemento para Chrome como JSON Viewer.</p> <p>Tambi\u00e9n podemos usar el comando curl para probar un endpoint en la l\u00ednea de comandos.</p> <p>Pero cuando tenemos solicitudes m\u00e1s complicadas, como POST con cargas \u00fatiles y encabezados m\u00e1s complejos, preferimos usar una opci\u00f3n m\u00e1s robusta.</p> <p>Aqu\u00ed hay tres soluciones populares:</p>"},{"location":"T06/#31-postman","title":"3.1 Postman","text":""},{"location":"T06/#descripcion-general","title":"Descripci\u00f3n General","text":"<p>Postman es un entorno completo para el desarrollo de APIs que te permite crear, compartir, probar y documentar APIs. Tiene una interfaz amigable y ofrece una amplia gama de caracter\u00edsticas.</p>"},{"location":"T06/#caracteristicas-clave_1","title":"Caracter\u00edsticas Clave","text":"<ul> <li>Colecciones: Organiza tus solicitudes API en colecciones para una mejor gesti\u00f3n y colaboraci\u00f3n.</li> <li>Variables de Entorno: Cambia f\u00e1cilmente entre diferentes entornos (por ejemplo, desarrollo, pruebas, producci\u00f3n) usando variables.</li> <li>Pruebas Automatizadas: Crea scripts de prueba usando JavaScript para automatizar las pruebas de la API.</li> <li>Servidores Simulados: Simula endpoints de API con fines de prueba sin necesidad del servidor real.</li> <li>Colaboraci\u00f3n: Comparte colecciones y espacios de trabajo con miembros del equipo para mejorar la colaboraci\u00f3n.</li> </ul>"},{"location":"T06/#ejemplo-de-uso","title":"Ejemplo de Uso","text":"<ol> <li>Crea una nueva solicitud.</li> <li>Establece el m\u00e9todo HTTP (GET, POST, PUT, DELETE, etc.).</li> <li>Ingresa la URL del endpoint de la API.</li> <li>Agrega encabezados, par\u00e1metros de consulta y cuerpo de la solicitud si es necesario.</li> <li>Haz clic en el bot\u00f3n \"Enviar\" para realizar la solicitud e inspeccionar la respuesta.</li> </ol>"},{"location":"T06/#descargar","title":"Descargar","text":"<p>Descargar Postman</p>"},{"location":"T06/#32-thunder-client","title":"3.2 Thunder Client","text":""},{"location":"T06/#descripcion-general_1","title":"Descripci\u00f3n General","text":"<p>Thunder Client es un cliente REST API ligero para la extensi\u00f3n Visual Studio Code (VSCode). Est\u00e1 dise\u00f1ado para ser simple y f\u00e1cil de usar dentro del entorno de VSCode.</p>"},{"location":"T06/#caracteristicas-clave_2","title":"Caracter\u00edsticas Clave","text":"<ul> <li>Integrado con VSCode: No es necesario cambiar entre aplicaciones; \u00fasalo directamente dentro de tu editor de c\u00f3digo.</li> <li>Variables de Entorno: Gestiona variables de entorno para cambiar f\u00e1cilmente entre diferentes configuraciones.</li> <li>Colecciones: Organiza tus solicitudes en colecciones para una mejor estructura.</li> <li>Pruebas R\u00e1pidas: Capacidades b\u00e1sicas de prueba para validar tus respuestas de API.</li> <li>Ligero: Dise\u00f1o minimalista con caracter\u00edsticas esenciales para pruebas de API r\u00e1pidas y eficientes.</li> </ul>"},{"location":"T06/#ejemplo-de-uso_1","title":"Ejemplo de Uso","text":"<ol> <li>Instala la extensi\u00f3n Thunder Client en VSCode.</li> <li>Abre el panel de Thunder Client desde la barra lateral.</li> <li>Crea una nueva solicitud y establece el m\u00e9todo HTTP.</li> <li>Ingresa la URL del endpoint de la API.</li> <li>Agrega encabezados, par\u00e1metros de consulta y cuerpo de la solicitud si es necesario.</li> <li>Haz clic en el bot\u00f3n \"Enviar\" para realizar la solicitud y ver la respuesta.</li> </ol>"},{"location":"T06/#descargar_1","title":"Descargar","text":"<p>Descargar Thunder Client</p>"},{"location":"T06/#33-rest-client","title":"3.3 REST Client","text":""},{"location":"T06/#descripcion-general_2","title":"Descripci\u00f3n General","text":"<p>REST Client es otra extensi\u00f3n de VSCode que te permite enviar solicitudes HTTP y ver las respuestas directamente en tu editor de c\u00f3digo. Es ideal para aquellos que prefieren un enfoque m\u00e1s centrado en el c\u00f3digo.</p>"},{"location":"T06/#caracteristicas-clave_3","title":"Caracter\u00edsticas Clave","text":"<ul> <li>Archivos de Solicitud: Escribe tus solicitudes en archivos <code>.http</code> o <code>.rest</code> para mejor organizaci\u00f3n y control de versiones.</li> <li>Variables de Entorno: Usa variables de entorno para gestionar diferentes configuraciones para tus solicitudes API.</li> <li>Documentaci\u00f3n en L\u00ednea: Documenta tus solicitudes en l\u00ednea con tu c\u00f3digo para una mejor legibilidad.</li> <li>Soporte para Varios M\u00e9todos HTTP: Env\u00eda f\u00e1cilmente solicitudes GET, POST, PUT, DELETE y otros tipos de solicitudes HTTP.</li> </ul>"},{"location":"T06/#ejemplo-de-uso_2","title":"Ejemplo de Uso","text":"<ol> <li>Instala la extensi\u00f3n REST Client en VSCode.</li> <li>Crea un nuevo archivo <code>.http</code> o <code>.rest</code>.</li> <li>Escribe tu solicitud, por ejemplo:</li> </ol> <p><pre><code>GET https://example.com/comments/1 HTTP/1.1\n\n###\n\nGET https://example.com/topics/1 HTTP/1.1\n\n###\n\nPOST https://example.com/comments HTTP/1.1\ncontent-type: application/json\n{\n    \"name\": \"muestra\",\n    \"time\": \"Wed, 21 Oct 2015 18:27:50 GMT\"\n}\n</code></pre> 4. Haz clic en el enlace \"Enviar Solicitud\" encima de la solicitud para ejecutarla y ver la respuesta en un panel dividido.</p> <p></p>"},{"location":"T06/#descargar_2","title":"Descargar","text":"<p>Descargar REST Client</p>"},{"location":"T06/#4-xmlhttprequest","title":"4. XMLHttpRequest","text":"<p>No vamos a usar esta forma m\u00e1s antigua, pero podemos ver este peque\u00f1o ejemplo para entenderlo.</p> <pre><code>// Crea un nuevo objeto XMLHttpRequest\nvar xhr = new XMLHttpRequest();\n\n// Config\u00faralo: solicitud GET para la URL /users\nxhr.open('GET', 'https://jsonplaceholder.typicode.com/users', true);\n\n// Configura una funci\u00f3n para manejar la respuesta\nxhr.addEventListener(\"load\", function () {\n  if (xhr.status &gt;= 200 &amp;&amp; xhr.status &lt; 300) {\n    // Analiza la respuesta JSON\n    var users = JSON.parse(xhr.responseText);\n\n    // Registra la respuesta en la consola\n    console.log(users);\n\n    // Muestra la respuesta en el elemento &lt;pre&gt;\n    document.getElementById('responseOutput').textContent = JSON.stringify(users, null, 2);\n  } else {\n    console.error('La solicitud fall\u00f3. C\u00f3digo de estado devuelto: ' + xhr.status);\n  }\n});\n\n// Manejar errores de red\nxhr.addEventListener(\"error\", function () {\n  console.error('La solicitud fall\u00f3.');\n})\n\n// Env\u00eda la solicitud\nxhr.send();\n</code></pre>"},{"location":"T06/#5-fetch-api","title":"5. Fetch API","text":"<p>En el desarrollo web moderno, Fetch simplifica y mejora muchos aspectos de las conexiones AJAX. Es ahora compatible con la mayor\u00eda de los navegadores, lo que lo convierte en una opci\u00f3n preferida para manejar solicitudes as\u00edncronas.</p>"},{"location":"T06/#metodos-clave-para-manejar-la-asincronia-con-fetch","title":"M\u00e9todos Clave para Manejar la Asincron\u00eda con Fetch:","text":"<ol> <li>Promesas</li> <li>async / await</li> </ol>"},{"location":"T06/#-enlace-a-fetch-en-mdn","title":"--&gt; Enlace a Fetch en MDN","text":""},{"location":"T06/#51-fetch-con-promesas","title":"5.1 Fetch con Promesas","text":"<p>La API Fetch utiliza Promesas para manejar operaciones as\u00edncronas. Aqu\u00ed hay un ejemplo b\u00e1sico de c\u00f3mo usar Fetch con Promesas:</p> <pre><code>// Esta es una solicitud GET con promesas\nfetch('https://jsonplaceholder.typicode.com/posts/1')\n  .then(response =&gt; {\n    // analiza la respuesta JSON\n    return response.json();\n  })\n  .then(data =&gt; {\n      // Haz algo con los datos\n      document.getElementById('output').innerText = JSON.stringify(data);\n  })\n  .catch(error =&gt; console.error('Error:', error));\n</code></pre>"},{"location":"T06/#52-fetch-con-asyncawait","title":"5.2 Fetch con Async/Await","text":"<p>La sintaxis async/await proporciona una forma m\u00e1s limpia y legible de manejar operaciones as\u00edncronas. Es importante notar que <code>await</code> solo puede usarse dentro de una funci\u00f3n <code>async</code>. Aqu\u00ed te mostramos c\u00f3mo usar Fetch con async/await:</p> <pre><code>// Esta es una solicitud GET con async/await\nasync function fetchData() {\n    try {\n        const response = await fetch('https://jsonplaceholder.typicode.com/posts/1');\n        // analiza la respuesta JSON\n        const data = await response.json();\n        // haz algo con los datos\n        console.log(data);\n        return data;\n    } catch (error) {\n        console.error('Error:', error);\n    }\n}\n</code></pre>"},{"location":"T06/#53-manejo-de-respuestas-http","title":"5.3 Manejo de Respuestas HTTP","text":"<p>El objeto <code>Response</code> en la API Fetch proporciona varios m\u00e9todos para manejar y formatear las respuestas HTTP. Cada uno de estos m\u00e9todos devuelve una promesa que se resuelve a diferentes tipos de datos.</p> <ul> <li><code>response.json()</code>: Devuelve una promesa resuelta a un objeto JSON.</li> <li><code>response.text()</code>: Devuelve una promesa resuelta a texto sin formato.</li> <li><code>response.formData()</code>: Devuelve una promesa resuelta a <code>formData</code>.</li> <li><code>response.blob()</code>: Devuelve una promesa resuelta a un <code>Blob</code> (un objeto similar a un archivo de datos binarios).</li> </ul>"},{"location":"T06/#responsejson","title":"<code>response.json()</code>","text":"<p>Este es el que utilizaremos la mayor\u00eda de las veces, porque JSON es el formato m\u00e1s com\u00fan que las API nos ofrecen para los datos.</p> <ul> <li>Devuelve una promesa resuelta a un objeto JSON.</li> <li>\u00datil para manejar respuestas que contienen datos JSON.</li> </ul> <pre><code>fetch('https://api.ejemplo.com/datos')\n    .then(response =&gt; response.json())\n    .then(data =&gt; console.log(data))\n    .catch(error =&gt; console.error('Error:', error));\n</code></pre>"},{"location":"T06/#informacion-sobre-el-estado-de-la-conexion","title":"Informaci\u00f3n sobre el Estado de la Conexi\u00f3n","text":"<p>El objeto <code>Response</code> tambi\u00e9n proporciona informaci\u00f3n sobre el estado de la conexi\u00f3n:</p>"},{"location":"T06/#responsestatus","title":"<code>response.status</code>","text":"<ul> <li>Devuelve el c\u00f3digo de estado de la respuesta.</li> <li>Los valores t\u00edpicos incluyen:<ul> <li><code>100-199</code>: Respuestas informativas.</li> <li><code>200-299</code>: Respuestas exitosas.<ul> <li><code>200</code>: OK.</li> </ul> </li> <li><code>300-399</code>: Mensajes de redirecci\u00f3n.</li> <li><code>400-499</code>: Respuesta de error del cliente.<ul> <li><code>404</code>: No encontrado.</li> </ul> </li> <li><code>500-599</code>: Respuestas de error del servidor.<ul> <li><code>500</code>: Error interno del servidor.</li> </ul> </li> <li>Todos los c\u00f3digos de estado de respuesta HTTP <pre><code>fetch('https://api.ejemplo.com/datos')\n    .then(response =&gt; {\n        console.log(response.status); // por ejemplo, 200, 404, 500\n        return response.json();\n    })\n    .then(data =&gt; console.log(data))\n    .catch(error =&gt; console.error('Error:', error));\n</code></pre></li> </ul> </li> </ul>"},{"location":"T06/#responseok","title":"<code>response.ok</code>","text":"<ul> <li>Devuelve un booleano que indica si la respuesta fue exitosa (c\u00f3digo de estado en el rango 200-299).</li> </ul> <pre><code>fetch('https://api.ejemplo.com/datos')\n    .then(response =&gt; {\n        if (response.ok) {\n            return response.json();\n        } else {\n            throw new Error('La respuesta de la red no fue correcta');\n        }\n    })\n    .then(data =&gt; console.log(data))\n    .catch(error =&gt; console.error('Error:', error));\n</code></pre>"},{"location":"T06/#53-solicitudes-get-post-put-patch-delete","title":"5.3 Solicitudes GET, POST, PUT, PATCH, DELETE","text":"<p>Como puedes ver, si no especificas un m\u00e9todo, el m\u00e9todo por defecto es GET. En los ejemplos anteriores hemos creado solicitudes GET. No hemos definido <code>method</code>, <code>body</code> o <code>headers</code> en las opciones de fetch.</p> <p>Cuando se trata de solicitudes POST, PUT y PATCH, necesitamos incluir <code>method</code>, <code>body</code> y <code>headers</code> como opciones de fetch.</p>"},{"location":"T06/#solicitudes-get","title":"Solicitudes GET:","text":"<ul> <li>Para solicitudes GET, generalmente no necesitamos incluir un encabezado Content-Type. Las solicitudes GET no tienen cuerpo, por lo que no hay un tipo de contenido que especificar.</li> <li>Sin embargo, podemos enviar algunos datos como par\u00e1metros cuando el punto final de la API lo permite.</li> <li>Pero quiz\u00e1s necesitemos incluir informaci\u00f3n en el encabezado, como <code>'Authorization'</code> en los casos en que sea necesario.</li> </ul> <p>Ejemplo:</p> <pre><code>// Ejemplo de solicitud GET simple\nfetch('https://api.ejemplo.com/get-images?query=gatos&amp;limit=20')\n    .then(response =&gt; response.json())\n    .then(data =&gt; console.log(data))\n    .catch(error =&gt; console.error('Error:', error));\n\n// GET con autorizaci\u00f3n requerida\nfetch('https://api.ejemplo.com/get-images?query=gatos&amp;limit=20', {\n  headers: {\n        'Authorization': 'Bearer tu-api-key'\n    },\n})\n    .then(response =&gt; response.json())\n    .then(data =&gt; console.log(data))\n    .catch(error =&gt; console.error('Error:', error));\n</code></pre>"},{"location":"T06/#solicitudes-post-put-patch","title":"Solicitudes POST, PUT, PATCH:","text":"<p>Para estos tipos de solicitudes que crean o modifican un recurso, necesitamos enviar un <code>body</code>. Ser\u00e1 necesario incluir:</p> <ul> <li>Encabezado <code>Content-Type</code> para especificar el tipo de contenido<ul> <li>Valores comunes para el encabezado Content-Type incluyen <code>application/json</code>, <code>application/x-www-form-urlencoded</code>, <code>multipart/form-data</code>, etc.</li> </ul> </li> <li><code>method</code>:<ul> <li><code>'POST'</code></li> <li><code>'PUT'</code></li> <li><code>'PATCH'</code></li> </ul> </li> <li><code>body</code>: La mayor\u00eda de las veces, cuando <code>Content-Type</code> es JSON, tenemos que 'stringify' alg\u00fan objeto de datos:<ul> <li><code>body: JSON.stringify(data)</code></li> </ul> </li> </ul> <p>Ejemplos: <pre><code>const BASE_URL = 'https://api.ejemplo.com';\nconst API_KEY = 'tu-api-key';\n\n// Funci\u00f3n para manejar solicitudes POST\nexport async function postData(endpoint, body) {\n    try {\n        const response = await fetch(`${BASE_URL}${endpoint}`, {\n            method: 'POST',\n            headers: {\n                'Authorization': `Bearer ${API_KEY}`,\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify(body)\n        });\n        if (!response.ok) {\n            throw new Error(`Error: ${response.statusText}`);\n        }\n        const data = await response.json();\n        return data;\n    } catch (error) {\n        console.error('Error al enviar datos:', error);\n        throw error;\n    }\n}\n\n// Funci\u00f3n para manejar solicitudes PUT\nexport async function putData(endpoint, body) {\n    try {\n        const response = await fetch(`${BASE_URL}${endpoint}`, {\n            method: 'PUT',\n            headers: {\n                'Authorization': `Bearer ${API_KEY}`,\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify(body)\n        });\n        if (!response.ok) {\n            throw new Error(`Error: ${response.statusText}`);\n        }\n        const data = await response.json();\n        return data;\n    } catch (error) {\n        console.error('Error al actualizar datos:', error);\n        throw error;\n    }\n}\n</code></pre></p>"},{"location":"T06/#solicitudes-delete","title":"Solicitudes DELETE","text":"<ul> <li>El m\u00e9todo DELETE se utiliza para eliminar un recurso identificado por una URL. Al igual que el m\u00e9todo GET, el m\u00e9todo DELETE generalmente no necesita un cuerpo y, por lo tanto, no suele requerir un encabezado <code>Content-Type</code>. Sin embargo, hay algunos escenarios en los que podr\u00edas necesitar incluir un cuerpo con una solicitud DELETE y tambi\u00e9n podr\u00eda ser necesario incluir informaci\u00f3n en el encabezado como <code>'Authorization'</code>.</li> </ul> <p>Ejemplo: <pre><code>// Funci\u00f3n de eliminaci\u00f3n simple sin opciones\nexport async function simpleDeleteData(endpoint) {\n    try {\n        const response = await fetch(`${BASE_URL}${endpoint}`, {\n          method: 'DELETE'\n        });\n        if (!response.ok) {\n            throw new Error(`Error: ${response.statusText}`);\n        }\n        const data = await response.json();\n        return data;\n    } catch (error) {\n        console.error('Error al eliminar datos:', error);\n        throw error;\n    }\n}\n\n// Funci\u00f3n m\u00e1s avanzada, con algunas opciones\nexport async function deleteData(endpoint, body = null) {\n    try {\n        const options = {\n            method: 'DELETE',\n            headers: {\n                'Authorization': `Bearer ${API_KEY}`\n            }\n        };\n        // Si se pide un cuerpo, lo stringify\n        if (body) {\n            options.headers['Content-Type'] = 'application/json';\n            options.body = JSON.stringify(body);\n        }\n        const response = await fetch(`${BASE_URL}${endpoint}`, options);\n        if (!response.ok) {\n            throw new Error(`Error: ${response.statusText}`);\n        }\n        const data = await response.json();\n        return data;\n    } catch (error) {\n        console.error('Error al eliminar datos:', error);\n        throw error;\n    }\n}\n</code></pre></p>"},{"location":"T06/#54-encapsular-solicitudes-fetch-en-modulos-reutilizables","title":"5.4 Encapsular Solicitudes Fetch en M\u00f3dulos ReutilizablesIMPORTANTE","text":"<p>Siempre es una buena pr\u00e1ctica encapsular las solicitudes <code>fetch</code> a nuestra API en un m\u00f3dulo de JavaScript separado que podamos importar en el m\u00f3dulo principal. Para este prop\u00f3sito, debemos utilizar M\u00f3dulos de Ecma Script (ESM).</p> <ol> <li>Importar el Script Principal como un M\u00f3dulo</li> </ol> <pre><code>&lt;script src=\"your-main.js\" type=\"module\"&gt;&lt;/script&gt;\n</code></pre> <ol> <li>Crear el M\u00f3dulo <code>your-api.js</code></li> </ol> <p>Crea un archivo de JavaScript separado llamado <code>your-api.js</code> que encapsule toda la l\u00f3gica para acceder a la API. Este m\u00f3dulo contendr\u00e1 constantes, como la URL base y las claves de la API, as\u00ed como funciones para realizar solicitudes a la API.</p> <pre><code>// your-api.js\n\nconst BASE_URL = 'https://api.example.com';\nconst API_KEY = 'your-api-key';\n\n// Funci\u00f3n para manejar solicitudes GET\nexport async function fetchData(endpoint) {\n    try {\n        const response = await fetch(`${BASE_URL}${endpoint}`, {\n            headers: {\n                'Authorization': `Bearer ${API_KEY}`,\n                'Content-Type': 'application/json'\n            }\n        });\n        if (!response.ok) {\n            throw new Error(`Error: ${response.statusText}`);\n        }\n        const data = await response.json();\n        return data;\n    } catch (error) {\n        console.error('Error al Obtener Datos:', error);\n        throw error;\n    }\n}\n\n// Funci\u00f3n para manejar solicitudes POST\nexport async function postData(endpoint, body) {\n    try {\n        const response = await fetch(`${BASE_URL}${endpoint}`, {\n            method: 'POST',\n            headers: {\n                'Authorization': `Bearer ${API_KEY}`,\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify(body)\n        });\n        if (!response.ok) {\n            throw new Error(`Error: ${response.statusText}`);\n        }\n        const data = await response.json();\n        return data;\n    } catch (error) {\n        console.error('Error al Publicar Datos:', error);\n        throw error;\n    }\n}\n\n// Otras funciones relacionadas con la API se pueden agregar aqu\u00ed\n</code></pre> <ol> <li>Importar y Usar el M\u00f3dulo de API en el Script Principal</li> </ol> <p>En tu archivo principal de JavaScript, <code>your-main.js</code>, importa las funciones del m\u00f3dulo <code>your-api.js</code> y \u00fasalas para realizar solicitudes a la API.</p> <pre><code>// your-main.js\nimport { fetchData, postData } from './your-api.js';\n\nasync function main() {\n    try {\n        // Ejemplo de realizar una solicitud GET\n        const data = await fetchData('/some-endpoint');\n        console.log('Datos Obtenidos:', data);\n\n        // Ejemplo de realizar una solicitud POST\n        const postDataBody = { key: 'value' };\n        const postDataResponse = await postData('/some-endpoint', postDataBody);\n        console.log('Datos Publicados:', postDataResponse);\n    } catch (error) {\n        console.error('Error en la Funci\u00f3n Principal:', error);\n    }\n}\n\n// Ejecutar la funci\u00f3n principal\nmain();\n</code></pre> <p>A partir de ahora, es OBLIGATORIO encapsular las funciones fetch de cada API a la que accedemos en nuestro proyecto en un m\u00f3dulo separado.</p>"},{"location":"T07/","title":"UNIDAD 7 - Almacenamiento del Lado del Cliente","text":""},{"location":"T07/#1-introduccion","title":"1. Introducci\u00f3n","text":"<p>El almacenamiento del lado del cliente se refiere a los diversos m\u00e9todos que permiten a las aplicaciones web almacenar datos en el lado del cliente, dentro del navegador del usuario. Esto permite a las aplicaciones web guardar y recuperar datos sin requerir comunicaci\u00f3n constante con el servidor. El almacenamiento del lado del cliente mejora la experiencia del usuario al proporcionar acceso m\u00e1s r\u00e1pido a los datos y reducir la carga del servidor.</p>"},{"location":"T07/#11-usos","title":"1.1 Usos","text":"<p>El almacenamiento del lado del cliente se puede utilizar para una variedad de prop\u00f3sitos, incluyendo:</p> <ul> <li>Almacenamiento de Preferencias del Usuario: Guardar configuraciones y preferencias para una experiencia personalizada.</li> <li>Seguimiento: Registrar y analizar el comportamiento del usuario.</li> <li>Acceso Offline: Permitir a los usuarios acceder e interactuar con aplicaciones web incluso cuando est\u00e1n desconectados.</li> <li>Gesti\u00f3n de Sesiones: Mantener informaci\u00f3n de sesi\u00f3n del usuario para mantener a los usuarios conectados o recordar su progreso en una tarea.</li> <li>Cach\u00e9 de Datos: Almacenar datos a los que se accede frecuentemente para mejorar el rendimiento y reducir las solicitudes al servidor.</li> <li>Almacenamiento Temporal de Datos: Mantener datos temporalmente durante la interacci\u00f3n de un usuario con la aplicaci\u00f3n web, como entradas de formularios o archivos temporales.</li> </ul>"},{"location":"T07/#12-metodos","title":"1.2 M\u00e9todos","text":"<ul> <li> <p>Cookies (m\u00e9todo antiguo): Peque\u00f1as piezas de datos almacenadas en el navegador y enviadas al servidor con cada solicitud HTTP. Com\u00fanmente utilizadas para la gesti\u00f3n de sesiones y preferencias del usuario.</p> </li> <li> <p>Almacenamiento Local: Almacenamiento de clave-valor que permite que los datos se almacenen de forma persistente en el navegador sin una fecha de expiraci\u00f3n. Ideal para guardar configuraciones y datos de aplicaci\u00f3n que no necesitan ser enviados al servidor.</p> </li> <li> <p>Almacenamiento de Sesi\u00f3n: Similar al Almacenamiento Local, pero los datos solo se almacenan durante la duraci\u00f3n de la sesi\u00f3n de la p\u00e1gina. \u00datil para datos temporales que solo necesitan ser accesibles mientras la p\u00e1gina est\u00e1 abierta.</p> </li> <li> <p>IndexedDB: Una base de datos NoSQL que permite almacenar grandes cantidades de datos estructurados. Adecuada para aplicaciones complejas que requieren un almacenamiento local significativo y capacidades offline.</p> </li> </ul> <p></p> <p>Fuente de la imagen: Local Storage vs. Session Storage vs. Cookies @ LoginRadius</p>"},{"location":"T07/#2-cookies","title":"2. Cookies","text":"<ul> <li>Peque\u00f1as piezas de datos almacenadas en el navegador y enviadas al servidor con cada solicitud HTTP.</li> <li>Com\u00fanmente utilizadas para la gesti\u00f3n de sesiones, seguimiento de usuarios y preferencias del usuario.</li> <li>Ventajas:<ul> <li>Env\u00edo autom\u00e1tico con solicitudes HTTP.</li> <li>Soporte universal en navegadores.</li> <li>Control del servidor sobre la configuraci\u00f3n, modificaci\u00f3n y eliminaci\u00f3n de cookies.</li> <li>Fecha de expiraci\u00f3n y alcance configurables.</li> </ul> </li> </ul> <p>Fuente: mdn web docs</p>"},{"location":"T07/#21-tipos-de-cookies","title":"2.1 Tipos de Cookies","text":"<ul> <li> <p>Cookies de Sesi\u00f3n:</p> <ul> <li>Estas cookies son temporales y se eliminan una vez que se cierra el navegador.</li> <li>Com\u00fanmente utilizadas para almacenar datos de sesi\u00f3n que solo necesitan persistir durante una \u00fanica sesi\u00f3n de navegaci\u00f3n.</li> </ul> </li> <li> <p>Cookies Persistentes:</p> <ul> <li>Estas cookies permanecen en el dispositivo del usuario por un per\u00edodo establecido o hasta que se eliminan manualmente.</li> <li>Se utilizan para almacenar preferencias del usuario, informaci\u00f3n de inicio de sesi\u00f3n y otras configuraciones que necesitan persistir entre sesiones.</li> </ul> </li> </ul>"},{"location":"T07/#22-escritura-de-cookies","title":"2.2 Escritura de Cookies","text":"<p>Para escribir cookies utilizando JavaScript, puedes usar la propiedad <code>document.cookie</code>. Aqu\u00ed tienes c\u00f3mo establecer tanto cookies de sesi\u00f3n como persistentes:</p>"},{"location":"T07/#establecer-una-cookie-de-sesion","title":"Establecer una Cookie de Sesi\u00f3n","text":"<p>Las cookies de sesi\u00f3n no tienen una fecha de expiraci\u00f3n, por lo que expiran una vez que se cierra el navegador.</p> <pre><code>document.cookie = \"username=JohnDoe\";\n</code></pre>"},{"location":"T07/#establecer-una-cookie-persistente","title":"Establecer una Cookie Persistente","text":"<p>Las cookies persistentes tienen una fecha de expiraci\u00f3n y permanecen en el dispositivo del usuario hasta la fecha especificada o hasta que se eliminan manualmente.</p> <pre><code>// Establecer una cookie con una fecha de expiraci\u00f3n\nconst now = new Date();\nconst time = now.getTime();\nconst expireTime = time + (7 * 24 * 60 * 60 * 1000); // 7 d\u00edas a partir de ahora\nnow.setTime(expireTime);\n\ndocument.cookie = `username=JohnDoe; expires=${now.toUTCString()}; path=/`;\n</code></pre>"},{"location":"T07/#parametros-de-cookie","title":"Par\u00e1metros de Cookie","text":"<p>Al establecer cookies, puedes especificar par\u00e1metros adicionales:</p> <ul> <li>expires: Establece la fecha de expiraci\u00f3n de la cookie.</li> <li>path: Define la ruta de URL donde la cookie es accesible.</li> <li>domain: Especifica el dominio para el cual la cookie es v\u00e1lida.</li> <li>secure: Asegura que la cookie se env\u00ede solo a trav\u00e9s de HTTPS.</li> <li>SameSite: Controla si las cookies se env\u00edan con solicitudes entre sitios.</li> </ul> <p>Ejemplo con todos los par\u00e1metros:</p> <pre><code>const now = new Date();\nnow.setTime(now.getTime() + (30 * 24 * 60 * 60 * 1000)); // 30 d\u00edas a partir de ahora\n\ndocument.cookie = \"username=JohnDoe; expires=\" + now.toUTCString() + \"; path=/; domain=example.com; secure; SameSite=Strict\";\n</code></pre>"},{"location":"T07/#funcion-javascript-generica-para-establecer-una-cookie","title":"Funci\u00f3n JavaScript Gen\u00e9rica para Establecer una Cookie","text":"<pre><code>function setCookie(name, value, days = null, path = \"/\") {\n    let cookieString = `${name}=${value}; path=${path};`;\n\n    if (days) {\n        const date = new Date();\n        date.setTime(date.getTime() + (days * 24 * 60 * 60 * 1000));\n        const expires = date.toUTCString();\n        cookieString += ` expires=${expires};`;\n    }\n\n    document.cookie = cookieString;\n}\n\n// Ejemplos de uso\nsetCookie(\"username\", \"JohnDoe\"); // Cookie de sesi\u00f3n\nsetCookie(\"username\", \"JohnDoe\", 7); // Cookie persistente por 7 d\u00edas\nsetCookie(\"username\", \"JohnDoe\", 7, \"/user\"); // Cookie persistente por 7 d\u00edas con la ruta /user\n</code></pre>"},{"location":"T07/#inspeccionar-valores-de-cookie","title":"Inspeccionar Valores de Cookie","text":"<p>Para inspeccionar los valores de las cookies en Chrome DevTools, sigue estos pasos:</p> <ol> <li>Haz clic derecho en la p\u00e1gina web y selecciona <code>Inspeccionar</code>.</li> <li>Navega a la pesta\u00f1a <code>Aplicaci\u00f3n</code>.</li> <li>En la secci\u00f3n <code>Almacenamiento</code>, selecciona <code>Cookies</code>.</li> <li>Elige el servidor apropiado de la lista.</li> <li>Visualiza las cookies en la secci\u00f3n principal.</li> </ol> <p></p>"},{"location":"T07/#22-lectura-de-cookies","title":"2.2 Lectura de Cookies","text":"<p>Puedes leer cookies accediendo a <code>document.cookie</code>, que devuelve una cadena que contiene todas las cookies.</p> <pre><code>const cookies = document.cookie.split(\"; \");\ncookies.forEach(cookie =&gt; {\n  const [name, value] = cookie.split(\"=\");\n  console.log(`${name}: ${value}`);\n});\n</code></pre> <p>Podemos crear una funci\u00f3n para leer una cookie espec\u00edfica seg\u00fan su nombre:</p> <pre><code>function getCookie(name) {\n    // Funci\u00f3n auxiliar para decodificar el valor de la cookie\n    function decodeCookie(value) {\n        return decodeURIComponent(value.replace(/\\+/g, ' '));\n    }\n\n    // Obtener todas las cookies de document.cookie\n    const cookies = document.cookie.split('; ').reduce((acc, cookie) =&gt; {\n        const [cookieName, cookieValue] = cookie.split('=');\n        acc[cookieName] = decodeCookie(cookieValue);\n        return acc;\n    }, {});\n\n    // Encontrar la cookie con el nombre coincidente\n    return cookies[name] || null;\n}\n\n// Ejemplo de uso\nconst cookieValue = getCookie('myCookieName');\nconsole.log(cookieValue);\n</code></pre> <p>Puntos clave</p> <ol> <li><code>document.cookie</code>: Contiene todas las cookies como una \u00fanica cadena en el formato <code>\"name1=value1; name2=value2; ...\"</code>.</li> <li><code>split('; ')</code>: Divide esta cadena en cookies individuales.</li> <li><code>reduce</code>: Transforma las cookies en un objeto donde las claves son los nombres de las cookies y los valores son los valores de las cookies.</li> <li><code>decodeURIComponent</code>: Decodifica cualquier car\u00e1cter especial en los valores de las cookies.</li> </ol>"},{"location":"T07/#24-borrado-de-cookies","title":"2.4 Borrado de Cookies","text":"<p>Para eliminar una cookie, establece su fecha de expiraci\u00f3n en una fecha pasada.</p> <pre><code>document.cookie = \"username=; expires=Thu, 01 Jan 1970 00:00:00 UTC;\";\n</code></pre> <p>Podemos crear una funci\u00f3n gen\u00e9rica para borrar una cookie con un nombre dado.  Esta funci\u00f3n utiliza la funci\u00f3n <code>setCookie</code> con la propiedad <code>days = -1</code>, que se refiere a una fecha pasada.</p> <pre><code>function eraseCookie(name){\n  setCookie(name,\"\",-1)\n}\n</code></pre>"},{"location":"T07/#3-api-de-almacenamiento-web","title":"3. API de Almacenamiento Web","text":"<p><code>Local storage</code> y <code>session storage</code> son parte de la <code>API de Almacenamiento Web</code>, que proporciona formas para que las aplicaciones web almacenen datos localmente en el navegador del usuario. Aunque tienen algunas similitudes, tambi\u00e9n tienen diferencias distintas:</p> <ul> <li>localStorage: Los datos persisten incluso despu\u00e9s de que se cierra el navegador. Se puede acceder a la propiedad de solo lectura <code>localStorage</code>.</li> <li>sessionStorage: Los datos almacenados en session storage se borran cuando termina la sesi\u00f3n de la p\u00e1gina. Se puede acceder a la propiedad de solo lectura <code>sessionStorage</code>.</li> </ul> <p>Los m\u00e9todos para acceder a los elementos de <code>localStorage</code> y <code>sessionStorage</code> son exactamente los mismos:</p> <p>M\u00e9todos de <code>localStorage</code></p> <pre><code>// Establecer un elemento en local storage\nlocalStorage.setItem(\"myCenter\", \"IES Azarquiel\");\n\n// Obtener un elemento de local storage\nconst center = localStorage.getItem(\"myCenter\");\n\n// Eliminar un elemento de local storage\nlocalStorage.removeItem(\"myCenter\");\n\n// Eliminar todos los datos guardados en localStorage\nlocalStorage.clear();\n</code></pre> <p>M\u00e9todos de <code>sessionStorage</code></p> <pre><code>// Establecer un elemento en session storage\nsessionStorage.setItem(\"sessionValue\", \"My Value\");\n\n// Obtener un elemento de session storage\nconst value = sessionStorage.getItem(\"sessionValue\");\n\n// Eliminar un elemento de session storage\nsessionStorage.removeItem(\"sessionValue\");\n\n// Eliminar todos los datos guardados en sessionStorage\nsessionStorage.clear();\n</code></pre>"},{"location":"T07/#31-ejemplos-de-uso-de-local-storage","title":"3.1 Ejemplos de Uso de Local Storage","text":""},{"location":"T07/#almacenamiento-de-preferencias-del-usuario","title":"Almacenamiento de Preferencias del Usuario","text":"<p>Un sitio web puede recordar la configuraci\u00f3n del usuario, como el tema (modo oscuro/claro), preferencias de idioma o tama\u00f1o de fuente, sin necesidad de una base de datos en el backend.</p> <pre><code>// Guardar preferencia\nlocalStorage.setItem('theme', 'dark');\n\n// Recuperar preferencia\nconst theme = localStorage.getItem('theme');\nconsole.log(theme); // Salida: dark\n</code></pre>"},{"location":"T07/#guardar-datos-de-formularios","title":"Guardar Datos de Formularios:","text":"<p>Local storage se puede usar para guardar datos de formularios temporalmente, permitiendo que los usuarios abandonen la p\u00e1gina y regresen sin perder su progreso.</p> <pre><code>// Guardar datos de formulario\nlocalStorage.setItem('formData', JSON.stringify({ name: 'John', email: 'john@example.com' }));\n\n// Recuperar datos de formulario\nconst formData = JSON.parse(localStorage.getItem('formData'));\nconsole.log(formData); // Salida: { name: 'John', email: 'john@example.com' }\n</code></pre>"},{"location":"T07/#almacenamiento-en-cache-de-respuestas-de-api","title":"Almacenamiento en Cach\u00e9 de Respuestas de API:","text":"<p>Para aplicaciones que obtienen datos de APIs, local storage se puede usar para almacenar respuestas en cach\u00e9 y reducir la cantidad de llamadas a la API, mejorando el rendimiento y la experiencia del usuario.</p> <pre><code>// Guardar respuesta de API\nlocalStorage.setItem('apiResponse', JSON.stringify(responseData));\n\n// Recuperar respuesta de API\nconst cachedData = JSON.parse(localStorage.getItem('apiResponse'));\nconsole.log(cachedData); // Salida: responseData\n</code></pre>"},{"location":"T07/#mantener-el-estado-a-traves-de-cargas-de-pagina","title":"Mantener el Estado a Trav\u00e9s de Cargas de P\u00e1gina:","text":"<p>Las aplicaciones web pueden mantener el estado del usuario, como los art\u00edculos en un carrito de compras o la \u00faltima p\u00e1gina vista, a trav\u00e9s de cargas de p\u00e1gina.</p> <pre><code>// Guardar estado\nlet appState = [{ id: 1, name: 'Producto A' }, { id: 2, name: 'Producto B' }];\nlocalStorage.setItem('cartItems', JSON.stringify(appState));\n\n// Recuperar estado\nconst cartItems = JSON.parse(localStorage.getItem('cartItems'));\nconsole.log(cartItems); // Salida: [{ id: 1, name: 'Producto A' }, { id: 2, name: 'Producto B' }]\n</code></pre>"},{"location":"T07/#32-ejemplos-de-uso-de-session-storage","title":"3.2. Ejemplos de Uso de Session Storage","text":"<p>Almacenamiento de Datos Temporales:</p> <p>Ideal para datos que solo son relevantes durante la sesi\u00f3n de la p\u00e1gina, como un proceso de formulario de varios pasos.</p> <pre><code>// Guardar datos de paso de formulario\nsessionStorage.setItem('currentStep', '2');\n\n// Recuperar datos de paso de formulario\nconst currentStep = sessionStorage.getItem('currentStep');\nconsole.log(currentStep); // Salida: 2\n</code></pre> <p>Mantener el Estado del Usuario Dentro de una Sola Sesi\u00f3n:</p> <p>\u00datil para hacer un seguimiento de las interacciones del usuario en una aplicaci\u00f3n de una sola p\u00e1gina (SPA) sin afectar otras pesta\u00f1as o sesiones futuras.</p> <pre><code>// Guardar estado de interacci\u00f3n del usuario\nsessionStorage.setItem('isLoggedIn', 'true');\n\n// Recuperar estado de interacci\u00f3n del usuario\nconst isLoggedIn = sessionStorage.getItem('isLoggedIn');\nconsole.log(isLoggedIn); // Salida: true\n</code></pre> <p>Almacenamiento Temporal del Estado de la Interfaz de Usuario:</p> <p>Se puede utilizar para almacenar temporalmente el estado de la interfaz de usuario, como si un modal estaba abierto o cerrado.</p> <pre><code>// Guardar estado de UI\nsessionStorage.setItem('isModalOpen', 'true');\n\n// Recuperar estado de UI\nconst isModalOpen = sessionStorage.getItem('isModalOpen');\nconsole.log(isModalOpen); // Salida: true\n</code></pre> <p>Guardando texto entre actualizaciones</p> <p>El siguiente ejemplo guarda autom\u00e1ticamente el contenido de un campo de texto y, si el navegador se actualiza, restaura el contenido del campo de texto para que no se pierda la escritura.</p> <pre><code>// Obtener el campo de texto que vamos a rastrear\nlet field = document.getElementById(\"field\");\n\n// Verificar si tenemos un valor de autoguardado\n// (esto solo ocurrir\u00e1 si la p\u00e1gina se actualiza accidentalmente)\nif (sessionStorage.getItem(\"autosave\")) {\n  // Restaurar el contenido del campo de texto\n  field.value = sessionStorage.getItem(\"autosave\");\n}\n\n// Escuchar cambios en el campo de texto\nfield.addEventListener(\"change\", () =&gt; {\n  // Y guardar los resultados en el objeto de session storage\n  sessionStorage.setItem(\"autosave\", field.value);\n});\n</code></pre>"},{"location":"T08/","title":"UNIDAD 8 - NODE JS&gt;","text":""},{"location":"T08/#1-introduccion","title":"1. Introducci\u00f3n","text":"<p>En esta unidad pretendo desarrollar el tema de Node JS.  Mientras no haga mi propio material, pod\u00e9is utilizar el tutorial de programaci\u00f3n ya.</p>"},{"location":"T09/","title":"UNIDAD 09 - React","text":""},{"location":"T09/#1-introduccion","title":"1. Introducci\u00f3n","text":"<p>React es una libreria para el desarrollo de aplicaciones web. Concretamente una librer\u00eda javascript para construir interfactes web. React se basa en el uso de componentes, una fusi\u00f3n <code>html</code> con <code>javascript</code>, escritos en JSX (JavaScript XML). A trav\u00e9s de JSX, se crea una copia de DOM (Modelo de Objetos del Documento) llamada DOM virtual. Si un componente cambia su estado, React compara el DOM virtual con el DOM real (de la p\u00e1gina web) y aplica este cambio solamente al elemento que ha sido actualizado, sin necesidad de volver a renderizar toda la p\u00e1gina.</p>"},{"location":"T09/#por-que-usar-react","title":"\u00bfPor qu\u00e9 usar React?","text":"<p>De hecho, JavaScript ya se encarga \"por detr\u00e1s\", de cagar los datos que la p\u00e1gina web necesita en funci\u00f3n de la interacci\u00f3n del usuario (ir a una nueva pesta\u00f1a, por ejemplo), dise\u00f1ar la nueva p\u00e1gina web, y presentarla al usuario de forma transparente a este. Y esto ha convertido a JS en un lenguaje demandado para la programaci\u00f3n web.</p> <p>Sin embargo, usar s\u00f3lo Javascript en esencia no es una buena opci\u00f3n para proyectos realistas (recordemos que estamos evolucionando hacia SPA - Single Page Application, es decir, webs d\u00f3nde s\u00f3lo hay una p\u00e1gina -vacia- que se va cargando con JS):</p> <ul> <li>Crear p\u00e1ginas complejas (realistas), se puede convertir en algo tortuoso. Sobretodo en un proyecto real d\u00f3nde los requisitos van cambiando.</li> <li>JS (de verdad) es propenso a errores. No que la p\u00e1gina no haga lo que debe, si no que haga lo que no debe.</li> <li>Los proyectos de JS (de verdad) son dificiles de entender (benditos comentarios), y por tanto mantener o editar.</li> </ul> <p>React ofrece una manera m\u00e1s l\u00f3gica e intuitiva de estructurar una p\u00e1gina web con las que ofrece soluciones a esas desventajas de JS:</p> <ul> <li>Los componentes de React agilizan la creaci\u00f3n de una interfaz sensible a cualquier cambio en un sitio web o una aplicaci\u00f3n de cualquier complejidad.</li> <li>Gracias al DOM virtual, la biblioteca ahorra recursos y tr\u00e1fico.</li> <li>El c\u00f3digo de React tiene una l\u00f3gica clara, es f\u00e1cil de leer, entender y depurar, lo que ayuda a reducir errores.</li> <li>Las interfaces interactivas creadas con React garantizan una mejor experiencia de usuario.</li> <li>React es f\u00e1cil de aprender, tiene una documentaci\u00f3n accesible y muchos recursos gratuitos online.</li> </ul> <p>Todo esto, hace que React sea una de las librerias/habilidades m\u00e1s demandadas para conseguir el trabajo de desarrollo Front End. Aunque tambi\u00e9n tiene algunos puntos en contra:</p> <ul> <li>Necesidad de un conocimiento s\u00f3lido de HTML y JavaScript para aprender la sintaxis de JXS.</li> <li>La biblioteca puede aumentar el tama\u00f1o de tu aplicaci\u00f3n.</li> <li>React solo visualiza la interfaz, pero para crear un proyecto completo, se necesita una pila de tecnolog\u00eda.</li> </ul>"},{"location":"T09/#2-fundamentos-de-react","title":"2. Fundamentos de React","text":"<p>La parte de Fundamentos de React, as\u00ed como la evoluci\u00f3n desde el punto de vista del desarrollo del c\u00f3digo que implica React, est\u00e1 m\u00e1s o menos explicada en estas transparencias.</p> <p>Fundamentos de React</p>"},{"location":"T09/#3-caracteristicas-modernas-de-javascript-para-el-desarrollo-en-react","title":"3. Caracter\u00edsticas Modernas de JavaScript para el Desarrollo en React","text":""},{"location":"T09/#31-modulos-de-javascript","title":"3.1 M\u00f3dulos de JavaScript","text":"<p>\u00bfQu\u00e9 son los M\u00f3dulos?</p> <p>Importar y exportar funciones, objetos o valores de un archivo a otro.</p> <p>Sintaxis</p> <pre><code>// Exportando\nexport const greet = () =&gt; {\n  console.log(\"\u00a1Hola!\");\n};\n\n// Importando\nimport { greet } from \"./greetModule.js\";\ngreet();\n</code></pre>"},{"location":"T09/#32-asignacion-por-desestructuracion","title":"3.2 Asignaci\u00f3n por Desestructuraci\u00f3n","text":"<p>\u00bfQu\u00e9 es la Desestructuraci\u00f3n?</p> <p>Una sintaxis para desempaquetar valores de arrays o propiedades de objetos en variables distintas.</p> <p>Ejemplos</p> <pre><code>// Desestructuraci\u00f3n de Array\nconst [first, second] = [1, 2, 3];\nconsole.log(first, second); // Salida: 1, 2\n\n// Desestructuraci\u00f3n de Objetos\nconst user = { name: \"Alice\", age: 25 };\nconst { name, age } = user;\nconsole.log(name, age); // Salida: Alice, 25\n</code></pre>"},{"location":"T09/#33-operadores-spread-y-rest","title":"3.3. Operadores Spread y Rest (...)","text":""},{"location":"T09/#operador-spread","title":"Operador Spread","text":"<p>Se utiliza para expandir elementos de un array u objeto.</p> <pre><code>const arr = [1, 2, 3];\nconst newArr = [...arr, 4, 5];\nconsole.log(newArr); // Salida: [1, 2, 3, 4, 5]\n\nconst user = { name: \"Alice\", age: 25 };\nconst updatedUser = { ...user, location: \"NY\" };\nconsole.log(updatedUser); // Salida: { name: 'Alice', age: 25, location: 'NY' }\n</code></pre>"},{"location":"T09/#operador-rest","title":"Operador Rest","text":"<p>Se utiliza para recolectar argumentos en un array o las propiedades restantes en un objeto.</p> <pre><code>const sum = (...numbers) =&gt; numbers.reduce((total, num) =&gt; total + num, 0);\nconsole.log(sum(1, 2, 3)); // Salida: 6\n\nconst { name, ...rest } = { name: \"Alice\", age: 25, location: \"NY\" };\nconsole.log(rest); // Salida: { age: 25, location: 'NY' }\n</code></pre>"},{"location":"T09/#34-funciones-de-flecha","title":"3.4 Funciones de Flecha","text":"<p>\u00bfQu\u00e9 son las Funciones de Flecha?</p> <p>Una sintaxis concisa para escribir funciones. Tambi\u00e9n manejan el contexto de <code>this</code> de manera diferente a las funciones normales.</p> <p>Sintaxis</p> <pre><code>const add = (a, b) =&gt; a + b;\nconsole.log(add(2, 3)); // Salida: 5\n</code></pre>"},{"location":"T09/#35-literales-de-plantilla","title":"3.5 Literales de Plantilla","text":"<p>\u00bfQu\u00e9 son los Literales de Plantilla?</p> <p>Una sintaxis para crear cadenas con expresiones incrustadas usando comillas invertidas.</p> <p>Ejemplos</p> <pre><code>const name = \"Alice\";\nconsole.log(`\u00a1Hola, ${name}!`); // Salida: \u00a1Hola, Alice!\n</code></pre>"},{"location":"T09/#36-parametros-por-defecto","title":"3.6 Par\u00e1metros por Defecto","text":"<p>\u00bfQu\u00e9 son los Par\u00e1metros por Defecto?</p> <p>Asignar valores predeterminados a los par\u00e1metros de una funci\u00f3n.</p> <p>Ejemplos</p> <pre><code>const greet = (name = \"Invitado\") =&gt; `\u00a1Hola, ${name}!`;\nconsole.log(greet()); // Salida: \u00a1Hola, Invitado!\n</code></pre>"},{"location":"T09/#4-codigo-react-y-codigo-js","title":"4. C\u00f3digo React y C\u00f3digo JS","text":"<p>Vamos a ver una p\u00e1gina simple en Javascript (con vainilla), y despu\u00e9s veremos una p\u00e1gina similar usando React. Ambas est\u00e1n en mi repositorio.</p>"},{"location":"T09/#41-js-y-ya","title":"4.1 JS y ya","text":"<p>En una web basada en JS tenemos tres elementos principales:</p> <ul> <li>el archivo <code>html</code>, que es la p\u00e1gina en si;</li> <li>el archivo <code>css</code> ~que sirve para cosas raras que vereis con Jose Enrique~ para dar formato a la web;</li> <li>y el archivo <code>.js</code> que se encarga de obtener los botones, configurar los listeners, gestionar el DOM y definir la funcionalidad cada vez que se pulsa un bot\u00f3n (cambiando el fondo de todos los botones, generando el texto, etc...).</li> </ul> <p>Todo esto es lo que hemos visto hasta ahora en el m\u00f3dulo.</p>"},{"location":"T09/#42-react","title":"4.2 React","text":"<p>Una aplicaci\u00f3n de React es un poco m\u00e1s compleja. Empezando porque se basa en una estructura de archivos y directorios muy bien definida. M\u00e1s adelante la veremos en detalle.</p> <p></p> <p>Si echamos un vistazo, en la carpeta <code>/Public</code> tenemos</p> <ul> <li>Un archivo <code>.html</code>, que est\u00e1 casi vacio: tiene un <code>&lt;div&gt;</code> que es la carcasa de la web (SPA).</li> <li>El resto de elementos est\u00e1n en la carpeta <code>/src</code>, aunque hay m\u00e1s carpetas propias de la estructura de un proyecto React.</li> <li>El archivo<code>.js</code>, de hecho tambi\u00e9n est\u00e1 bastante vac\u00edo, y su funci\u00f3n es solo para vincular el <code>html</code> con React, esto es, a trav\u00e9s del achivo <code>.js</code> se va a usar React para renderizar la pagina web. De hecho la funci\u00f3n <code>render</code> es un componente de React que est\u00e1 devolviendo etiquetas html marcadas (distinguir\u00e1s estas etiquetas porque aparecen en may\u00fascula, aparte que el editor las marca con otro color).</li> </ul> <p>El archivo <code>App.js</code> tiene toda la \"chicha\": Tiene la funci\u00f3n <code>app</code> que devuelve un c\u00f3digo html muy parecido al html del ejemplo anterior \u00a1\u00a1\u00a1\u00a1Se est\u00e1 mezclando html con js!!!! \u00a1\u00a1ay dios mio!!. Por otra parte, no tenemos las instrucciones JavaScript pero si que tenemos algunas sentencias JS mezcladas en el codigo html to junto! que estres!!.</p> <p>Si aparecen unos elementos que nos hablan del estado (o de los estados) de una p\u00e1gina web. Estos estados los controla React, y se aplican a todos los elementos que integran la web.</p> <p>Para arrancar el proyecto, nos situamos con el terminal en la carpeta react y ejecuta el comando <code>npm start</code>.</p>"},{"location":"T09/#43-programacion-declarativa-vs-imperativa","title":"4.3 Programaci\u00f2n declarativa vs imperativa Ejercicio Pr\u00e1ctico: React o solo JS","text":"<p>En React se programa o configura el estado en el que tiene que estar todos los componentes de la p\u00e1gina, no los pasos para llegar a ese estado. Por tanto la web va a estar siempre en un estado v\u00e1lido. Es lo que se denomina Programaci\u00f3n Declarativa que basicamente consiste en decir como tiene que estar todo configurado, pero sin decir los pasos para configurarlo, que ser\u00eda Programaci\u00f3n imperativa.</p> <p></p> <p>La programaci\u00f3n declarativa se basa en una m\u00e1quina de estados, y las transiciones entre estados.</p> <p>1. Editemos ambas versiones de la web para a\u00f1adir un cuarto bot\u00f3n, llamadlo como quer\u00e1is.      NOta: Los arrais ya est\u00e1n preparados para ese bot\u00f3n</p> <p>Deber\u00edamos cronometrarnos para ver lo que nos cuesta hacerlo con una y otra tecnolog\u00eda.</p>"},{"location":"T09/#5-creando-un-proyecto-react-en-code","title":"5. Creando un proyecto React en Code","text":"<p>Hay varias versiones a la hora de crear un proyecto en React:</p> <ul> <li>\"A pelo\". Usando el gestor de paquetes npm que ya comentamos en el primer tema.</li> <li>O con el bundler de vite.</li> </ul>"},{"location":"T09/#51-npm","title":"5.1 NPM","text":"<p>De esto, comentar que <code>npm</code> es el gestor de paquetes de Node.js (recordemos que esto se basa en Node). Se usa para instalar y administrar dependencias.</p> <p>Abrimos el terminal y procedemos con el comando:</p> <pre><code>npm init react-app ruta y nombre de la aplicaci\u00f3n\n</code></pre> <p><code>init</code> es el comando de npm para iniciar un nuevo proyecto. <code>react-app</code> es el paquete preconfigurado que se usa para crear una aplicacion de React con la estructura de directorios y archivos recomendada. <code>ruta y nombre de la aplicaci\u00f3n</code> pues la ruta y el nombre del proyecto.</p> <p>Es muy probable que d\u00e9 error por problemas con dependencias, para solucionarlo, a\u00f1adimos al comando:</p> <pre><code>--legacy-peer-dep\n</code></pre> <p>con esto le estamos diciendo que resuelva los problemas de dependencias que se encuentre. En general, esta opci\u00f3n nos ser\u00e1 bastante \u00fatil cada vez que tengamos problemas con las dependencias</p> <p>Ya tenemos el proyecto creado. Ahora hay que meterle cosillas. Bueno, ya le meteremos cosillas luego. Ahora lo importante es arrancar la app que acabamos de crear.</p> <p>En primer lugar, nos movemos al directorio de la aplicaci\u00f3n <code>cd ruta completa del directorio</code>. Despu\u00e9s arrancamos React en ese directorio</p> <pre><code>npm start\n</code></pre> <p>El resultado nos debe mostrar las direcciones tanto local como de red desde las que son visible nuestra web.</p> <p></p> <p>Y si no ha habido ning\u00fan fallo de \u00faltima hora, ya deber\u00eda funcionar. Puede dar fallos. si los da, ejecutamos</p> <pre><code>npm install ajv@latest ajv-keywords@latest --legacy-peer-dep\n</code></pre> <p>y volvemos a lanzar <code>npm start</code>. Y ahora si se debe abrir el navegador con nuestra p\u00e1gina (en blanco).</p> <p></p>"},{"location":"T09/#52-react-con-vite","title":"5.2 React con Vite","text":"<p>Si queremos usar React con Vite, simplemente debemos seguir los siguientes pasos:</p> <ul> <li>Abrir una terminal (como siempre, os acord\u00e1is de cu\u00e1nto odiabais los comandos en SiSi... qui\u00e9n nos iba a decir...)</li> <li>Escribimos</li> </ul> <pre><code>npm create vite@latest\n</code></pre> <p>con esto creamos un proyecto de Vite, pero OJO, que nos va a pedir cosillas: - En primer lugar, nos va a pedir permiso para crear los paquetes. Decimos que <code>y</code>es. - Despu\u00e9s nos pide un nombre para el proyecto. Recordad que crear\u00e1 una carpeta con el nombre del proyecto en el directorio actual, y dentro crear\u00e1 toda la estrucura del proyecto. Si forzamos la creaci\u00f3n de directorios intermedios, asumir\u00e1 que le hemos dado la ruta y nos volver\u00e1 a pedir nombre del proyecto.  - El framework que vamos a utilizar  y podremos desplazarnos con las flechas. - El lenguaje, </p> <ul> <li>Con esto, ya tendremos creado el proyecto Vite. Si todo ha ido bien nos mostrar\u00e1 una imagen con m\u00e1s info: </li> <li>Ahora solo tenemos que ejecutar los tres comandos que nos dice Vite:</li> <li>Nos vamos a la carpeta del directorio creado <code>cd Tema9\\ProyectoViteReact</code> (Recordad ios a la carpeta que hayais puesto en vuestro proyecto)</li> <li>Instalamos los paquetes de Vite</li> </ul> <pre><code>npm install\n</code></pre> <p>Tarda un poco, tened paciencia!. - Actualizamos los paquetes de React y ReactDOM que se han instalado</p> <pre><code>npm install  react@latest react-dom@latest\n</code></pre> <pre><code> - Ejecutamos la aplicaci\u00f3n\n</code></pre> <pre><code>npm run dev\n</code></pre> <ul> <li>Y obtenemos este resultado:  Aqui podemos ver la direcci\u00f3n en localhost d\u00f3nde se est\u00e1 mostrando la p\u00e1gina, y c\u00f3mo podemos acceder a los archivos de c\u00f3digo. Por otra parte, se habr\u00e1 creado el proyecto React con la estructura de directorios y ficheros vista . Y por supuesto, en el navegador, podemos ver nuestra primera p\u00e1gina .</li> </ul>"},{"location":"T09/#53-configuracion-del-entorno-de-desarrollo-para-trabajar-con-react","title":"5.3 Configuraci\u00f3n del entorno de desarrollo para trabajar con React","text":"<p>Esta parte se basa en las transparencias setup React, pero las adapta a una distribuci\u00f3n en VSCode.</p> <p>Para recapitular, en el desarrollo de un proyecto con React vamos a necesitar algunos elementos:</p> <ul> <li>Las librer\u00edas de React y React-DOM, que se han instalado al crear el proyecto de React en la secci\u00f3n anterior</li> <li>Un gestor de contenido, que ser\u00eda <code>npm</code> o <code>yarn</code>, aunque el primero ya lo tenenos puesto.</li> <li>Si hemos hecho la instalaci\u00f3n con Vite, el se va a encargar de empaquetar el c\u00f3digo que generemos</li> </ul> <p>Ahora es el momento de instalar algunas liberias y paquetes de desarrollo:</p>"},{"location":"T09/#linting","title":"Linting","text":"<p>Cualquier Lintern tiene el objetivo de revisar, analizar y mejorar nuestro c\u00f3digo, conforme vamos escribiendo. No s\u00f3lo detecta errores que provocar\u00edan no compilar, si no que detecta malas pr\u00e1cticas, inconsistencias y otros fallos en el c\u00f3digo fuente. Por otra parte, sugiere mejoras de estilo y optimizaciones en cuanto a la escritura de c\u00f3digo. Aunque debemos recordar que al final cada desarrollador desarrolla su propia forma de programar. Tambi\u00e9n detecta variables o funciones no usadas. Salvo que sean errores propios del lenguaje (que el compilador detectar\u00eda, o que llevar\u00eda a un error en el caso de lenguajes interpretados), los errores que detecta un lintern generalmente no impiden que el c\u00f3digo se ejecute bien. Por esto, a veces las l\u00edneas rojas que marca el Lintern pueden sacar de quicio a un programador novel.</p> <p>Podemos encontrarnos varios Linterns (algunos incluso est\u00e1n como pluguins de VSCode):</p> <ul> <li>ESLint es el m\u00e1s utilizado en proyecto se React. Detecta problemas de c\u00f3digo, errores de sintaxis y problemas espec\u00edficos de React. Adem\u00e1s, permite definir reglas personalizables e incorporar estilos predefinidos (Airbnb, Standard, etc.). Las reglas principalmente se usan en grandes equipos de desarrollo, para unificar la manera de programar de todos los integrantes.</li> <li>Style-lint para mantener un estilo uniforme en las hojas de estilo.</li> </ul> <p>Eslint ya viene a\u00f1adido al proyecto si lo hemos creado con Vite. Sin embargo, tambi\u00e9n se recomienda instalar Airbnb. Estas son unas reglas creadas por la empresa hom\u00f3nima que se enfocan en:</p> <ul> <li>Mejorar la consistencia para que el c\u00f3digo se vea y comporte de la misma forma en todo el proyecto.</li> <li>Garantizar la legibilidad, sobretodo pensando en que otros desarrolladores, o tu mismo, pero en otro momento, tengan que entender qu\u00e9 hace el c\u00f3digo.</li> <li>Prevenir errores, al menos los m\u00e1s comunes.</li> </ul> <p>Las principales caracter\u00edsticas de Airbnb son:</p> <ul> <li>Reglas de formato</li> <li>Uso de comillas simples (') en lugar de dobles (\").</li> <li>Indentaci\u00f3n de 2 espacios.</li> <li>Uso de punto y coma (;) al final de cada l\u00ednea.</li> <li>Buenas pr\u00e1cticas:<ul> <li>Proh\u00edbe el uso de variables no declaradas.</li> <li>Requiere el uso de const o let en lugar de var.</li> <li>Sugiere usar funciones flecha (=&gt;) siempre que sea posible.</li> </ul> </li> <li>Espec\u00edfico para React:<ul> <li>Requiere propTypes o TypeScript para la validaci\u00f3n de propiedades.</li> <li>Promueve el uso de fragmentos (&lt;&gt;) en lugar de div innecesarios.</li> <li>Obliga a seguir buenas pr\u00e1cticas en los hooks de React.</li> </ul> </li> <li>Compatibilidad con ES6+:<ul> <li>Promueve el uso de destructuraci\u00f3n de objetos y arrays.</li> <li>Sugiere usar template literals para la concatenaci\u00f3n de cadenas.</li> </ul> </li> </ul>"},{"location":"T09/#pretier","title":"Pretier","text":"<p>Prettier es una herramienta de formateo de c\u00f3digo que se acopla con Eslint, nos permite basicamente hacer un formateo autom\u00e1tico del c\u00f3digo (esto es, a\u00f1adir ; al final de cada l\u00ednea de js, si as\u00ed lo decidimos). Con ello, logramos un estilo consistente. instalar pretieer</p>"},{"location":"T09/#huski","title":"Huski","text":"<p>Husky es uan herramienta que permite ejecutar ganchos (llamados hooks, como el capit\u00e1n Hook) de git en los proyectos. Los ganchos son scripts que se ejecutan en ciertos momentos clave del proyecto, como la compilaci\u00f3n, o la subida al repositiorio de forma autom\u00e1tica.</p> <ul> <li>Automatizaci\u00f3n de tareas: Puedes configurar Husky para ejecutar tareas autom\u00e1ticamente, como linters, pruebas o formateadores, antes de realizar commits o push.</li> <li>Prevenci\u00f3n de errores: Garantiza que el c\u00f3digo que se sube al repositorio cumpla con los est\u00e1ndares y no contenga errores b\u00e1sicos.</li> <li>Flujo de trabajo colaborativo: Asegura que todo el equipo siga las mismas reglas de calidad y estilo.</li> </ul>"},{"location":"T09/#54-instalacion-de-las-extensiones-en-nuestro-proyecto","title":"5.4 Instalaci\u00f3n de las extensiones en nuestro proyecto","text":"<p>Para crear un proyecto React en VSCode, y a\u00f1adir paquetes y extensiones, se han seguido los siguientes pasos:</p> <ul> <li> <ol> <li>Se configura <code>eslint</code> y <code>prettier</code> como <code>formatter</code> dentro de code. Para ello, en <code>settings</code> buscamos <code>formatter</code> y le indicadmos que es <code>prettier</code>; adem\u00e1s buscamos la opci\u00f3n de <code>format on save</code>, y la activamos. Con esto adem\u00e1s, formaterar\u00e1 el texto autom\u00e1ticamente cuando guardemos un archivo (y lo guardar\u00e1 cuando cambiemos de archivo). Todo en uno.</li> </ol> </li> <li> <ol> <li>Comprobamos que tengamos instalado <code>npm</code> y <code>node</code>, que deber\u00edan estar seg\u00fan los pasos del punto 5.1</li> </ol> </li> </ul> <pre><code>npm -v\nnode -v\n</code></pre> <ul> <li> <ol> <li>En ppio no necesitar\u00e9mos intalar <code>yarn</code> (otro gestor de paquetes alternativo a <code>npm</code>, pero por si acaso, lo instalar\u00edamos:</li> </ol> </li> </ul> <pre><code>   npm install -g yarn\n</code></pre> <ul> <li> <ol> <li>Creamos el proyecto con vite</li> </ol> </li> </ul> <pre><code>   npm create vite@latest, y seguimos el proceso de creaci\u00f3n e instalaci\u00f3n que nos indica (v\u00e9ase apartado 5.1)\n</code></pre> <ul> <li> <ol> <li>Actualizamos los paquetes de <code>react</code> y <code>react-dom</code>, para que tengan la \u00faltima versi\u00f3n (por si acaso). Y comprobamos estas versiones. Podemos ver tambi\u00e9n que se actualiza la versi\u00f3n en el archivo <code>json</code> del proyecto.</li> </ol> </li> </ul> <pre><code>   npm install react@latest react-dom@latest\n   npm list react react-dom\n</code></pre> <p>A partir de ahora, para asegurarnos que al instalar alg\u00fan paquete, nos instale la \u00faltima versi\u00f3n, a\u00f1adir\u00e9mos <code>@latest</code> en el nombre de todos los paquetes, y <code>--legacy-peer-deps</code> en todos los comandos, para que resuelva las dependencias que puedan surgir.</p> <ul> <li> <ol> <li>Instalnstalamos <code>eslint</code> con las reglsa de <code>airbnb</code> en el proyecto</li> </ol> </li> </ul> <pre><code>npm install eslint@latest eslint-config-airbnb@latest eslint-plugin-react@latest eslint-plugin-react-hooks@latest eslint-plugin-jsx-a11y@latest eslint-plugin-import@latest eslint-plugin-react-refresh@latest --save-dev --legacy-peer-deps\n</code></pre> <p>Si estuvieramos usando typescript, tambi\u00e9n a\u00f1adimos :</p> <pre><code>npm install @typescript-eslint/parser @typescript-eslint/eslint-plugin --save-dev\n</code></pre> <ul> <li> <ol> <li>Inicializamos <code>eslint</code>:</li> </ol> </li> </ul> <pre><code>npx eslint --init\n</code></pre> <p>OJO que al final, le he dicho que uso el yarn y no el npm como gestor de paquetes.</p> <p>Si no crea el archivo <code>.eslintrc.</code> lo creamos y a\u00f1adimos el siguiiente c\u00f3digo:</p> <pre><code>{\n  \"env\": {\n    \"browser\": true,\n    \"es2021\": true\n  },\n  \"extends\": [\n    \"airbnb\",\n    \"airbnb/hooks\",\n    \"eslint:recommended\",\n    \"plugin:react/recommended\",\n    \"plugin:react-hooks/recommended\"\n  ],\n  \"parserOptions\": {\n    \"ecmaVersion\": 2021,\n    \"sourceType\": \"module\",\n    \"ecmaFeatures\": {\n      \"jsx\": true\n    }\n  },\n  \"plugins\": [\"react\", \"react-hooks\"],\n  \"rules\": {\n    \"react/react-in-jsx-scope\": \"off\", // No es necesario importar React en Vite.\n    \"react/jsx-filename-extension\": [\n      1,\n      { \"extensions\": [\".js\", \".jsx\", \".ts\", \".tsx\"] }\n    ]\n  }\n}\n</code></pre> <ul> <li> <ol> <li>Instalamos <code>prettier</code>:</li> </ol> </li> </ul> <pre><code>npm install prettier@latest eslint-config-prettier@latest eslint-plugin-prettier@latest --save-dev --legacy-peer-deps\n</code></pre> <ul> <li> <ol> <li>Si no lo crea en la raiz del proyecto, creamos el archivo <code>.prettierrc</code> con este codigo:</li> </ol> </li> </ul> <pre><code>{\n  \"semi\": true,\n  \"singleQuote\": true,\n  \"trailingComma\": \"all\",\n  \"printWidth\": 80,\n  \"tabWidth\": 2\n}\n</code></pre> <ul> <li> <ol> <li>Si no lo crea, creamos el archivo <code>.prettierignore</code> con este codigo:</li> </ol> </li> </ul> <pre><code>node_modules\ndist\nbuild\n</code></pre> <ul> <li> <ol> <li>En el archivo <code>.eslintrc</code> que hemos creado en un paso anterior, a\u00f1adimos esta linea dentro de los exports</li> </ol> </li> </ul> <pre><code>,\n\"plugin:prettier/recommended\"\n</code></pre> <p>en los scripts del <code>package.json</code> a\u00f1adimos:</p> <pre><code>\"format\": \"prettier --write .\",\n</code></pre> <ul> <li> <ol> <li>Instalamos <code>husky</code> y <code>lintstaged</code></li> </ol> </li> </ul> <pre><code>npm install husky lint-staged --save-dev\n</code></pre> <ul> <li> <ol> <li>Arrancamos el repositorio del proyecto, y lo ejecutamos</li> </ol> </li> </ul> <pre><code>git init\nnpx husky-init\n</code></pre> <ul> <li> <ol> <li>Arrancamos <code>husky</code> para que cree la configuraci\u00f3n</li> </ol> </li> </ul> <pre><code>npx husky add .husky/pre-commit \"npm test\"\ncon esto crea .husky/pre-commit en el proyecto\nhacemos el archivo ejecutable\nchmod +x .husky/pre-commit\n</code></pre> <p>Para probar husky hacemos un commit</p> <pre><code>git add .\ngit commit -m \"Setup Husky\"\n</code></pre> <p>Si da error, es proque no est\u00e1 configurado. Hacemos esto en el <code>package.json</code></p> <pre><code>{\n  \"scripts\": {\n    \"test\": \"echo \\\"Error: no test specified\\\" &amp;&amp; exit 1\"\n  }\n}\n</code></pre> <p>Y a\u00f1adimos esto al <code>.eslintrc</code></p> <pre><code>\"extends\": [\"eslint:recommended\", \"plugin:react/recommended\", \"plugin:prettier/recommended\"],\n\"plugins\": [\"prettier\"],\n\"rules\": {\n\"prettier/prettier\": \"error\"\n}\n}\n</code></pre> <p>En principio, despu\u00e9s de todo esto, el proyecto ya debe estar configurado con todos los plugins.</p>"},{"location":"T09/#6-renderizado-con-react","title":"6. Renderizado con React","text":"<p>Render react</p>"},{"location":"T09/#7-gestion-de-props-y-state","title":"7. Gesti\u00f3n de Props y State","text":"<p>props state</p>"},{"location":"T10/","title":"AP\u00c9NDICE B Aprendiendo TypeScript para React","text":"<p>Esta gu\u00eda te introduce a los conceptos esenciales de TypeScript para usarlo eficazmente con React, con una breve explicaci\u00f3n de alias de tipo e interfaces, y cu\u00e1ndo usar cada uno.</p>"},{"location":"T10/#1-que-es-typescript","title":"1. \u00bfQu\u00e9 es TypeScript?","text":"<p>TypeScript es un superconjunto de JavaScript que agrega tipado est\u00e1tico. Ayuda a detectar errores durante el desarrollo y hace que tu c\u00f3digo sea m\u00e1s predecible y f\u00e1cil de mantener.</p> <p>Caracter\u00edsticas clave:</p> <ul> <li>Tipado est\u00e1tico</li> <li>Interfaces y tipos para definir estructuras de datos</li> <li>Mejora en herramientas y autocompletado de c\u00f3digo</li> </ul>"},{"location":"T10/#2-configurar-typescript-en-un-proyecto-de-react","title":"2. Configurar TypeScript en un proyecto de React","text":"<ol> <li>Crea un proyecto de React:</li> </ol> <pre><code>npx create-react-app my-app --template typescript\n</code></pre> <ol> <li>Agrega TypeScript a un proyecto de React existente:</li> </ol> <pre><code>npm install typescript @types/react @types/react-dom\n</code></pre> <p>Luego, crea un archivo <code>tsconfig.json</code> con <code>npx tsc --init</code>.</p>"},{"location":"T10/#3-conceptos-basicos-de-typescript","title":"3. Conceptos b\u00e1sicos de TypeScript","text":""},{"location":"T10/#31-tipos","title":"3.1 Tipos","text":""},{"location":"T10/#primitivos","title":"Primitivos","text":"<pre><code>const count: number = 5;\nconst username: string = \"John\";\nconst isLoggedIn: boolean = true;\n</code></pre>"},{"location":"T10/#arreglos","title":"Arreglos","text":"<pre><code>const numbers: number[] = [1, 2, 3];\nconst names: string[] = [\"Alice\", \"Bob\"];\n</code></pre>"},{"location":"T10/#objetos","title":"Objetos","text":"<pre><code>const user: { id: number; name: string } = {\n  id: 1,\n  name: \"Alice\",\n};\n</code></pre>"},{"location":"T10/#tipos-de-union","title":"Tipos de uni\u00f3n","text":"<pre><code>let result: string | number;\nresult = \"Success\";\nresult = 42;\n</code></pre>"},{"location":"T10/#4-alias-de-tipo-vs-interfaces","title":"4. Alias de tipo vs Interfaces","text":""},{"location":"T10/#que-es-un-alias-de-tipo","title":"\u00bfQu\u00e9 es un alias de tipo?","text":"<p>Un alias de tipo es una forma de definir un nombre de tipo personalizado para cualquier tipo en TypeScript. Puede describir:</p> <ul> <li>Primitivos</li> <li>Objetos</li> <li>Uniones</li> <li>Tuplas</li> <li>Funciones</li> </ul> <pre><code>type User = {\n  id: number;\n  name: string;\n};\n\ntype Status = \"active\" | \"inactive\";\ntype Coordinates = [number, number];\ntype Callback = (message: string) =&gt; void;\n</code></pre>"},{"location":"T10/#que-es-una-interfaz","title":"\u00bfQu\u00e9 es una interfaz?","text":"<p>Una interfaz est\u00e1 dise\u00f1ada espec\u00edficamente para describir la estructura de un objeto. Se puede extender o fusionar, lo que la hace ideal para definir estructuras de objetos reutilizables.</p> <pre><code>interface User {\n  id: number;\n  name: string;\n}\n\ninterface Admin extends User {\n  permissions: string[];\n}\n</code></pre>"},{"location":"T10/#cuando-usar-cada-uno","title":"\u00bfCu\u00e1ndo usar cada uno?","text":"Caso de uso Alias de tipo Interfaz Definir primitivos, uniones o tuplas \u2705 \u274c Describir estructuras de objetos \u2705 \u2705 Extender o fusionar tipos Limitado (usar intersecciones: <code>&amp;</code>) \u2705 (<code>extends</code> o fusi\u00f3n de declaraciones)"},{"location":"T10/#5-typescript-con-react","title":"5. TypeScript con React","text":""},{"location":"T10/#componentes-funcionales-con-props-simples","title":"Componentes funcionales con props simples","text":"<pre><code>import React from \"react\";\n\ntype Props = {\n  title: string;\n};\n\nconst Header: React.FC&lt;Props&gt; = ({ title }) =&gt; {\n  return &lt;h1&gt;{title}&lt;/h1&gt;;\n};\n\nexport default Header;\n</code></pre>"},{"location":"T10/#props-con-estructuras-de-datos-complejas","title":"Props con estructuras de datos complejas","text":""},{"location":"T10/#ejemplo-arreglo-de-objetos-como-props","title":"Ejemplo: Arreglo de objetos como props","text":"<p>Cuando una prop es un arreglo de objetos, puedes usar un alias de tipo o una interfaz para definir su estructura.</p> <pre><code>type Item = {\n  id: number;\n  name: string;\n};\n\ntype ListProps = {\n  items: Item[];\n};\n\nconst ItemList: React.FC&lt;ListProps&gt; = ({ items }) =&gt; {\n  return (\n    &lt;ul&gt;\n      {items.map((item) =&gt; (\n        &lt;li key={item.id}&gt;{item.name}&lt;/li&gt;\n      ))}\n    &lt;/ul&gt;\n  );\n};\n\nexport default ItemList;\n</code></pre>"},{"location":"T10/#estado-con-estructuras-de-datos-complejas","title":"Estado con estructuras de datos complejas","text":""},{"location":"T10/#ejemplo-estado-con-un-arreglo-de-objetos","title":"Ejemplo: Estado con un arreglo de objetos","text":"<pre><code>import React, { useState } from \"react\";\n\ntype Task = {\n  id: number;\n  description: string;\n  completed: boolean;\n};\n\nconst TaskManager: React.FC = () =&gt; {\n  const [tasks, setTasks] = useState&lt;Task[]&gt;([\n    { id: 1, description: \"Aprender TypeScript\", completed: false },\n    { id: 2, description: \"Construir una app con React\", completed: true },\n  ]);\n\n  const toggleTask = (id: number) =&gt; {\n    setTasks((prevTasks) =&gt;\n      prevTasks.map((task) =&gt;\n        task.id === id ? { ...task, completed: !task.completed } : task\n      )\n    );\n  };\n\n  return (\n    &lt;ul&gt;\n      {tasks.map((task) =&gt; (\n        &lt;li key={task.id}&gt;\n          &lt;span\n            style={{ textDecoration: task.completed ? \"line-through\" : \"none\" }}\n          &gt;\n            {task.description}\n          &lt;/span&gt;\n          &lt;button onClick={() =&gt; toggleTask(task.id)}&gt;\n            {task.completed ? \"Deshacer\" : \"Completar\"}\n          &lt;/button&gt;\n        &lt;/li&gt;\n      ))}\n    &lt;/ul&gt;\n  );\n};\n\nexport default TaskManager;\n</code></pre>"},{"location":"T10/#props-con-objetos-anidados","title":"Props con objetos anidados","text":""},{"location":"T10/#ejemplo-objetos-anidados-en-props","title":"Ejemplo: Objetos anidados en props","text":"<pre><code>type Address = {\n  street: string;\n  city: string;\n  postalCode: string;\n};\n\ntype User = {\n  id: number;\n  name: string;\n  address: Address;\n};\n\ntype UserCardProps = {\n  user: User;\n};\n\nconst UserCard: React.FC&lt;UserCardProps&gt; = ({ user }) =&gt; {\n  return (\n    &lt;div&gt;\n      &lt;h2&gt;{user.name}&lt;/h2&gt;\n      &lt;p&gt;{user.address.street}&lt;/p&gt;\n      &lt;p&gt;\n        {user.address.city}, {user.address.postalCode}\n      &lt;/p&gt;\n    &lt;/div&gt;\n  );\n};\n\nexport default UserCard;\n</code></pre>"},{"location":"T10/#6-resumen","title":"6. Resumen","text":"<ul> <li>Usa alias de tipo para definir primitivos, uniones, tuplas o tipos de funciones.</li> <li>Usa interfaces para definir estructuras de objetos, especialmente cuando necesites extensibilidad o fusi\u00f3n de declaraciones.</li> <li>Para props y estados con estructuras de datos complejas, define tipos/interfaces reutilizables para mantener claridad y consistencia.</li> </ul> <p>Al combinar estos conceptos, puedes manejar props y estado en React de manera efectiva mientras aprovechas la potencia de TypeScript. \ud83d\ude80</p>"}]}